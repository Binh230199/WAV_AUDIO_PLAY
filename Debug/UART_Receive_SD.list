
UART_Receive_SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca70  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b44  0800cc10  0800cc10  0001cc10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d754  0800d754  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800d754  0800d754  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d754  0800d754  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d754  0800d754  0001d754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d758  0800d758  0001d758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800d75c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          0000422c  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200042b4  200042b4  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002068a  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000431d  00000000  00000000  00040742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a50  00000000  00000000  00044a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001898  00000000  00000000  000464b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026249  00000000  00000000  00047d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024236  00000000  00000000  0006df91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df5c1  00000000  00000000  000921c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00171788  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000072fc  00000000  00000000  001717d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cbf8 	.word	0x0800cbf8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	0800cbf8 	.word	0x0800cbf8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000294:	2200      	movs	r2, #0
 8000296:	2101      	movs	r1, #1
 8000298:	4803      	ldr	r0, [pc, #12]	; (80002a8 <SELECT+0x18>)
 800029a:	f003 ff2f 	bl	80040fc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800029e:	2001      	movs	r0, #1
 80002a0:	f001 fe58 	bl	8001f54 <HAL_Delay>
}
 80002a4:	bf00      	nop
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	48000400 	.word	0x48000400

080002ac <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80002b0:	2201      	movs	r2, #1
 80002b2:	2101      	movs	r1, #1
 80002b4:	4803      	ldr	r0, [pc, #12]	; (80002c4 <DESELECT+0x18>)
 80002b6:	f003 ff21 	bl	80040fc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80002ba:	2001      	movs	r0, #1
 80002bc:	f001 fe4a 	bl	8001f54 <HAL_Delay>
}
 80002c0:	bf00      	nop
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	48000400 	.word	0x48000400

080002c8 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80002d2:	bf00      	nop
 80002d4:	4b08      	ldr	r3, [pc, #32]	; (80002f8 <SPI_TxByte+0x30>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	689b      	ldr	r3, [r3, #8]
 80002da:	f003 0302 	and.w	r3, r3, #2
 80002de:	2b02      	cmp	r3, #2
 80002e0:	d1f8      	bne.n	80002d4 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80002e2:	1df9      	adds	r1, r7, #7
 80002e4:	2364      	movs	r3, #100	; 0x64
 80002e6:	2201      	movs	r2, #1
 80002e8:	4803      	ldr	r0, [pc, #12]	; (80002f8 <SPI_TxByte+0x30>)
 80002ea:	f006 f894 	bl	8006416 <HAL_SPI_Transmit>
}
 80002ee:	bf00      	nop
 80002f0:	3708      	adds	r7, #8
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	200001b8 	.word	0x200001b8

080002fc <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	460b      	mov	r3, r1
 8000306:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000308:	bf00      	nop
 800030a:	4b08      	ldr	r3, [pc, #32]	; (800032c <SPI_TxBuffer+0x30>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	689b      	ldr	r3, [r3, #8]
 8000310:	f003 0302 	and.w	r3, r3, #2
 8000314:	2b02      	cmp	r3, #2
 8000316:	d1f8      	bne.n	800030a <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000318:	887a      	ldrh	r2, [r7, #2]
 800031a:	2364      	movs	r3, #100	; 0x64
 800031c:	6879      	ldr	r1, [r7, #4]
 800031e:	4803      	ldr	r0, [pc, #12]	; (800032c <SPI_TxBuffer+0x30>)
 8000320:	f006 f879 	bl	8006416 <HAL_SPI_Transmit>
}
 8000324:	bf00      	nop
 8000326:	3708      	adds	r7, #8
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	200001b8 	.word	0x200001b8

08000330 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000336:	23ff      	movs	r3, #255	; 0xff
 8000338:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800033a:	bf00      	nop
 800033c:	4b09      	ldr	r3, [pc, #36]	; (8000364 <SPI_RxByte+0x34>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	689b      	ldr	r3, [r3, #8]
 8000342:	f003 0302 	and.w	r3, r3, #2
 8000346:	2b02      	cmp	r3, #2
 8000348:	d1f8      	bne.n	800033c <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800034a:	1dba      	adds	r2, r7, #6
 800034c:	1df9      	adds	r1, r7, #7
 800034e:	2364      	movs	r3, #100	; 0x64
 8000350:	9300      	str	r3, [sp, #0]
 8000352:	2301      	movs	r3, #1
 8000354:	4803      	ldr	r0, [pc, #12]	; (8000364 <SPI_RxByte+0x34>)
 8000356:	f006 f9cc 	bl	80066f2 <HAL_SPI_TransmitReceive>

	return data;
 800035a:	79bb      	ldrb	r3, [r7, #6]
}
 800035c:	4618      	mov	r0, r3
 800035e:	3708      	adds	r7, #8
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	200001b8 	.word	0x200001b8

08000368 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000370:	f7ff ffde 	bl	8000330 <SPI_RxByte>
 8000374:	4603      	mov	r3, r0
 8000376:	461a      	mov	r2, r3
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	701a      	strb	r2, [r3, #0]
}
 800037c:	bf00      	nop
 800037e:	3708      	adds	r7, #8
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800038a:	4b0a      	ldr	r3, [pc, #40]	; (80003b4 <SD_ReadyWait+0x30>)
 800038c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000390:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000392:	f7ff ffcd 	bl	8000330 <SPI_RxByte>
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	2bff      	cmp	r3, #255	; 0xff
 800039e:	d003      	beq.n	80003a8 <SD_ReadyWait+0x24>
 80003a0:	4b04      	ldr	r3, [pc, #16]	; (80003b4 <SD_ReadyWait+0x30>)
 80003a2:	881b      	ldrh	r3, [r3, #0]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d1f4      	bne.n	8000392 <SD_ReadyWait+0xe>

	return res;
 80003a8:	79fb      	ldrb	r3, [r7, #7]
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	3708      	adds	r7, #8
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	200000a6 	.word	0x200000a6

080003b8 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b084      	sub	sp, #16
 80003bc:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80003be:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80003c2:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80003c4:	f7ff ff72 	bl	80002ac <DESELECT>
	for(int i = 0; i < 10; i++)
 80003c8:	2300      	movs	r3, #0
 80003ca:	60bb      	str	r3, [r7, #8]
 80003cc:	e005      	b.n	80003da <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80003ce:	20ff      	movs	r0, #255	; 0xff
 80003d0:	f7ff ff7a 	bl	80002c8 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80003d4:	68bb      	ldr	r3, [r7, #8]
 80003d6:	3301      	adds	r3, #1
 80003d8:	60bb      	str	r3, [r7, #8]
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	2b09      	cmp	r3, #9
 80003de:	ddf6      	ble.n	80003ce <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80003e0:	f7ff ff56 	bl	8000290 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80003e4:	2340      	movs	r3, #64	; 0x40
 80003e6:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80003e8:	2300      	movs	r3, #0
 80003ea:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80003ec:	2300      	movs	r3, #0
 80003ee:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80003f0:	2300      	movs	r3, #0
 80003f2:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80003f4:	2300      	movs	r3, #0
 80003f6:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80003f8:	2395      	movs	r3, #149	; 0x95
 80003fa:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80003fc:	463b      	mov	r3, r7
 80003fe:	2106      	movs	r1, #6
 8000400:	4618      	mov	r0, r3
 8000402:	f7ff ff7b 	bl	80002fc <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000406:	e002      	b.n	800040e <SD_PowerOn+0x56>
	{
		cnt--;
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	3b01      	subs	r3, #1
 800040c:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800040e:	f7ff ff8f 	bl	8000330 <SPI_RxByte>
 8000412:	4603      	mov	r3, r0
 8000414:	2b01      	cmp	r3, #1
 8000416:	d002      	beq.n	800041e <SD_PowerOn+0x66>
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	2b00      	cmp	r3, #0
 800041c:	d1f4      	bne.n	8000408 <SD_PowerOn+0x50>
	}

	DESELECT();
 800041e:	f7ff ff45 	bl	80002ac <DESELECT>
	SPI_TxByte(0XFF);
 8000422:	20ff      	movs	r0, #255	; 0xff
 8000424:	f7ff ff50 	bl	80002c8 <SPI_TxByte>

	PowerFlag = 1;
 8000428:	4b03      	ldr	r3, [pc, #12]	; (8000438 <SD_PowerOn+0x80>)
 800042a:	2201      	movs	r2, #1
 800042c:	701a      	strb	r2, [r3, #0]
}
 800042e:	bf00      	nop
 8000430:	3710      	adds	r7, #16
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	200000a9 	.word	0x200000a9

0800043c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000440:	4b03      	ldr	r3, [pc, #12]	; (8000450 <SD_PowerOff+0x14>)
 8000442:	2200      	movs	r2, #0
 8000444:	701a      	strb	r2, [r3, #0]
}
 8000446:	bf00      	nop
 8000448:	46bd      	mov	sp, r7
 800044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044e:	4770      	bx	lr
 8000450:	200000a9 	.word	0x200000a9

08000454 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000458:	4b03      	ldr	r3, [pc, #12]	; (8000468 <SD_CheckPower+0x14>)
 800045a:	781b      	ldrb	r3, [r3, #0]
}
 800045c:	4618      	mov	r0, r3
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	200000a9 	.word	0x200000a9

0800046c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000476:	4b13      	ldr	r3, [pc, #76]	; (80004c4 <SD_RxDataBlock+0x58>)
 8000478:	22c8      	movs	r2, #200	; 0xc8
 800047a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 800047c:	f7ff ff58 	bl	8000330 <SPI_RxByte>
 8000480:	4603      	mov	r3, r0
 8000482:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000484:	7bfb      	ldrb	r3, [r7, #15]
 8000486:	2bff      	cmp	r3, #255	; 0xff
 8000488:	d103      	bne.n	8000492 <SD_RxDataBlock+0x26>
 800048a:	4b0e      	ldr	r3, [pc, #56]	; (80004c4 <SD_RxDataBlock+0x58>)
 800048c:	881b      	ldrh	r3, [r3, #0]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d1f4      	bne.n	800047c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000492:	7bfb      	ldrb	r3, [r7, #15]
 8000494:	2bfe      	cmp	r3, #254	; 0xfe
 8000496:	d001      	beq.n	800049c <SD_RxDataBlock+0x30>
 8000498:	2300      	movs	r3, #0
 800049a:	e00f      	b.n	80004bc <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	1c5a      	adds	r2, r3, #1
 80004a0:	607a      	str	r2, [r7, #4]
 80004a2:	4618      	mov	r0, r3
 80004a4:	f7ff ff60 	bl	8000368 <SPI_RxBytePtr>
	} while(len--);
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	1e5a      	subs	r2, r3, #1
 80004ac:	603a      	str	r2, [r7, #0]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d1f4      	bne.n	800049c <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80004b2:	f7ff ff3d 	bl	8000330 <SPI_RxByte>
	SPI_RxByte();
 80004b6:	f7ff ff3b 	bl	8000330 <SPI_RxByte>

	return TRUE;
 80004ba:	2301      	movs	r3, #1
}
 80004bc:	4618      	mov	r0, r3
 80004be:	3710      	adds	r7, #16
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	200000a4 	.word	0x200000a4

080004c8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	460b      	mov	r3, r1
 80004d2:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80004d4:	2300      	movs	r3, #0
 80004d6:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80004d8:	f7ff ff54 	bl	8000384 <SD_ReadyWait>
 80004dc:	4603      	mov	r3, r0
 80004de:	2bff      	cmp	r3, #255	; 0xff
 80004e0:	d001      	beq.n	80004e6 <SD_TxDataBlock+0x1e>
 80004e2:	2300      	movs	r3, #0
 80004e4:	e02f      	b.n	8000546 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80004e6:	78fb      	ldrb	r3, [r7, #3]
 80004e8:	4618      	mov	r0, r3
 80004ea:	f7ff feed 	bl	80002c8 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80004ee:	78fb      	ldrb	r3, [r7, #3]
 80004f0:	2bfd      	cmp	r3, #253	; 0xfd
 80004f2:	d020      	beq.n	8000536 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80004f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004f8:	6878      	ldr	r0, [r7, #4]
 80004fa:	f7ff feff 	bl	80002fc <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80004fe:	f7ff ff17 	bl	8000330 <SPI_RxByte>
		SPI_RxByte();
 8000502:	f7ff ff15 	bl	8000330 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000506:	e00b      	b.n	8000520 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000508:	f7ff ff12 	bl	8000330 <SPI_RxByte>
 800050c:	4603      	mov	r3, r0
 800050e:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000510:	7bfb      	ldrb	r3, [r7, #15]
 8000512:	f003 031f 	and.w	r3, r3, #31
 8000516:	2b05      	cmp	r3, #5
 8000518:	d006      	beq.n	8000528 <SD_TxDataBlock+0x60>
			i++;
 800051a:	7bbb      	ldrb	r3, [r7, #14]
 800051c:	3301      	adds	r3, #1
 800051e:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000520:	7bbb      	ldrb	r3, [r7, #14]
 8000522:	2b40      	cmp	r3, #64	; 0x40
 8000524:	d9f0      	bls.n	8000508 <SD_TxDataBlock+0x40>
 8000526:	e000      	b.n	800052a <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000528:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800052a:	bf00      	nop
 800052c:	f7ff ff00 	bl	8000330 <SPI_RxByte>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d0fa      	beq.n	800052c <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000536:	7bfb      	ldrb	r3, [r7, #15]
 8000538:	f003 031f 	and.w	r3, r3, #31
 800053c:	2b05      	cmp	r3, #5
 800053e:	d101      	bne.n	8000544 <SD_TxDataBlock+0x7c>
 8000540:	2301      	movs	r3, #1
 8000542:	e000      	b.n	8000546 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000544:	2300      	movs	r3, #0
}
 8000546:	4618      	mov	r0, r3
 8000548:	3710      	adds	r7, #16
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}

0800054e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	b084      	sub	sp, #16
 8000552:	af00      	add	r7, sp, #0
 8000554:	4603      	mov	r3, r0
 8000556:	6039      	str	r1, [r7, #0]
 8000558:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800055a:	f7ff ff13 	bl	8000384 <SD_ReadyWait>
 800055e:	4603      	mov	r3, r0
 8000560:	2bff      	cmp	r3, #255	; 0xff
 8000562:	d001      	beq.n	8000568 <SD_SendCmd+0x1a>
 8000564:	23ff      	movs	r3, #255	; 0xff
 8000566:	e042      	b.n	80005ee <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	4618      	mov	r0, r3
 800056c:	f7ff feac 	bl	80002c8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	0e1b      	lsrs	r3, r3, #24
 8000574:	b2db      	uxtb	r3, r3
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff fea6 	bl	80002c8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	0c1b      	lsrs	r3, r3, #16
 8000580:	b2db      	uxtb	r3, r3
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff fea0 	bl	80002c8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	0a1b      	lsrs	r3, r3, #8
 800058c:	b2db      	uxtb	r3, r3
 800058e:	4618      	mov	r0, r3
 8000590:	f7ff fe9a 	bl	80002c8 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	b2db      	uxtb	r3, r3
 8000598:	4618      	mov	r0, r3
 800059a:	f7ff fe95 	bl	80002c8 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	2b40      	cmp	r3, #64	; 0x40
 80005a2:	d102      	bne.n	80005aa <SD_SendCmd+0x5c>
 80005a4:	2395      	movs	r3, #149	; 0x95
 80005a6:	73fb      	strb	r3, [r7, #15]
 80005a8:	e007      	b.n	80005ba <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	2b48      	cmp	r3, #72	; 0x48
 80005ae:	d102      	bne.n	80005b6 <SD_SendCmd+0x68>
 80005b0:	2387      	movs	r3, #135	; 0x87
 80005b2:	73fb      	strb	r3, [r7, #15]
 80005b4:	e001      	b.n	80005ba <SD_SendCmd+0x6c>
	else crc = 1;
 80005b6:	2301      	movs	r3, #1
 80005b8:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80005ba:	7bfb      	ldrb	r3, [r7, #15]
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff fe83 	bl	80002c8 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	2b4c      	cmp	r3, #76	; 0x4c
 80005c6:	d101      	bne.n	80005cc <SD_SendCmd+0x7e>
 80005c8:	f7ff feb2 	bl	8000330 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80005cc:	230a      	movs	r3, #10
 80005ce:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80005d0:	f7ff feae 	bl	8000330 <SPI_RxByte>
 80005d4:	4603      	mov	r3, r0
 80005d6:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80005d8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	da05      	bge.n	80005ec <SD_SendCmd+0x9e>
 80005e0:	7bbb      	ldrb	r3, [r7, #14]
 80005e2:	3b01      	subs	r3, #1
 80005e4:	73bb      	strb	r3, [r7, #14]
 80005e6:	7bbb      	ldrb	r3, [r7, #14]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d1f1      	bne.n	80005d0 <SD_SendCmd+0x82>

	return res;
 80005ec:	7b7b      	ldrb	r3, [r7, #13]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80005f8:	b590      	push	{r4, r7, lr}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SD_disk_initialize+0x14>
 8000608:	2301      	movs	r3, #1
 800060a:	e0d1      	b.n	80007b0 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800060c:	4b6a      	ldr	r3, [pc, #424]	; (80007b8 <SD_disk_initialize+0x1c0>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	b2db      	uxtb	r3, r3
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	2b00      	cmp	r3, #0
 8000618:	d003      	beq.n	8000622 <SD_disk_initialize+0x2a>
 800061a:	4b67      	ldr	r3, [pc, #412]	; (80007b8 <SD_disk_initialize+0x1c0>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	b2db      	uxtb	r3, r3
 8000620:	e0c6      	b.n	80007b0 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000622:	f7ff fec9 	bl	80003b8 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000626:	f7ff fe33 	bl	8000290 <SELECT>

	/* check disk type */
	type = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800062e:	2100      	movs	r1, #0
 8000630:	2040      	movs	r0, #64	; 0x40
 8000632:	f7ff ff8c 	bl	800054e <SD_SendCmd>
 8000636:	4603      	mov	r3, r0
 8000638:	2b01      	cmp	r3, #1
 800063a:	f040 80a1 	bne.w	8000780 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800063e:	4b5f      	ldr	r3, [pc, #380]	; (80007bc <SD_disk_initialize+0x1c4>)
 8000640:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000644:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000646:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800064a:	2048      	movs	r0, #72	; 0x48
 800064c:	f7ff ff7f 	bl	800054e <SD_SendCmd>
 8000650:	4603      	mov	r3, r0
 8000652:	2b01      	cmp	r3, #1
 8000654:	d155      	bne.n	8000702 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000656:	2300      	movs	r3, #0
 8000658:	73fb      	strb	r3, [r7, #15]
 800065a:	e00c      	b.n	8000676 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800065c:	7bfc      	ldrb	r4, [r7, #15]
 800065e:	f7ff fe67 	bl	8000330 <SPI_RxByte>
 8000662:	4603      	mov	r3, r0
 8000664:	461a      	mov	r2, r3
 8000666:	f104 0310 	add.w	r3, r4, #16
 800066a:	443b      	add	r3, r7
 800066c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	3301      	adds	r3, #1
 8000674:	73fb      	strb	r3, [r7, #15]
 8000676:	7bfb      	ldrb	r3, [r7, #15]
 8000678:	2b03      	cmp	r3, #3
 800067a:	d9ef      	bls.n	800065c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800067c:	7abb      	ldrb	r3, [r7, #10]
 800067e:	2b01      	cmp	r3, #1
 8000680:	d17e      	bne.n	8000780 <SD_disk_initialize+0x188>
 8000682:	7afb      	ldrb	r3, [r7, #11]
 8000684:	2baa      	cmp	r3, #170	; 0xaa
 8000686:	d17b      	bne.n	8000780 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000688:	2100      	movs	r1, #0
 800068a:	2077      	movs	r0, #119	; 0x77
 800068c:	f7ff ff5f 	bl	800054e <SD_SendCmd>
 8000690:	4603      	mov	r3, r0
 8000692:	2b01      	cmp	r3, #1
 8000694:	d807      	bhi.n	80006a6 <SD_disk_initialize+0xae>
 8000696:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800069a:	2069      	movs	r0, #105	; 0x69
 800069c:	f7ff ff57 	bl	800054e <SD_SendCmd>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d004      	beq.n	80006b0 <SD_disk_initialize+0xb8>
				} while (Timer1);
 80006a6:	4b45      	ldr	r3, [pc, #276]	; (80007bc <SD_disk_initialize+0x1c4>)
 80006a8:	881b      	ldrh	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d1ec      	bne.n	8000688 <SD_disk_initialize+0x90>
 80006ae:	e000      	b.n	80006b2 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80006b0:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80006b2:	4b42      	ldr	r3, [pc, #264]	; (80007bc <SD_disk_initialize+0x1c4>)
 80006b4:	881b      	ldrh	r3, [r3, #0]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d062      	beq.n	8000780 <SD_disk_initialize+0x188>
 80006ba:	2100      	movs	r1, #0
 80006bc:	207a      	movs	r0, #122	; 0x7a
 80006be:	f7ff ff46 	bl	800054e <SD_SendCmd>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d15b      	bne.n	8000780 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80006c8:	2300      	movs	r3, #0
 80006ca:	73fb      	strb	r3, [r7, #15]
 80006cc:	e00c      	b.n	80006e8 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80006ce:	7bfc      	ldrb	r4, [r7, #15]
 80006d0:	f7ff fe2e 	bl	8000330 <SPI_RxByte>
 80006d4:	4603      	mov	r3, r0
 80006d6:	461a      	mov	r2, r3
 80006d8:	f104 0310 	add.w	r3, r4, #16
 80006dc:	443b      	add	r3, r7
 80006de:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80006e2:	7bfb      	ldrb	r3, [r7, #15]
 80006e4:	3301      	adds	r3, #1
 80006e6:	73fb      	strb	r3, [r7, #15]
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	d9ef      	bls.n	80006ce <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80006ee:	7a3b      	ldrb	r3, [r7, #8]
 80006f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SD_disk_initialize+0x104>
 80006f8:	230c      	movs	r3, #12
 80006fa:	e000      	b.n	80006fe <SD_disk_initialize+0x106>
 80006fc:	2304      	movs	r3, #4
 80006fe:	73bb      	strb	r3, [r7, #14]
 8000700:	e03e      	b.n	8000780 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000702:	2100      	movs	r1, #0
 8000704:	2077      	movs	r0, #119	; 0x77
 8000706:	f7ff ff22 	bl	800054e <SD_SendCmd>
 800070a:	4603      	mov	r3, r0
 800070c:	2b01      	cmp	r3, #1
 800070e:	d808      	bhi.n	8000722 <SD_disk_initialize+0x12a>
 8000710:	2100      	movs	r1, #0
 8000712:	2069      	movs	r0, #105	; 0x69
 8000714:	f7ff ff1b 	bl	800054e <SD_SendCmd>
 8000718:	4603      	mov	r3, r0
 800071a:	2b01      	cmp	r3, #1
 800071c:	d801      	bhi.n	8000722 <SD_disk_initialize+0x12a>
 800071e:	2302      	movs	r3, #2
 8000720:	e000      	b.n	8000724 <SD_disk_initialize+0x12c>
 8000722:	2301      	movs	r3, #1
 8000724:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000726:	7bbb      	ldrb	r3, [r7, #14]
 8000728:	2b02      	cmp	r3, #2
 800072a:	d10e      	bne.n	800074a <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800072c:	2100      	movs	r1, #0
 800072e:	2077      	movs	r0, #119	; 0x77
 8000730:	f7ff ff0d 	bl	800054e <SD_SendCmd>
 8000734:	4603      	mov	r3, r0
 8000736:	2b01      	cmp	r3, #1
 8000738:	d80e      	bhi.n	8000758 <SD_disk_initialize+0x160>
 800073a:	2100      	movs	r1, #0
 800073c:	2069      	movs	r0, #105	; 0x69
 800073e:	f7ff ff06 	bl	800054e <SD_SendCmd>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d107      	bne.n	8000758 <SD_disk_initialize+0x160>
 8000748:	e00c      	b.n	8000764 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800074a:	2100      	movs	r1, #0
 800074c:	2041      	movs	r0, #65	; 0x41
 800074e:	f7ff fefe 	bl	800054e <SD_SendCmd>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d004      	beq.n	8000762 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000758:	4b18      	ldr	r3, [pc, #96]	; (80007bc <SD_disk_initialize+0x1c4>)
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d1e2      	bne.n	8000726 <SD_disk_initialize+0x12e>
 8000760:	e000      	b.n	8000764 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000762:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000764:	4b15      	ldr	r3, [pc, #84]	; (80007bc <SD_disk_initialize+0x1c4>)
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d007      	beq.n	800077c <SD_disk_initialize+0x184>
 800076c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000770:	2050      	movs	r0, #80	; 0x50
 8000772:	f7ff feec 	bl	800054e <SD_SendCmd>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SD_disk_initialize+0x188>
 800077c:	2300      	movs	r3, #0
 800077e:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000780:	4a0f      	ldr	r2, [pc, #60]	; (80007c0 <SD_disk_initialize+0x1c8>)
 8000782:	7bbb      	ldrb	r3, [r7, #14]
 8000784:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000786:	f7ff fd91 	bl	80002ac <DESELECT>
	SPI_RxByte();
 800078a:	f7ff fdd1 	bl	8000330 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800078e:	7bbb      	ldrb	r3, [r7, #14]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d008      	beq.n	80007a6 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000794:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <SD_disk_initialize+0x1c0>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	b2db      	uxtb	r3, r3
 800079a:	f023 0301 	bic.w	r3, r3, #1
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <SD_disk_initialize+0x1c0>)
 80007a2:	701a      	strb	r2, [r3, #0]
 80007a4:	e001      	b.n	80007aa <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80007a6:	f7ff fe49 	bl	800043c <SD_PowerOff>
	}

	return Stat;
 80007aa:	4b03      	ldr	r3, [pc, #12]	; (80007b8 <SD_disk_initialize+0x1c0>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	b2db      	uxtb	r3, r3
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3714      	adds	r7, #20
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd90      	pop	{r4, r7, pc}
 80007b8:	20000000 	.word	0x20000000
 80007bc:	200000a4 	.word	0x200000a4
 80007c0:	200000a8 	.word	0x200000a8

080007c4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SD_disk_status+0x14>
 80007d4:	2301      	movs	r3, #1
 80007d6:	e002      	b.n	80007de <SD_disk_status+0x1a>
	return Stat;
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <SD_disk_status+0x28>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	b2db      	uxtb	r3, r3
}
 80007de:	4618      	mov	r0, r3
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	20000000 	.word	0x20000000

080007f0 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60b9      	str	r1, [r7, #8]
 80007f8:	607a      	str	r2, [r7, #4]
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	4603      	mov	r3, r0
 80007fe:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000800:	7bfb      	ldrb	r3, [r7, #15]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d102      	bne.n	800080c <SD_disk_read+0x1c>
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d101      	bne.n	8000810 <SD_disk_read+0x20>
 800080c:	2304      	movs	r3, #4
 800080e:	e051      	b.n	80008b4 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000810:	4b2a      	ldr	r3, [pc, #168]	; (80008bc <SD_disk_read+0xcc>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	b2db      	uxtb	r3, r3
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SD_disk_read+0x32>
 800081e:	2303      	movs	r3, #3
 8000820:	e048      	b.n	80008b4 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000822:	4b27      	ldr	r3, [pc, #156]	; (80008c0 <SD_disk_read+0xd0>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	2b00      	cmp	r3, #0
 800082c:	d102      	bne.n	8000834 <SD_disk_read+0x44>
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	025b      	lsls	r3, r3, #9
 8000832:	607b      	str	r3, [r7, #4]

	SELECT();
 8000834:	f7ff fd2c 	bl	8000290 <SELECT>

	if (count == 1)
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d111      	bne.n	8000862 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800083e:	6879      	ldr	r1, [r7, #4]
 8000840:	2051      	movs	r0, #81	; 0x51
 8000842:	f7ff fe84 	bl	800054e <SD_SendCmd>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d129      	bne.n	80008a0 <SD_disk_read+0xb0>
 800084c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000850:	68b8      	ldr	r0, [r7, #8]
 8000852:	f7ff fe0b 	bl	800046c <SD_RxDataBlock>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d021      	beq.n	80008a0 <SD_disk_read+0xb0>
 800085c:	2300      	movs	r3, #0
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	e01e      	b.n	80008a0 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	2052      	movs	r0, #82	; 0x52
 8000866:	f7ff fe72 	bl	800054e <SD_SendCmd>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d117      	bne.n	80008a0 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000870:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000874:	68b8      	ldr	r0, [r7, #8]
 8000876:	f7ff fdf9 	bl	800046c <SD_RxDataBlock>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d00a      	beq.n	8000896 <SD_disk_read+0xa6>
				buff += 512;
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000886:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	3b01      	subs	r3, #1
 800088c:	603b      	str	r3, [r7, #0]
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d1ed      	bne.n	8000870 <SD_disk_read+0x80>
 8000894:	e000      	b.n	8000898 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000896:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000898:	2100      	movs	r1, #0
 800089a:	204c      	movs	r0, #76	; 0x4c
 800089c:	f7ff fe57 	bl	800054e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80008a0:	f7ff fd04 	bl	80002ac <DESELECT>
	SPI_RxByte();
 80008a4:	f7ff fd44 	bl	8000330 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	bf14      	ite	ne
 80008ae:	2301      	movne	r3, #1
 80008b0:	2300      	moveq	r3, #0
 80008b2:	b2db      	uxtb	r3, r3
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000000 	.word	0x20000000
 80008c0:	200000a8 	.word	0x200000a8

080008c4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60b9      	str	r1, [r7, #8]
 80008cc:	607a      	str	r2, [r7, #4]
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	4603      	mov	r3, r0
 80008d2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d102      	bne.n	80008e0 <SD_disk_write+0x1c>
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d101      	bne.n	80008e4 <SD_disk_write+0x20>
 80008e0:	2304      	movs	r3, #4
 80008e2:	e06b      	b.n	80009bc <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80008e4:	4b37      	ldr	r3, [pc, #220]	; (80009c4 <SD_disk_write+0x100>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <SD_disk_write+0x32>
 80008f2:	2303      	movs	r3, #3
 80008f4:	e062      	b.n	80009bc <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80008f6:	4b33      	ldr	r3, [pc, #204]	; (80009c4 <SD_disk_write+0x100>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	f003 0304 	and.w	r3, r3, #4
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <SD_disk_write+0x44>
 8000904:	2302      	movs	r3, #2
 8000906:	e059      	b.n	80009bc <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000908:	4b2f      	ldr	r3, [pc, #188]	; (80009c8 <SD_disk_write+0x104>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	f003 0304 	and.w	r3, r3, #4
 8000910:	2b00      	cmp	r3, #0
 8000912:	d102      	bne.n	800091a <SD_disk_write+0x56>
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	025b      	lsls	r3, r3, #9
 8000918:	607b      	str	r3, [r7, #4]

	SELECT();
 800091a:	f7ff fcb9 	bl	8000290 <SELECT>

	if (count == 1)
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	2b01      	cmp	r3, #1
 8000922:	d110      	bne.n	8000946 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000924:	6879      	ldr	r1, [r7, #4]
 8000926:	2058      	movs	r0, #88	; 0x58
 8000928:	f7ff fe11 	bl	800054e <SD_SendCmd>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d13a      	bne.n	80009a8 <SD_disk_write+0xe4>
 8000932:	21fe      	movs	r1, #254	; 0xfe
 8000934:	68b8      	ldr	r0, [r7, #8]
 8000936:	f7ff fdc7 	bl	80004c8 <SD_TxDataBlock>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d033      	beq.n	80009a8 <SD_disk_write+0xe4>
			count = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	e030      	b.n	80009a8 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000946:	4b20      	ldr	r3, [pc, #128]	; (80009c8 <SD_disk_write+0x104>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	2b00      	cmp	r3, #0
 8000950:	d007      	beq.n	8000962 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000952:	2100      	movs	r1, #0
 8000954:	2077      	movs	r0, #119	; 0x77
 8000956:	f7ff fdfa 	bl	800054e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800095a:	6839      	ldr	r1, [r7, #0]
 800095c:	2057      	movs	r0, #87	; 0x57
 800095e:	f7ff fdf6 	bl	800054e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000962:	6879      	ldr	r1, [r7, #4]
 8000964:	2059      	movs	r0, #89	; 0x59
 8000966:	f7ff fdf2 	bl	800054e <SD_SendCmd>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d11b      	bne.n	80009a8 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000970:	21fc      	movs	r1, #252	; 0xfc
 8000972:	68b8      	ldr	r0, [r7, #8]
 8000974:	f7ff fda8 	bl	80004c8 <SD_TxDataBlock>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d00a      	beq.n	8000994 <SD_disk_write+0xd0>
				buff += 512;
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000984:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	3b01      	subs	r3, #1
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d1ee      	bne.n	8000970 <SD_disk_write+0xac>
 8000992:	e000      	b.n	8000996 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000994:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000996:	21fd      	movs	r1, #253	; 0xfd
 8000998:	2000      	movs	r0, #0
 800099a:	f7ff fd95 	bl	80004c8 <SD_TxDataBlock>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d101      	bne.n	80009a8 <SD_disk_write+0xe4>
			{
				count = 1;
 80009a4:	2301      	movs	r3, #1
 80009a6:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80009a8:	f7ff fc80 	bl	80002ac <DESELECT>
	SPI_RxByte();
 80009ac:	f7ff fcc0 	bl	8000330 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	bf14      	ite	ne
 80009b6:	2301      	movne	r3, #1
 80009b8:	2300      	moveq	r3, #0
 80009ba:	b2db      	uxtb	r3, r3
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000000 	.word	0x20000000
 80009c8:	200000a8 	.word	0x200000a8

080009cc <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80009cc:	b590      	push	{r4, r7, lr}
 80009ce:	b08b      	sub	sp, #44	; 0x2c
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	603a      	str	r2, [r7, #0]
 80009d6:	71fb      	strb	r3, [r7, #7]
 80009d8:	460b      	mov	r3, r1
 80009da:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SD_disk_ioctl+0x1e>
 80009e6:	2304      	movs	r3, #4
 80009e8:	e115      	b.n	8000c16 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80009f0:	79bb      	ldrb	r3, [r7, #6]
 80009f2:	2b05      	cmp	r3, #5
 80009f4:	d124      	bne.n	8000a40 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80009f6:	6a3b      	ldr	r3, [r7, #32]
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b02      	cmp	r3, #2
 80009fc:	d012      	beq.n	8000a24 <SD_disk_ioctl+0x58>
 80009fe:	2b02      	cmp	r3, #2
 8000a00:	dc1a      	bgt.n	8000a38 <SD_disk_ioctl+0x6c>
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d002      	beq.n	8000a0c <SD_disk_ioctl+0x40>
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d006      	beq.n	8000a18 <SD_disk_ioctl+0x4c>
 8000a0a:	e015      	b.n	8000a38 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000a0c:	f7ff fd16 	bl	800043c <SD_PowerOff>
			res = RES_OK;
 8000a10:	2300      	movs	r3, #0
 8000a12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000a16:	e0fc      	b.n	8000c12 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000a18:	f7ff fcce 	bl	80003b8 <SD_PowerOn>
			res = RES_OK;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000a22:	e0f6      	b.n	8000c12 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000a24:	6a3b      	ldr	r3, [r7, #32]
 8000a26:	1c5c      	adds	r4, r3, #1
 8000a28:	f7ff fd14 	bl	8000454 <SD_CheckPower>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000a30:	2300      	movs	r3, #0
 8000a32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000a36:	e0ec      	b.n	8000c12 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000a38:	2304      	movs	r3, #4
 8000a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000a3e:	e0e8      	b.n	8000c12 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000a40:	4b77      	ldr	r3, [pc, #476]	; (8000c20 <SD_disk_ioctl+0x254>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <SD_disk_ioctl+0x86>
 8000a4e:	2303      	movs	r3, #3
 8000a50:	e0e1      	b.n	8000c16 <SD_disk_ioctl+0x24a>

		SELECT();
 8000a52:	f7ff fc1d 	bl	8000290 <SELECT>

		switch (ctrl)
 8000a56:	79bb      	ldrb	r3, [r7, #6]
 8000a58:	2b0d      	cmp	r3, #13
 8000a5a:	f200 80cb 	bhi.w	8000bf4 <SD_disk_ioctl+0x228>
 8000a5e:	a201      	add	r2, pc, #4	; (adr r2, 8000a64 <SD_disk_ioctl+0x98>)
 8000a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a64:	08000b5f 	.word	0x08000b5f
 8000a68:	08000a9d 	.word	0x08000a9d
 8000a6c:	08000b4f 	.word	0x08000b4f
 8000a70:	08000bf5 	.word	0x08000bf5
 8000a74:	08000bf5 	.word	0x08000bf5
 8000a78:	08000bf5 	.word	0x08000bf5
 8000a7c:	08000bf5 	.word	0x08000bf5
 8000a80:	08000bf5 	.word	0x08000bf5
 8000a84:	08000bf5 	.word	0x08000bf5
 8000a88:	08000bf5 	.word	0x08000bf5
 8000a8c:	08000bf5 	.word	0x08000bf5
 8000a90:	08000b71 	.word	0x08000b71
 8000a94:	08000b95 	.word	0x08000b95
 8000a98:	08000bb9 	.word	0x08000bb9
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	2049      	movs	r0, #73	; 0x49
 8000aa0:	f7ff fd55 	bl	800054e <SD_SendCmd>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	f040 80a8 	bne.w	8000bfc <SD_disk_ioctl+0x230>
 8000aac:	f107 030c 	add.w	r3, r7, #12
 8000ab0:	2110      	movs	r1, #16
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fcda 	bl	800046c <SD_RxDataBlock>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	f000 809e 	beq.w	8000bfc <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000ac0:	7b3b      	ldrb	r3, [r7, #12]
 8000ac2:	099b      	lsrs	r3, r3, #6
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d10e      	bne.n	8000ae8 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000aca:	7d7b      	ldrb	r3, [r7, #21]
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	7d3b      	ldrb	r3, [r7, #20]
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	021b      	lsls	r3, r3, #8
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	4413      	add	r3, r2
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	3301      	adds	r3, #1
 8000adc:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000ade:	8bfb      	ldrh	r3, [r7, #30]
 8000ae0:	029a      	lsls	r2, r3, #10
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	e02e      	b.n	8000b46 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000ae8:	7c7b      	ldrb	r3, [r7, #17]
 8000aea:	f003 030f 	and.w	r3, r3, #15
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	7dbb      	ldrb	r3, [r7, #22]
 8000af2:	09db      	lsrs	r3, r3, #7
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	4413      	add	r3, r2
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	7d7b      	ldrb	r3, [r7, #21]
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	f003 0306 	and.w	r3, r3, #6
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	4413      	add	r3, r2
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	3302      	adds	r3, #2
 8000b0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000b10:	7d3b      	ldrb	r3, [r7, #20]
 8000b12:	099b      	lsrs	r3, r3, #6
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	7cfb      	ldrb	r3, [r7, #19]
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	4413      	add	r3, r2
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	7cbb      	ldrb	r3, [r7, #18]
 8000b26:	029b      	lsls	r3, r3, #10
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	4413      	add	r3, r2
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	3301      	adds	r3, #1
 8000b36:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000b38:	8bfa      	ldrh	r2, [r7, #30]
 8000b3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b3e:	3b09      	subs	r3, #9
 8000b40:	409a      	lsls	r2, r3
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000b46:	2300      	movs	r3, #0
 8000b48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000b4c:	e056      	b.n	8000bfc <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b54:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000b56:	2300      	movs	r3, #0
 8000b58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000b5c:	e055      	b.n	8000c0a <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000b5e:	f7ff fc11 	bl	8000384 <SD_ReadyWait>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2bff      	cmp	r3, #255	; 0xff
 8000b66:	d14b      	bne.n	8000c00 <SD_disk_ioctl+0x234>
 8000b68:	2300      	movs	r3, #0
 8000b6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000b6e:	e047      	b.n	8000c00 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000b70:	2100      	movs	r1, #0
 8000b72:	2049      	movs	r0, #73	; 0x49
 8000b74:	f7ff fceb 	bl	800054e <SD_SendCmd>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d142      	bne.n	8000c04 <SD_disk_ioctl+0x238>
 8000b7e:	2110      	movs	r1, #16
 8000b80:	6a38      	ldr	r0, [r7, #32]
 8000b82:	f7ff fc73 	bl	800046c <SD_RxDataBlock>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d03b      	beq.n	8000c04 <SD_disk_ioctl+0x238>
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000b92:	e037      	b.n	8000c04 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000b94:	2100      	movs	r1, #0
 8000b96:	204a      	movs	r0, #74	; 0x4a
 8000b98:	f7ff fcd9 	bl	800054e <SD_SendCmd>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d132      	bne.n	8000c08 <SD_disk_ioctl+0x23c>
 8000ba2:	2110      	movs	r1, #16
 8000ba4:	6a38      	ldr	r0, [r7, #32]
 8000ba6:	f7ff fc61 	bl	800046c <SD_RxDataBlock>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d02b      	beq.n	8000c08 <SD_disk_ioctl+0x23c>
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000bb6:	e027      	b.n	8000c08 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000bb8:	2100      	movs	r1, #0
 8000bba:	207a      	movs	r0, #122	; 0x7a
 8000bbc:	f7ff fcc7 	bl	800054e <SD_SendCmd>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d116      	bne.n	8000bf4 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000bcc:	e00b      	b.n	8000be6 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000bce:	6a3c      	ldr	r4, [r7, #32]
 8000bd0:	1c63      	adds	r3, r4, #1
 8000bd2:	623b      	str	r3, [r7, #32]
 8000bd4:	f7ff fbac 	bl	8000330 <SPI_RxByte>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000bdc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000be0:	3301      	adds	r3, #1
 8000be2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000be6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000bea:	2b03      	cmp	r3, #3
 8000bec:	d9ef      	bls.n	8000bce <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000bfa:	e006      	b.n	8000c0a <SD_disk_ioctl+0x23e>
			break;
 8000bfc:	bf00      	nop
 8000bfe:	e004      	b.n	8000c0a <SD_disk_ioctl+0x23e>
			break;
 8000c00:	bf00      	nop
 8000c02:	e002      	b.n	8000c0a <SD_disk_ioctl+0x23e>
			break;
 8000c04:	bf00      	nop
 8000c06:	e000      	b.n	8000c0a <SD_disk_ioctl+0x23e>
			break;
 8000c08:	bf00      	nop
		}

		DESELECT();
 8000c0a:	f7ff fb4f 	bl	80002ac <DESELECT>
		SPI_RxByte();
 8000c0e:	f7ff fb8f 	bl	8000330 <SPI_RxByte>
	}

	return res;
 8000c12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	372c      	adds	r7, #44	; 0x2c
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd90      	pop	{r4, r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000000 	.word	0x20000000

08000c24 <HAL_GPIO_EXTI_Callback>:
static void MX_RTC_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) {
 8000c2e:	88fb      	ldrh	r3, [r7, #6]
 8000c30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c34:	d124      	bne.n	8000c80 <HAL_GPIO_EXTI_Callback+0x5c>
		playFlag = 1;
 8000c36:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <HAL_GPIO_EXTI_Callback+0x64>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	701a      	strb	r2, [r3, #0]
//			WAV_Resume(&currentAudio);
//		if(playFlag == 3)
//			WAV_Stop(&currentAudio);
//		if(playFlag == 4)
//			playFlag = 0;
		for (int i = 0; i < 50000; i++)
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	e002      	b.n	8000c48 <HAL_GPIO_EXTI_Callback+0x24>
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	3301      	adds	r3, #1
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	ddf7      	ble.n	8000c42 <HAL_GPIO_EXTI_Callback+0x1e>
			;
		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0)
 8000c52:	bf00      	nop
 8000c54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c58:	480c      	ldr	r0, [pc, #48]	; (8000c8c <HAL_GPIO_EXTI_Callback+0x68>)
 8000c5a:	f003 fa37 	bl	80040cc <HAL_GPIO_ReadPin>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d0f7      	beq.n	8000c54 <HAL_GPIO_EXTI_Callback+0x30>
			;
		for (int i = 0; i < 50000; i++)
 8000c64:	2300      	movs	r3, #0
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	e002      	b.n	8000c70 <HAL_GPIO_EXTI_Callback+0x4c>
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000c76:	4293      	cmp	r3, r2
 8000c78:	ddf7      	ble.n	8000c6a <HAL_GPIO_EXTI_Callback+0x46>
			;
		EXTI->PR = GPIO_Pin;
 8000c7a:	4a05      	ldr	r2, [pc, #20]	; (8000c90 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000c7c:	88fb      	ldrh	r3, [r7, #6]
 8000c7e:	6153      	str	r3, [r2, #20]
	}
}
 8000c80:	bf00      	nop
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	200003d2 	.word	0x200003d2
 8000c8c:	48000800 	.word	0x48000800
 8000c90:	40010400 	.word	0x40010400

08000c94 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c98:	f001 f8f6 	bl	8001e88 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c9c:	f000 f83a 	bl	8000d14 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	HAL_Delay(5000);
 8000ca0:	f241 3088 	movw	r0, #5000	; 0x1388
 8000ca4:	f001 f956 	bl	8001f54 <HAL_Delay>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ca8:	f000 face 	bl	8001248 <MX_GPIO_Init>
	MX_DMA_Init();
 8000cac:	f000 fa9e 	bl	80011ec <MX_DMA_Init>
	MX_SPI1_Init();
 8000cb0:	f000 f9c8 	bl	8001044 <MX_SPI1_Init>
	MX_FATFS_Init();
 8000cb4:	f007 fab8 	bl	8008228 <MX_FATFS_Init>
	MX_DAC1_Init();
 8000cb8:	f000 f90e 	bl	8000ed8 <MX_DAC1_Init>
	MX_TIM6_Init();
 8000cbc:	f000 fa00 	bl	80010c0 <MX_TIM6_Init>
	MX_ADC1_Init();
 8000cc0:	f000 f89a 	bl	8000df8 <MX_ADC1_Init>
	MX_RTC_Init();
 8000cc4:	f000 f932 	bl	8000f2c <MX_RTC_Init>
	MX_USART2_UART_Init();
 8000cc8:	f000 fa60 	bl	800118c <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 8000ccc:	f000 fa2e 	bl	800112c <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	/* Khoi tao */
	SD_Mount("/");				//Mount the nho
 8000cd0:	480b      	ldr	r0, [pc, #44]	; (8000d00 <main+0x6c>)
 8000cd2:	f000 fb71 	bl	80013b8 <SD_Mount>
//	SD_CreateDir("/WAV");
//	SD_CreateDir("/LOG");

	WAV_Init(&currentAudio);	//Khoi tao Audio WAV
 8000cd6:	480b      	ldr	r0, [pc, #44]	; (8000d04 <main+0x70>)
 8000cd8:	f000 ffa8 	bl	8001c2c <WAV_Init>

	SD_ReadFile(name, readBuffer, 0, 44);
 8000cdc:	232c      	movs	r3, #44	; 0x2c
 8000cde:	2200      	movs	r2, #0
 8000ce0:	4909      	ldr	r1, [pc, #36]	; (8000d08 <main+0x74>)
 8000ce2:	480a      	ldr	r0, [pc, #40]	; (8000d0c <main+0x78>)
 8000ce4:	f000 fb8e 	bl	8001404 <SD_ReadFile>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (playFlag == 1) {
 8000ce8:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <main+0x7c>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d1fb      	bne.n	8000ce8 <main+0x54>
			WAV_Play(name, &currentAudio);
 8000cf0:	4904      	ldr	r1, [pc, #16]	; (8000d04 <main+0x70>)
 8000cf2:	4806      	ldr	r0, [pc, #24]	; (8000d0c <main+0x78>)
 8000cf4:	f000 ffd2 	bl	8001c9c <WAV_Play>
			playFlag = 0;
 8000cf8:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <main+0x7c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	701a      	strb	r2, [r3, #0]
		if (playFlag == 1) {
 8000cfe:	e7f3      	b.n	8000ce8 <main+0x54>
 8000d00:	0800cc10 	.word	0x0800cc10
 8000d04:	200003d4 	.word	0x200003d4
 8000d08:	20000bb8 	.word	0x20000bb8
 8000d0c:	200003b4 	.word	0x200003b4
 8000d10:	200003d2 	.word	0x200003d2

08000d14 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b0a6      	sub	sp, #152	; 0x98
 8000d18:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000d1a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d1e:	2228      	movs	r2, #40	; 0x28
 8000d20:	2100      	movs	r1, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f00b fade 	bl	800c2e4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000d28:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	2258      	movs	r2, #88	; 0x58
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f00b fad0 	bl	800c2e4 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000d44:	f003 fa0a 	bl	800415c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000d48:	4b29      	ldr	r3, [pc, #164]	; (8000df0 <SystemClock_Config+0xdc>)
 8000d4a:	6a1b      	ldr	r3, [r3, #32]
 8000d4c:	4a28      	ldr	r2, [pc, #160]	; (8000df0 <SystemClock_Config+0xdc>)
 8000d4e:	f023 0318 	bic.w	r3, r3, #24
 8000d52:	6213      	str	r3, [r2, #32]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE
 8000d54:	2305      	movs	r3, #5
 8000d56:	673b      	str	r3, [r7, #112]	; 0x70
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d5c:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d62:	2301      	movs	r3, #1
 8000d64:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d66:	2302      	movs	r3, #2
 8000d68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d74:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000d82:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d86:	4618      	mov	r0, r3
 8000d88:	f003 f9f8 	bl	800417c <HAL_RCC_OscConfig>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <SystemClock_Config+0x82>
		Error_Handler();
 8000d92:	f000 faf5 	bl	8001380 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000d96:	230f      	movs	r3, #15
 8000d98:	65fb      	str	r3, [r7, #92]	; 0x5c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000da2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000da6:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000da8:	2300      	movs	r3, #0
 8000daa:	66fb      	str	r3, [r7, #108]	; 0x6c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000dac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000db0:	2102      	movs	r1, #2
 8000db2:	4618      	mov	r0, r3
 8000db4:	f004 fa36 	bl	8005224 <HAL_RCC_ClockConfig>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <SystemClock_Config+0xae>
		Error_Handler();
 8000dbe:	f000 fadf 	bl	8001380 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <SystemClock_Config+0xe0>)
 8000dc4:	607b      	str	r3, [r7, #4]
			| RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_RTC;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000dce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dd2:	60bb      	str	r3, [r7, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f004 fc5a 	bl	8005690 <HAL_RCCEx_PeriphCLKConfig>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <SystemClock_Config+0xd2>
		Error_Handler();
 8000de2:	f000 facd 	bl	8001380 <Error_Handler>
	}
}
 8000de6:	bf00      	nop
 8000de8:	3798      	adds	r7, #152	; 0x98
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40021000 	.word	0x40021000
 8000df4:	00010003 	.word	0x00010003

08000df8 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	; 0x28
 8000dfc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8000dfe:	f107 031c 	add.w	r3, r7, #28
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
 8000e18:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000e1a:	4b2e      	ldr	r3, [pc, #184]	; (8000ed4 <MX_ADC1_Init+0xdc>)
 8000e1c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e20:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e22:	4b2c      	ldr	r3, [pc, #176]	; (8000ed4 <MX_ADC1_Init+0xdc>)
 8000e24:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e28:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e2a:	4b2a      	ldr	r3, [pc, #168]	; (8000ed4 <MX_ADC1_Init+0xdc>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e30:	4b28      	ldr	r3, [pc, #160]	; (8000ed4 <MX_ADC1_Init+0xdc>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000e36:	4b27      	ldr	r3, [pc, #156]	; (8000ed4 <MX_ADC1_Init+0xdc>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	765a      	strb	r2, [r3, #25]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e3c:	4b25      	ldr	r3, [pc, #148]	; (8000ed4 <MX_ADC1_Init+0xdc>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e44:	4b23      	ldr	r3, [pc, #140]	; (8000ed4 <MX_ADC1_Init+0xdc>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e4a:	4b22      	ldr	r3, [pc, #136]	; (8000ed4 <MX_ADC1_Init+0xdc>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e50:	4b20      	ldr	r3, [pc, #128]	; (8000ed4 <MX_ADC1_Init+0xdc>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000e56:	4b1f      	ldr	r3, [pc, #124]	; (8000ed4 <MX_ADC1_Init+0xdc>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <MX_ADC1_Init+0xdc>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e64:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <MX_ADC1_Init+0xdc>)
 8000e66:	2204      	movs	r2, #4
 8000e68:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ed4 <MX_ADC1_Init+0xdc>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	761a      	strb	r2, [r3, #24]
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e70:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <MX_ADC1_Init+0xdc>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000e76:	4817      	ldr	r0, [pc, #92]	; (8000ed4 <MX_ADC1_Init+0xdc>)
 8000e78:	f001 f8ae 	bl	8001fd8 <HAL_ADC_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_ADC1_Init+0x8e>
		Error_Handler();
 8000e82:	f000 fa7d 	bl	8001380 <Error_Handler>
	}
	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8000e8a:	f107 031c 	add.w	r3, r7, #28
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4810      	ldr	r0, [pc, #64]	; (8000ed4 <MX_ADC1_Init+0xdc>)
 8000e92:	f002 f8bf 	bl	8003014 <HAL_ADCEx_MultiModeConfigChannel>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_ADC1_Init+0xa8>
		Error_Handler();
 8000e9c:	f000 fa70 	bl	8001380 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000eac:	2307      	movs	r3, #7
 8000eae:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <MX_ADC1_Init+0xdc>)
 8000ebe:	f001 fdbd 	bl	8002a3c <HAL_ADC_ConfigChannel>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_ADC1_Init+0xd4>
		Error_Handler();
 8000ec8:	f000 fa5a 	bl	8001380 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000ecc:	bf00      	nop
 8000ece:	3728      	adds	r7, #40	; 0x28
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	200000ac 	.word	0x200000ac

08000ed8 <MX_DAC1_Init>:
/**
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN DAC1_Init 1 */

	/* USER CODE END DAC1_Init 1 */
	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <MX_DAC1_Init+0x4c>)
 8000eea:	4a0f      	ldr	r2, [pc, #60]	; (8000f28 <MX_DAC1_Init+0x50>)
 8000eec:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK) {
 8000eee:	480d      	ldr	r0, [pc, #52]	; (8000f24 <MX_DAC1_Init+0x4c>)
 8000ef0:	f002 fb06 	bl	8003500 <HAL_DAC_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_DAC1_Init+0x26>
		Error_Handler();
 8000efa:	f000 fa41 	bl	8001380 <Error_Handler>
	}
	/** DAC channel OUT1 config
	 */
	sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000efe:	2304      	movs	r3, #4
 8000f00:	607b      	str	r3, [r7, #4]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	60bb      	str	r3, [r7, #8]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	2200      	movs	r2, #0
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4805      	ldr	r0, [pc, #20]	; (8000f24 <MX_DAC1_Init+0x4c>)
 8000f0e:	f002 fc51 	bl	80037b4 <HAL_DAC_ConfigChannel>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_DAC1_Init+0x44>
		Error_Handler();
 8000f18:	f000 fa32 	bl	8001380 <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 8000f1c:	bf00      	nop
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000140 	.word	0x20000140
 8000f28:	40007400 	.word	0x40007400

08000f2c <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b090      	sub	sp, #64	; 0x40
 8000f30:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 8000f32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
 8000f40:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 8000f42:	2300      	movs	r3, #0
 8000f44:	62bb      	str	r3, [r7, #40]	; 0x28
	RTC_AlarmTypeDef sAlarm = { 0 };
 8000f46:	463b      	mov	r3, r7
 8000f48:	2228      	movs	r2, #40	; 0x28
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f00b f9c9 	bl	800c2e4 <memset>
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8000f52:	4b3a      	ldr	r3, [pc, #232]	; (800103c <MX_RTC_Init+0x110>)
 8000f54:	4a3a      	ldr	r2, [pc, #232]	; (8001040 <MX_RTC_Init+0x114>)
 8000f56:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f58:	4b38      	ldr	r3, [pc, #224]	; (800103c <MX_RTC_Init+0x110>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8000f5e:	4b37      	ldr	r3, [pc, #220]	; (800103c <MX_RTC_Init+0x110>)
 8000f60:	227f      	movs	r2, #127	; 0x7f
 8000f62:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8000f64:	4b35      	ldr	r3, [pc, #212]	; (800103c <MX_RTC_Init+0x110>)
 8000f66:	22ff      	movs	r2, #255	; 0xff
 8000f68:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f6a:	4b34      	ldr	r3, [pc, #208]	; (800103c <MX_RTC_Init+0x110>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f70:	4b32      	ldr	r3, [pc, #200]	; (800103c <MX_RTC_Init+0x110>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f76:	4b31      	ldr	r3, [pc, #196]	; (800103c <MX_RTC_Init+0x110>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8000f7c:	482f      	ldr	r0, [pc, #188]	; (800103c <MX_RTC_Init+0x110>)
 8000f7e:	f004 fda5 	bl	8005acc <HAL_RTC_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_RTC_Init+0x60>
		Error_Handler();
 8000f88:	f000 f9fa 	bl	8001380 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x23;
 8000f8c:	2323      	movs	r3, #35	; 0x23
 8000f8e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	sTime.Minutes = 0x59;
 8000f92:	2359      	movs	r3, #89	; 0x59
 8000f94:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	sTime.Seconds = 0x0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	63bb      	str	r3, [r7, #56]	; 0x38
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8000fa6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000faa:	2201      	movs	r2, #1
 8000fac:	4619      	mov	r1, r3
 8000fae:	4823      	ldr	r0, [pc, #140]	; (800103c <MX_RTC_Init+0x110>)
 8000fb0:	f004 fe1d 	bl	8005bee <HAL_RTC_SetTime>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_RTC_Init+0x92>
		Error_Handler();
 8000fba:	f000 f9e1 	bl	8001380 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	sDate.Month = RTC_MONTH_OCTOBER;
 8000fc4:	2310      	movs	r3, #16
 8000fc6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	sDate.Date = 0x20;
 8000fca:	2320      	movs	r3, #32
 8000fcc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	sDate.Year = 0x21;
 8000fd0:	2321      	movs	r3, #33	; 0x21
 8000fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8000fd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fda:	2201      	movs	r2, #1
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4817      	ldr	r0, [pc, #92]	; (800103c <MX_RTC_Init+0x110>)
 8000fe0:	f004 fec2 	bl	8005d68 <HAL_RTC_SetDate>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_RTC_Init+0xc2>
		Error_Handler();
 8000fea:	f000 f9c9 	bl	8001380 <Error_Handler>
	}
	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0x0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 0x2;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = 0x10;
 8000ff6:	2310      	movs	r3, #16
 8000ff8:	70bb      	strb	r3, [r7, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	607b      	str	r3, [r7, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800100a:	2300      	movs	r3, #0
 800100c:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDay = 0x1;
 8001012:	2301      	movs	r3, #1
 8001014:	f887 3020 	strb.w	r3, [r7, #32]
	sAlarm.Alarm = RTC_ALARM_A;
 8001018:	f44f 7380 	mov.w	r3, #256	; 0x100
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK) {
 800101e:	463b      	mov	r3, r7
 8001020:	2201      	movs	r2, #1
 8001022:	4619      	mov	r1, r3
 8001024:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_RTC_Init+0x110>)
 8001026:	f004 ff47 	bl	8005eb8 <HAL_RTC_SetAlarm_IT>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_RTC_Init+0x108>
		Error_Handler();
 8001030:	f000 f9a6 	bl	8001380 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8001034:	bf00      	nop
 8001036:	3740      	adds	r7, #64	; 0x40
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000198 	.word	0x20000198
 8001040:	40002800 	.word	0x40002800

08001044 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001048:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <MX_SPI1_Init+0x74>)
 800104a:	4a1c      	ldr	r2, [pc, #112]	; (80010bc <MX_SPI1_Init+0x78>)
 800104c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800104e:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <MX_SPI1_Init+0x74>)
 8001050:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001054:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001056:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <MX_SPI1_Init+0x74>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800105c:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <MX_SPI1_Init+0x74>)
 800105e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001062:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001064:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <MX_SPI1_Init+0x74>)
 8001066:	2200      	movs	r2, #0
 8001068:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800106a:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <MX_SPI1_Init+0x74>)
 800106c:	2200      	movs	r2, #0
 800106e:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <MX_SPI1_Init+0x74>)
 8001072:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001076:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001078:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <MX_SPI1_Init+0x74>)
 800107a:	2218      	movs	r2, #24
 800107c:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <MX_SPI1_Init+0x74>)
 8001080:	2200      	movs	r2, #0
 8001082:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <MX_SPI1_Init+0x74>)
 8001086:	2200      	movs	r2, #0
 8001088:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800108a:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <MX_SPI1_Init+0x74>)
 800108c:	2200      	movs	r2, #0
 800108e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001090:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <MX_SPI1_Init+0x74>)
 8001092:	2207      	movs	r2, #7
 8001094:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001096:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <MX_SPI1_Init+0x74>)
 8001098:	2200      	movs	r2, #0
 800109a:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <MX_SPI1_Init+0x74>)
 800109e:	2208      	movs	r2, #8
 80010a0:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80010a2:	4805      	ldr	r0, [pc, #20]	; (80010b8 <MX_SPI1_Init+0x74>)
 80010a4:	f005 f90c 	bl	80062c0 <HAL_SPI_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_SPI1_Init+0x6e>
		Error_Handler();
 80010ae:	f000 f967 	bl	8001380 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200001b8 	.word	0x200001b8
 80010bc:	40013000 	.word	0x40013000

080010c0 <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <MX_TIM6_Init+0x64>)
 80010d2:	4a15      	ldr	r2, [pc, #84]	; (8001128 <MX_TIM6_Init+0x68>)
 80010d4:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 36 - 1;
 80010d6:	4b13      	ldr	r3, [pc, #76]	; (8001124 <MX_TIM6_Init+0x64>)
 80010d8:	2223      	movs	r2, #35	; 0x23
 80010da:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <MX_TIM6_Init+0x64>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 125 - 1;
 80010e2:	4b10      	ldr	r3, [pc, #64]	; (8001124 <MX_TIM6_Init+0x64>)
 80010e4:	227c      	movs	r2, #124	; 0x7c
 80010e6:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e8:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <MX_TIM6_Init+0x64>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 80010ee:	480d      	ldr	r0, [pc, #52]	; (8001124 <MX_TIM6_Init+0x64>)
 80010f0:	f005 fe76 	bl	8006de0 <HAL_TIM_Base_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM6_Init+0x3e>
		Error_Handler();
 80010fa:	f000 f941 	bl	8001380 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80010fe:	2320      	movs	r3, #32
 8001100:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	4619      	mov	r1, r3
 800110a:	4806      	ldr	r0, [pc, #24]	; (8001124 <MX_TIM6_Init+0x64>)
 800110c:	f005 ffee 	bl	80070ec <HAL_TIMEx_MasterConfigSynchronization>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_TIM6_Init+0x5a>
			!= HAL_OK) {
		Error_Handler();
 8001116:	f000 f933 	bl	8001380 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	2000021c 	.word	0x2000021c
 8001128:	40001000 	.word	0x40001000

0800112c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <MX_USART1_UART_Init+0x58>)
 8001132:	4a15      	ldr	r2, [pc, #84]	; (8001188 <MX_USART1_UART_Init+0x5c>)
 8001134:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001136:	4b13      	ldr	r3, [pc, #76]	; (8001184 <MX_USART1_UART_Init+0x58>)
 8001138:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800113c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800113e:	4b11      	ldr	r3, [pc, #68]	; (8001184 <MX_USART1_UART_Init+0x58>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001144:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <MX_USART1_UART_Init+0x58>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <MX_USART1_UART_Init+0x58>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <MX_USART1_UART_Init+0x58>)
 8001152:	220c      	movs	r2, #12
 8001154:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <MX_USART1_UART_Init+0x58>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800115c:	4b09      	ldr	r3, [pc, #36]	; (8001184 <MX_USART1_UART_Init+0x58>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001162:	4b08      	ldr	r3, [pc, #32]	; (8001184 <MX_USART1_UART_Init+0x58>)
 8001164:	2200      	movs	r2, #0
 8001166:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <MX_USART1_UART_Init+0x58>)
 800116a:	2200      	movs	r2, #0
 800116c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800116e:	4805      	ldr	r0, [pc, #20]	; (8001184 <MX_USART1_UART_Init+0x58>)
 8001170:	f006 f848 	bl	8007204 <HAL_UART_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_USART1_UART_Init+0x52>
		Error_Handler();
 800117a:	f000 f901 	bl	8001380 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000268 	.word	0x20000268
 8001188:	40013800 	.word	0x40013800

0800118c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <MX_USART2_UART_Init+0x58>)
 8001192:	4a15      	ldr	r2, [pc, #84]	; (80011e8 <MX_USART2_UART_Init+0x5c>)
 8001194:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001196:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <MX_USART2_UART_Init+0x58>)
 8001198:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800119c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800119e:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <MX_USART2_UART_Init+0x58>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80011a4:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <MX_USART2_UART_Init+0x58>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <MX_USART2_UART_Init+0x58>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <MX_USART2_UART_Init+0x58>)
 80011b2:	220c      	movs	r2, #12
 80011b4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <MX_USART2_UART_Init+0x58>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011bc:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <MX_USART2_UART_Init+0x58>)
 80011be:	2200      	movs	r2, #0
 80011c0:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011c2:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <MX_USART2_UART_Init+0x58>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <MX_USART2_UART_Init+0x58>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80011ce:	4805      	ldr	r0, [pc, #20]	; (80011e4 <MX_USART2_UART_Init+0x58>)
 80011d0:	f006 f818 	bl	8007204 <HAL_UART_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_USART2_UART_Init+0x52>
		Error_Handler();
 80011da:	f000 f8d1 	bl	8001380 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200002ec 	.word	0x200002ec
 80011e8:	40004400 	.word	0x40004400

080011ec <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80011f2:	4b14      	ldr	r3, [pc, #80]	; (8001244 <MX_DMA_Init+0x58>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	4a13      	ldr	r2, [pc, #76]	; (8001244 <MX_DMA_Init+0x58>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6153      	str	r3, [r2, #20]
 80011fe:	4b11      	ldr	r3, [pc, #68]	; (8001244 <MX_DMA_Init+0x58>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	2100      	movs	r1, #0
 800120e:	200b      	movs	r0, #11
 8001210:	f002 f933 	bl	800347a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001214:	200b      	movs	r0, #11
 8001216:	f002 f94c 	bl	80034b2 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	200d      	movs	r0, #13
 8001220:	f002 f92b 	bl	800347a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001224:	200d      	movs	r0, #13
 8001226:	f002 f944 	bl	80034b2 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	2100      	movs	r1, #0
 800122e:	200f      	movs	r0, #15
 8001230:	f002 f923 	bl	800347a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001234:	200f      	movs	r0, #15
 8001236:	f002 f93c 	bl	80034b2 <HAL_NVIC_EnableIRQ>

}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40021000 	.word	0x40021000

08001248 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	; 0x28
 800124c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
 800125c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800125e:	4b45      	ldr	r3, [pc, #276]	; (8001374 <MX_GPIO_Init+0x12c>)
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	4a44      	ldr	r2, [pc, #272]	; (8001374 <MX_GPIO_Init+0x12c>)
 8001264:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001268:	6153      	str	r3, [r2, #20]
 800126a:	4b42      	ldr	r3, [pc, #264]	; (8001374 <MX_GPIO_Init+0x12c>)
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001276:	4b3f      	ldr	r3, [pc, #252]	; (8001374 <MX_GPIO_Init+0x12c>)
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	4a3e      	ldr	r2, [pc, #248]	; (8001374 <MX_GPIO_Init+0x12c>)
 800127c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001280:	6153      	str	r3, [r2, #20]
 8001282:	4b3c      	ldr	r3, [pc, #240]	; (8001374 <MX_GPIO_Init+0x12c>)
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800128e:	4b39      	ldr	r3, [pc, #228]	; (8001374 <MX_GPIO_Init+0x12c>)
 8001290:	695b      	ldr	r3, [r3, #20]
 8001292:	4a38      	ldr	r2, [pc, #224]	; (8001374 <MX_GPIO_Init+0x12c>)
 8001294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001298:	6153      	str	r3, [r2, #20]
 800129a:	4b36      	ldr	r3, [pc, #216]	; (8001374 <MX_GPIO_Init+0x12c>)
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80012a6:	4b33      	ldr	r3, [pc, #204]	; (8001374 <MX_GPIO_Init+0x12c>)
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	4a32      	ldr	r2, [pc, #200]	; (8001374 <MX_GPIO_Init+0x12c>)
 80012ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b0:	6153      	str	r3, [r2, #20]
 80012b2:	4b30      	ldr	r3, [pc, #192]	; (8001374 <MX_GPIO_Init+0x12c>)
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	2101      	movs	r1, #1
 80012c2:	482d      	ldr	r0, [pc, #180]	; (8001378 <MX_GPIO_Init+0x130>)
 80012c4:	f002 ff1a 	bl	80040fc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d2:	f002 ff13 	bl	80040fc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012da:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012dc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012e0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4619      	mov	r1, r3
 80012ec:	4823      	ldr	r0, [pc, #140]	; (800137c <MX_GPIO_Init+0x134>)
 80012ee:	f002 fd63 	bl	8003db8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012f2:	2301      	movs	r3, #1
 80012f4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012f6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012fa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012fc:	2301      	movs	r3, #1
 80012fe:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	4619      	mov	r1, r3
 8001306:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800130a:	f002 fd55 	bl	8003db8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800130e:	2301      	movs	r3, #1
 8001310:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001312:	2301      	movs	r3, #1
 8001314:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131a:	2300      	movs	r3, #0
 800131c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	4619      	mov	r1, r3
 8001324:	4814      	ldr	r0, [pc, #80]	; (8001378 <MX_GPIO_Init+0x130>)
 8001326:	f002 fd47 	bl	8003db8 <HAL_GPIO_Init>

	/*Configure GPIO pin : SIM_PWR_Pin */
	GPIO_InitStruct.Pin = SIM_PWR_Pin;
 800132a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800132e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001330:	2301      	movs	r3, #1
 8001332:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	2300      	movs	r3, #0
 800133a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SIM_PWR_GPIO_Port, &GPIO_InitStruct);
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	4619      	mov	r1, r3
 8001342:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001346:	f002 fd37 	bl	8003db8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800134a:	2200      	movs	r2, #0
 800134c:	2100      	movs	r1, #0
 800134e:	2006      	movs	r0, #6
 8001350:	f002 f893 	bl	800347a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001354:	2006      	movs	r0, #6
 8001356:	f002 f8ac 	bl	80034b2 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	2100      	movs	r1, #0
 800135e:	2028      	movs	r0, #40	; 0x28
 8001360:	f002 f88b 	bl	800347a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001364:	2028      	movs	r0, #40	; 0x28
 8001366:	f002 f8a4 	bl	80034b2 <HAL_NVIC_EnableIRQ>

}
 800136a:	bf00      	nop
 800136c:	3728      	adds	r7, #40	; 0x28
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40021000 	.word	0x40021000
 8001378:	48000400 	.word	0x48000400
 800137c:	48000800 	.word	0x48000800

08001380 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001384:	b672      	cpsid	i
}
 8001386:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001388:	e7fe      	b.n	8001388 <Error_Handler+0x8>
	...

0800138c <print>:

/**
 * @brief  Print data using UART.
 * @param  string: data want to print
 */
void print(char *string) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_INFO
	uint16_t len = strlen(string);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f7fe ff23 	bl	80001e0 <strlen>
 800139a:	4603      	mov	r3, r0
 800139c:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&DEBUG_INFO, (uint8_t *) string, len, HAL_MAX_DELAY);
 800139e:	89fa      	ldrh	r2, [r7, #14]
 80013a0:	f04f 33ff 	mov.w	r3, #4294967295
 80013a4:	6879      	ldr	r1, [r7, #4]
 80013a6:	4803      	ldr	r0, [pc, #12]	; (80013b4 <print+0x28>)
 80013a8:	f005 ff7a 	bl	80072a0 <HAL_UART_Transmit>
#endif
}
 80013ac:	bf00      	nop
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	200002ec 	.word	0x200002ec

080013b8 <SD_Mount>:
/**
 * @brief  Mount SD Card.
 * @param  path: directory
 */
FRESULT SD_Mount(const TCHAR* path)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	static FATFS fatfs; //file system
	static FRESULT res;

	res = f_mount(&fatfs, path, 0);
 80013c0:	2200      	movs	r2, #0
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	480b      	ldr	r0, [pc, #44]	; (80013f4 <SD_Mount+0x3c>)
 80013c6:	f009 fce3 	bl	800ad90 <f_mount>
 80013ca:	4603      	mov	r3, r0
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <SD_Mount+0x40>)
 80013d0:	701a      	strb	r2, [r3, #0]
	if(res == FR_OK)
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <SD_Mount+0x40>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d103      	bne.n	80013e2 <SD_Mount+0x2a>
		print("Mount SD Card is successful!\r\n\r\n");
 80013da:	4808      	ldr	r0, [pc, #32]	; (80013fc <SD_Mount+0x44>)
 80013dc:	f7ff ffd6 	bl	800138c <print>
 80013e0:	e002      	b.n	80013e8 <SD_Mount+0x30>
	else
		print("Mount SD Card is error!\r\n\r\n");
 80013e2:	4807      	ldr	r0, [pc, #28]	; (8001400 <SD_Mount+0x48>)
 80013e4:	f7ff ffd2 	bl	800138c <print>
	return res;
 80013e8:	4b03      	ldr	r3, [pc, #12]	; (80013f8 <SD_Mount+0x40>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20000fa0 	.word	0x20000fa0
 80013f8:	20001fd0 	.word	0x20001fd0
 80013fc:	0800cc84 	.word	0x0800cc84
 8001400:	0800cca8 	.word	0x0800cca8

08001404 <SD_ReadFile>:
 * @param  startPos: byte position to read
 * @param  size: amount of data elements (u8 or u16) to be read.
 * @retval File function return code
 */
FRESULT SD_ReadFile(char *name, uint8_t *pData, uint32_t startPos, uint32_t size)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
 8001410:	603b      	str	r3, [r7, #0]
	static FIL 	fil; //file
	static FRESULT res; //
	static UINT br; //read/write file pointer variables
	static FILINFO fno; //file information variable

	res = f_stat(name, &fno);
 8001412:	4951      	ldr	r1, [pc, #324]	; (8001558 <SD_ReadFile+0x154>)
 8001414:	68f8      	ldr	r0, [r7, #12]
 8001416:	f00a fdef 	bl	800bff8 <f_stat>
 800141a:	4603      	mov	r3, r0
 800141c:	461a      	mov	r2, r3
 800141e:	4b4f      	ldr	r3, [pc, #316]	; (800155c <SD_ReadFile+0x158>)
 8001420:	701a      	strb	r2, [r3, #0]
	if(res != FR_OK)
 8001422:	4b4e      	ldr	r3, [pc, #312]	; (800155c <SD_ReadFile+0x158>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d012      	beq.n	8001450 <SD_ReadFile+0x4c>
	{	//File not existed
		char *buf = malloc(80*sizeof(char));
 800142a:	2050      	movs	r0, #80	; 0x50
 800142c:	f00a ff4a 	bl	800c2c4 <malloc>
 8001430:	4603      	mov	r3, r0
 8001432:	613b      	str	r3, [r7, #16]
		sprintf(buf, "Error! File -%s- is not existing to read!\r\n\r\n", name);
 8001434:	68fa      	ldr	r2, [r7, #12]
 8001436:	494a      	ldr	r1, [pc, #296]	; (8001560 <SD_ReadFile+0x15c>)
 8001438:	6938      	ldr	r0, [r7, #16]
 800143a:	f00b f84b 	bl	800c4d4 <siprintf>
		print(buf);
 800143e:	6938      	ldr	r0, [r7, #16]
 8001440:	f7ff ffa4 	bl	800138c <print>
		free(buf);
 8001444:	6938      	ldr	r0, [r7, #16]
 8001446:	f00a ff45 	bl	800c2d4 <free>
		return res;
 800144a:	4b44      	ldr	r3, [pc, #272]	; (800155c <SD_ReadFile+0x158>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	e07f      	b.n	8001550 <SD_ReadFile+0x14c>
	}
	else
	{	//File is existing
		//Open file to read data
		res = f_open(&fil, name, FA_READ);
 8001450:	2201      	movs	r2, #1
 8001452:	68f9      	ldr	r1, [r7, #12]
 8001454:	4843      	ldr	r0, [pc, #268]	; (8001564 <SD_ReadFile+0x160>)
 8001456:	f009 fce5 	bl	800ae24 <f_open>
 800145a:	4603      	mov	r3, r0
 800145c:	461a      	mov	r2, r3
 800145e:	4b3f      	ldr	r3, [pc, #252]	; (800155c <SD_ReadFile+0x158>)
 8001460:	701a      	strb	r2, [r3, #0]
		if(res != FR_OK)
 8001462:	4b3e      	ldr	r3, [pc, #248]	; (800155c <SD_ReadFile+0x158>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d015      	beq.n	8001496 <SD_ReadFile+0x92>
		{	//Error
			char *buf = malloc(80*sizeof(char));
 800146a:	2050      	movs	r0, #80	; 0x50
 800146c:	f00a ff2a 	bl	800c2c4 <malloc>
 8001470:	4603      	mov	r3, r0
 8001472:	617b      	str	r3, [r7, #20]
			sprintf(buf, "Error %d while opening file -%s-!\r\n\r\n", res, name);
 8001474:	4b39      	ldr	r3, [pc, #228]	; (800155c <SD_ReadFile+0x158>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	493a      	ldr	r1, [pc, #232]	; (8001568 <SD_ReadFile+0x164>)
 800147e:	6978      	ldr	r0, [r7, #20]
 8001480:	f00b f828 	bl	800c4d4 <siprintf>
			print(buf);
 8001484:	6978      	ldr	r0, [r7, #20]
 8001486:	f7ff ff81 	bl	800138c <print>
			free(buf);
 800148a:	6978      	ldr	r0, [r7, #20]
 800148c:	f00a ff22 	bl	800c2d4 <free>
			return res;
 8001490:	4b32      	ldr	r3, [pc, #200]	; (800155c <SD_ReadFile+0x158>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	e05c      	b.n	8001550 <SD_ReadFile+0x14c>
		}
		else
		{	//Successful
			f_lseek(&fil, startPos);
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	4832      	ldr	r0, [pc, #200]	; (8001564 <SD_ReadFile+0x160>)
 800149a:	f00a fabc 	bl	800ba16 <f_lseek>
			if (f_size(&fil) < size)
 800149e:	4b31      	ldr	r3, [pc, #196]	; (8001564 <SD_ReadFile+0x160>)
 80014a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d905      	bls.n	80014b8 <SD_ReadFile+0xb4>
				size = f_size(&fil);
 80014ac:	4b2d      	ldr	r3, [pc, #180]	; (8001564 <SD_ReadFile+0x160>)
 80014ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	603b      	str	r3, [r7, #0]
 80014b6:	e000      	b.n	80014ba <SD_ReadFile+0xb6>
			else __NOP();
 80014b8:	bf00      	nop
			res = f_read(&fil, pData, size, &br);
 80014ba:	4b2c      	ldr	r3, [pc, #176]	; (800156c <SD_ReadFile+0x168>)
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	68b9      	ldr	r1, [r7, #8]
 80014c0:	4828      	ldr	r0, [pc, #160]	; (8001564 <SD_ReadFile+0x160>)
 80014c2:	f009 ffc7 	bl	800b454 <f_read>
 80014c6:	4603      	mov	r3, r0
 80014c8:	461a      	mov	r2, r3
 80014ca:	4b24      	ldr	r3, [pc, #144]	; (800155c <SD_ReadFile+0x158>)
 80014cc:	701a      	strb	r2, [r3, #0]
			if(res != FR_OK)
 80014ce:	4b23      	ldr	r3, [pc, #140]	; (800155c <SD_ReadFile+0x158>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d013      	beq.n	80014fe <SD_ReadFile+0xfa>
			{	//Error
				char *buf = malloc(80*sizeof(char));
 80014d6:	2050      	movs	r0, #80	; 0x50
 80014d8:	f00a fef4 	bl	800c2c4 <malloc>
 80014dc:	4603      	mov	r3, r0
 80014de:	61fb      	str	r3, [r7, #28]
				sprintf(buf, "Error %d while reading file -%s-!\r\n\r\n", res, name);
 80014e0:	4b1e      	ldr	r3, [pc, #120]	; (800155c <SD_ReadFile+0x158>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	461a      	mov	r2, r3
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	4921      	ldr	r1, [pc, #132]	; (8001570 <SD_ReadFile+0x16c>)
 80014ea:	69f8      	ldr	r0, [r7, #28]
 80014ec:	f00a fff2 	bl	800c4d4 <siprintf>
				print(buf);
 80014f0:	69f8      	ldr	r0, [r7, #28]
 80014f2:	f7ff ff4b 	bl	800138c <print>
				free(buf);
 80014f6:	69f8      	ldr	r0, [r7, #28]
 80014f8:	f00a feec 	bl	800c2d4 <free>
 80014fc:	e008      	b.n	8001510 <SD_ReadFile+0x10c>
			}
			else
			{	//Successful
				print("File content:\r\n");
 80014fe:	481d      	ldr	r0, [pc, #116]	; (8001574 <SD_ReadFile+0x170>)
 8001500:	f7ff ff44 	bl	800138c <print>
				print((char*) pData);
 8001504:	68b8      	ldr	r0, [r7, #8]
 8001506:	f7ff ff41 	bl	800138c <print>
				print("\r\n");
 800150a:	481b      	ldr	r0, [pc, #108]	; (8001578 <SD_ReadFile+0x174>)
 800150c:	f7ff ff3e 	bl	800138c <print>
			}
			//Close file
			res = f_close(&fil);
 8001510:	4814      	ldr	r0, [pc, #80]	; (8001564 <SD_ReadFile+0x160>)
 8001512:	f00a fa55 	bl	800b9c0 <f_close>
 8001516:	4603      	mov	r3, r0
 8001518:	461a      	mov	r2, r3
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <SD_ReadFile+0x158>)
 800151c:	701a      	strb	r2, [r3, #0]
			if(res != FR_OK)
 800151e:	4b0f      	ldr	r3, [pc, #60]	; (800155c <SD_ReadFile+0x158>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d012      	beq.n	800154c <SD_ReadFile+0x148>
			{	//Error
				char *buf = malloc(80*sizeof(char));
 8001526:	2050      	movs	r0, #80	; 0x50
 8001528:	f00a fecc 	bl	800c2c4 <malloc>
 800152c:	4603      	mov	r3, r0
 800152e:	61bb      	str	r3, [r7, #24]
				sprintf(buf, "Error %d while closing file -%s-!\r\n\r\n", res, name);
 8001530:	4b0a      	ldr	r3, [pc, #40]	; (800155c <SD_ReadFile+0x158>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4910      	ldr	r1, [pc, #64]	; (800157c <SD_ReadFile+0x178>)
 800153a:	69b8      	ldr	r0, [r7, #24]
 800153c:	f00a ffca 	bl	800c4d4 <siprintf>
				print(buf);
 8001540:	69b8      	ldr	r0, [r7, #24]
 8001542:	f7ff ff23 	bl	800138c <print>
				free(buf);
 8001546:	69b8      	ldr	r0, [r7, #24]
 8001548:	f00a fec4 	bl	800c2d4 <free>
			}
		}
	}
	return res;
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <SD_ReadFile+0x158>)
 800154e:	781b      	ldrb	r3, [r3, #0]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3720      	adds	r7, #32
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20001fd4 	.word	0x20001fd4
 800155c:	20001ff4 	.word	0x20001ff4
 8001560:	0800cea4 	.word	0x0800cea4
 8001564:	20001ff8 	.word	0x20001ff8
 8001568:	0800ce24 	.word	0x0800ce24
 800156c:	20003024 	.word	0x20003024
 8001570:	0800ced4 	.word	0x0800ced4
 8001574:	0800cefc 	.word	0x0800cefc
 8001578:	0800cd54 	.word	0x0800cd54
 800157c:	0800cdcc 	.word	0x0800cdcc

08001580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001586:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <HAL_MspInit+0x44>)
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	4a0e      	ldr	r2, [pc, #56]	; (80015c4 <HAL_MspInit+0x44>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6193      	str	r3, [r2, #24]
 8001592:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <HAL_MspInit+0x44>)
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800159e:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <HAL_MspInit+0x44>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	4a08      	ldr	r2, [pc, #32]	; (80015c4 <HAL_MspInit+0x44>)
 80015a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a8:	61d3      	str	r3, [r2, #28]
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <HAL_MspInit+0x44>)
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b2:	603b      	str	r3, [r7, #0]
 80015b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	40021000 	.word	0x40021000

080015c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08a      	sub	sp, #40	; 0x28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015e8:	d154      	bne.n	8001694 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80015ea:	4b2c      	ldr	r3, [pc, #176]	; (800169c <HAL_ADC_MspInit+0xd4>)
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	4a2b      	ldr	r2, [pc, #172]	; (800169c <HAL_ADC_MspInit+0xd4>)
 80015f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f4:	6153      	str	r3, [r2, #20]
 80015f6:	4b29      	ldr	r3, [pc, #164]	; (800169c <HAL_ADC_MspInit+0xd4>)
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001602:	4b26      	ldr	r3, [pc, #152]	; (800169c <HAL_ADC_MspInit+0xd4>)
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	4a25      	ldr	r2, [pc, #148]	; (800169c <HAL_ADC_MspInit+0xd4>)
 8001608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800160c:	6153      	str	r3, [r2, #20]
 800160e:	4b23      	ldr	r3, [pc, #140]	; (800169c <HAL_ADC_MspInit+0xd4>)
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800161a:	2302      	movs	r3, #2
 800161c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800161e:	2303      	movs	r3, #3
 8001620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	4619      	mov	r1, r3
 800162c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001630:	f002 fbc2 	bl	8003db8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001634:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <HAL_ADC_MspInit+0xd8>)
 8001636:	4a1b      	ldr	r2, [pc, #108]	; (80016a4 <HAL_ADC_MspInit+0xdc>)
 8001638:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800163a:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <HAL_ADC_MspInit+0xd8>)
 800163c:	2200      	movs	r2, #0
 800163e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001640:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <HAL_ADC_MspInit+0xd8>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001646:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <HAL_ADC_MspInit+0xd8>)
 8001648:	2280      	movs	r2, #128	; 0x80
 800164a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800164c:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <HAL_ADC_MspInit+0xd8>)
 800164e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001652:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001654:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <HAL_ADC_MspInit+0xd8>)
 8001656:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800165a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800165c:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <HAL_ADC_MspInit+0xd8>)
 800165e:	2220      	movs	r2, #32
 8001660:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001662:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <HAL_ADC_MspInit+0xd8>)
 8001664:	2200      	movs	r2, #0
 8001666:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001668:	480d      	ldr	r0, [pc, #52]	; (80016a0 <HAL_ADC_MspInit+0xd8>)
 800166a:	f002 f97a 	bl	8003962 <HAL_DMA_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8001674:	f7ff fe84 	bl	8001380 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a09      	ldr	r2, [pc, #36]	; (80016a0 <HAL_ADC_MspInit+0xd8>)
 800167c:	639a      	str	r2, [r3, #56]	; 0x38
 800167e:	4a08      	ldr	r2, [pc, #32]	; (80016a0 <HAL_ADC_MspInit+0xd8>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001684:	2200      	movs	r2, #0
 8001686:	2100      	movs	r1, #0
 8001688:	2012      	movs	r0, #18
 800168a:	f001 fef6 	bl	800347a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800168e:	2012      	movs	r0, #18
 8001690:	f001 ff0f 	bl	80034b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001694:	bf00      	nop
 8001696:	3728      	adds	r7, #40	; 0x28
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40021000 	.word	0x40021000
 80016a0:	200000fc 	.word	0x200000fc
 80016a4:	40020008 	.word	0x40020008

080016a8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08a      	sub	sp, #40	; 0x28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a2b      	ldr	r2, [pc, #172]	; (8001774 <HAL_DAC_MspInit+0xcc>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d150      	bne.n	800176c <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80016ca:	4b2b      	ldr	r3, [pc, #172]	; (8001778 <HAL_DAC_MspInit+0xd0>)
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	4a2a      	ldr	r2, [pc, #168]	; (8001778 <HAL_DAC_MspInit+0xd0>)
 80016d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80016d4:	61d3      	str	r3, [r2, #28]
 80016d6:	4b28      	ldr	r3, [pc, #160]	; (8001778 <HAL_DAC_MspInit+0xd0>)
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e2:	4b25      	ldr	r3, [pc, #148]	; (8001778 <HAL_DAC_MspInit+0xd0>)
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	4a24      	ldr	r2, [pc, #144]	; (8001778 <HAL_DAC_MspInit+0xd0>)
 80016e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ec:	6153      	str	r3, [r2, #20]
 80016ee:	4b22      	ldr	r3, [pc, #136]	; (8001778 <HAL_DAC_MspInit+0xd0>)
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016fa:	2310      	movs	r3, #16
 80016fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016fe:	2303      	movs	r3, #3
 8001700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4619      	mov	r1, r3
 800170c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001710:	f002 fb52 	bl	8003db8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8001714:	4b19      	ldr	r3, [pc, #100]	; (800177c <HAL_DAC_MspInit+0xd4>)
 8001716:	4a1a      	ldr	r2, [pc, #104]	; (8001780 <HAL_DAC_MspInit+0xd8>)
 8001718:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800171a:	4b18      	ldr	r3, [pc, #96]	; (800177c <HAL_DAC_MspInit+0xd4>)
 800171c:	2210      	movs	r2, #16
 800171e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001720:	4b16      	ldr	r3, [pc, #88]	; (800177c <HAL_DAC_MspInit+0xd4>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <HAL_DAC_MspInit+0xd4>)
 8001728:	2280      	movs	r2, #128	; 0x80
 800172a:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800172c:	4b13      	ldr	r3, [pc, #76]	; (800177c <HAL_DAC_MspInit+0xd4>)
 800172e:	2200      	movs	r2, #0
 8001730:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001732:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_DAC_MspInit+0xd4>)
 8001734:	2200      	movs	r2, #0
 8001736:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001738:	4b10      	ldr	r3, [pc, #64]	; (800177c <HAL_DAC_MspInit+0xd4>)
 800173a:	2220      	movs	r2, #32
 800173c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800173e:	4b0f      	ldr	r3, [pc, #60]	; (800177c <HAL_DAC_MspInit+0xd4>)
 8001740:	2200      	movs	r2, #0
 8001742:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001744:	480d      	ldr	r0, [pc, #52]	; (800177c <HAL_DAC_MspInit+0xd4>)
 8001746:	f002 f90c 	bl	8003962 <HAL_DMA_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <HAL_DAC_MspInit+0xac>
    {
      Error_Handler();
 8001750:	f7ff fe16 	bl	8001380 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 8001754:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <HAL_DAC_MspInit+0xdc>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a0a      	ldr	r2, [pc, #40]	; (8001784 <HAL_DAC_MspInit+0xdc>)
 800175a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800175e:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a06      	ldr	r2, [pc, #24]	; (800177c <HAL_DAC_MspInit+0xd4>)
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	4a05      	ldr	r2, [pc, #20]	; (800177c <HAL_DAC_MspInit+0xd4>)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800176c:	bf00      	nop
 800176e:	3728      	adds	r7, #40	; 0x28
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40007400 	.word	0x40007400
 8001778:	40021000 	.word	0x40021000
 800177c:	20000154 	.word	0x20000154
 8001780:	40020030 	.word	0x40020030
 8001784:	40010000 	.word	0x40010000

08001788 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a10      	ldr	r2, [pc, #64]	; (80017d8 <HAL_RTC_MspInit+0x50>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d119      	bne.n	80017ce <HAL_RTC_MspInit+0x46>
 800179a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800179e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	fa93 f3a3 	rbit	r3, r3
 80017a6:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017a8:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80017aa:	fab3 f383 	clz	r3, r3
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	461a      	mov	r2, r3
 80017b2:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <HAL_RTC_MspInit+0x54>)
 80017b4:	4413      	add	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	461a      	mov	r2, r3
 80017ba:	2301      	movs	r3, #1
 80017bc:	6013      	str	r3, [r2, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	2100      	movs	r1, #0
 80017c2:	2029      	movs	r0, #41	; 0x29
 80017c4:	f001 fe59 	bl	800347a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80017c8:	2029      	movs	r0, #41	; 0x29
 80017ca:	f001 fe72 	bl	80034b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40002800 	.word	0x40002800
 80017dc:	10908100 	.word	0x10908100

080017e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08a      	sub	sp, #40	; 0x28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a17      	ldr	r2, [pc, #92]	; (800185c <HAL_SPI_MspInit+0x7c>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d128      	bne.n	8001854 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001802:	4b17      	ldr	r3, [pc, #92]	; (8001860 <HAL_SPI_MspInit+0x80>)
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	4a16      	ldr	r2, [pc, #88]	; (8001860 <HAL_SPI_MspInit+0x80>)
 8001808:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800180c:	6193      	str	r3, [r2, #24]
 800180e:	4b14      	ldr	r3, [pc, #80]	; (8001860 <HAL_SPI_MspInit+0x80>)
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181a:	4b11      	ldr	r3, [pc, #68]	; (8001860 <HAL_SPI_MspInit+0x80>)
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	4a10      	ldr	r2, [pc, #64]	; (8001860 <HAL_SPI_MspInit+0x80>)
 8001820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001824:	6153      	str	r3, [r2, #20]
 8001826:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <HAL_SPI_MspInit+0x80>)
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001832:	23e0      	movs	r3, #224	; 0xe0
 8001834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001836:	2302      	movs	r3, #2
 8001838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800183e:	2303      	movs	r3, #3
 8001840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001842:	2305      	movs	r3, #5
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	4619      	mov	r1, r3
 800184c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001850:	f002 fab2 	bl	8003db8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001854:	bf00      	nop
 8001856:	3728      	adds	r7, #40	; 0x28
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40013000 	.word	0x40013000
 8001860:	40021000 	.word	0x40021000

08001864 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a0a      	ldr	r2, [pc, #40]	; (800189c <HAL_TIM_Base_MspInit+0x38>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d10b      	bne.n	800188e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001876:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <HAL_TIM_Base_MspInit+0x3c>)
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	4a09      	ldr	r2, [pc, #36]	; (80018a0 <HAL_TIM_Base_MspInit+0x3c>)
 800187c:	f043 0310 	orr.w	r3, r3, #16
 8001880:	61d3      	str	r3, [r2, #28]
 8001882:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <HAL_TIM_Base_MspInit+0x3c>)
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	f003 0310 	and.w	r3, r3, #16
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800188e:	bf00      	nop
 8001890:	3714      	adds	r7, #20
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	40001000 	.word	0x40001000
 80018a0:	40021000 	.word	0x40021000

080018a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08c      	sub	sp, #48	; 0x30
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 031c 	add.w	r3, r7, #28
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a49      	ldr	r2, [pc, #292]	; (80019e8 <HAL_UART_MspInit+0x144>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d156      	bne.n	8001974 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018c6:	4b49      	ldr	r3, [pc, #292]	; (80019ec <HAL_UART_MspInit+0x148>)
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	4a48      	ldr	r2, [pc, #288]	; (80019ec <HAL_UART_MspInit+0x148>)
 80018cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d0:	6193      	str	r3, [r2, #24]
 80018d2:	4b46      	ldr	r3, [pc, #280]	; (80019ec <HAL_UART_MspInit+0x148>)
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018da:	61bb      	str	r3, [r7, #24]
 80018dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018de:	4b43      	ldr	r3, [pc, #268]	; (80019ec <HAL_UART_MspInit+0x148>)
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	4a42      	ldr	r2, [pc, #264]	; (80019ec <HAL_UART_MspInit+0x148>)
 80018e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018e8:	6153      	str	r3, [r2, #20]
 80018ea:	4b40      	ldr	r3, [pc, #256]	; (80019ec <HAL_UART_MspInit+0x148>)
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80018f6:	2330      	movs	r3, #48	; 0x30
 80018f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fa:	2302      	movs	r3, #2
 80018fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001902:	2303      	movs	r3, #3
 8001904:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001906:	2307      	movs	r3, #7
 8001908:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800190a:	f107 031c 	add.w	r3, r7, #28
 800190e:	4619      	mov	r1, r3
 8001910:	4837      	ldr	r0, [pc, #220]	; (80019f0 <HAL_UART_MspInit+0x14c>)
 8001912:	f002 fa51 	bl	8003db8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001916:	4b37      	ldr	r3, [pc, #220]	; (80019f4 <HAL_UART_MspInit+0x150>)
 8001918:	4a37      	ldr	r2, [pc, #220]	; (80019f8 <HAL_UART_MspInit+0x154>)
 800191a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800191c:	4b35      	ldr	r3, [pc, #212]	; (80019f4 <HAL_UART_MspInit+0x150>)
 800191e:	2200      	movs	r2, #0
 8001920:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001922:	4b34      	ldr	r3, [pc, #208]	; (80019f4 <HAL_UART_MspInit+0x150>)
 8001924:	2200      	movs	r2, #0
 8001926:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001928:	4b32      	ldr	r3, [pc, #200]	; (80019f4 <HAL_UART_MspInit+0x150>)
 800192a:	2280      	movs	r2, #128	; 0x80
 800192c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800192e:	4b31      	ldr	r3, [pc, #196]	; (80019f4 <HAL_UART_MspInit+0x150>)
 8001930:	2200      	movs	r2, #0
 8001932:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001934:	4b2f      	ldr	r3, [pc, #188]	; (80019f4 <HAL_UART_MspInit+0x150>)
 8001936:	2200      	movs	r2, #0
 8001938:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800193a:	4b2e      	ldr	r3, [pc, #184]	; (80019f4 <HAL_UART_MspInit+0x150>)
 800193c:	2200      	movs	r2, #0
 800193e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001940:	4b2c      	ldr	r3, [pc, #176]	; (80019f4 <HAL_UART_MspInit+0x150>)
 8001942:	2200      	movs	r2, #0
 8001944:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001946:	482b      	ldr	r0, [pc, #172]	; (80019f4 <HAL_UART_MspInit+0x150>)
 8001948:	f002 f80b 	bl	8003962 <HAL_DMA_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <HAL_UART_MspInit+0xb2>
    {
      Error_Handler();
 8001952:	f7ff fd15 	bl	8001380 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a26      	ldr	r2, [pc, #152]	; (80019f4 <HAL_UART_MspInit+0x150>)
 800195a:	671a      	str	r2, [r3, #112]	; 0x70
 800195c:	4a25      	ldr	r2, [pc, #148]	; (80019f4 <HAL_UART_MspInit+0x150>)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001962:	2200      	movs	r2, #0
 8001964:	2100      	movs	r1, #0
 8001966:	2025      	movs	r0, #37	; 0x25
 8001968:	f001 fd87 	bl	800347a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800196c:	2025      	movs	r0, #37	; 0x25
 800196e:	f001 fda0 	bl	80034b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001972:	e035      	b.n	80019e0 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a20      	ldr	r2, [pc, #128]	; (80019fc <HAL_UART_MspInit+0x158>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d130      	bne.n	80019e0 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800197e:	4b1b      	ldr	r3, [pc, #108]	; (80019ec <HAL_UART_MspInit+0x148>)
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	4a1a      	ldr	r2, [pc, #104]	; (80019ec <HAL_UART_MspInit+0x148>)
 8001984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001988:	61d3      	str	r3, [r2, #28]
 800198a:	4b18      	ldr	r3, [pc, #96]	; (80019ec <HAL_UART_MspInit+0x148>)
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001996:	4b15      	ldr	r3, [pc, #84]	; (80019ec <HAL_UART_MspInit+0x148>)
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	4a14      	ldr	r2, [pc, #80]	; (80019ec <HAL_UART_MspInit+0x148>)
 800199c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a0:	6153      	str	r3, [r2, #20]
 80019a2:	4b12      	ldr	r3, [pc, #72]	; (80019ec <HAL_UART_MspInit+0x148>)
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019ae:	230c      	movs	r3, #12
 80019b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b2:	2302      	movs	r3, #2
 80019b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019ba:	2303      	movs	r3, #3
 80019bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019be:	2307      	movs	r3, #7
 80019c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c2:	f107 031c 	add.w	r3, r7, #28
 80019c6:	4619      	mov	r1, r3
 80019c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019cc:	f002 f9f4 	bl	8003db8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019d0:	2200      	movs	r2, #0
 80019d2:	2100      	movs	r1, #0
 80019d4:	2026      	movs	r0, #38	; 0x26
 80019d6:	f001 fd50 	bl	800347a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019da:	2026      	movs	r0, #38	; 0x26
 80019dc:	f001 fd69 	bl	80034b2 <HAL_NVIC_EnableIRQ>
}
 80019e0:	bf00      	nop
 80019e2:	3730      	adds	r7, #48	; 0x30
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40013800 	.word	0x40013800
 80019ec:	40021000 	.word	0x40021000
 80019f0:	48000800 	.word	0x48000800
 80019f4:	20000370 	.word	0x20000370
 80019f8:	40020058 	.word	0x40020058
 80019fc:	40004400 	.word	0x40004400

08001a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a04:	e7fe      	b.n	8001a04 <NMI_Handler+0x4>

08001a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a0a:	e7fe      	b.n	8001a0a <HardFault_Handler+0x4>

08001a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a10:	e7fe      	b.n	8001a10 <MemManage_Handler+0x4>

08001a12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a16:	e7fe      	b.n	8001a16 <BusFault_Handler+0x4>

08001a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a1c:	e7fe      	b.n	8001a1c <UsageFault_Handler+0x4>

08001a1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0) Timer1--;
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <SysTick_Handler+0x44>)
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d005      	beq.n	8001a60 <SysTick_Handler+0x18>
 8001a54:	4b0d      	ldr	r3, [pc, #52]	; (8001a8c <SysTick_Handler+0x44>)
 8001a56:	881b      	ldrh	r3, [r3, #0]
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <SysTick_Handler+0x44>)
 8001a5e:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0) Timer2--;
 8001a60:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <SysTick_Handler+0x48>)
 8001a62:	881b      	ldrh	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d005      	beq.n	8001a74 <SysTick_Handler+0x2c>
 8001a68:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <SysTick_Handler+0x48>)
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <SysTick_Handler+0x48>)
 8001a72:	801a      	strh	r2, [r3, #0]
	TIMEOUT--;
 8001a74:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <SysTick_Handler+0x4c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	4a06      	ldr	r2, [pc, #24]	; (8001a94 <SysTick_Handler+0x4c>)
 8001a7c:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a7e:	f000 fa49 	bl	8001f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8001a82:	f001 fd30 	bl	80034e6 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	200000a4 	.word	0x200000a4
 8001a90:	200000a6 	.word	0x200000a6
 8001a94:	20003028 	.word	0x20003028

08001a98 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	f002 fb45 	bl	800412c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001aac:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <DMA1_Channel1_IRQHandler+0x10>)
 8001aae:	f002 f875 	bl	8003b9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200000fc 	.word	0x200000fc

08001abc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001ac0:	4802      	ldr	r0, [pc, #8]	; (8001acc <DMA1_Channel3_IRQHandler+0x10>)
 8001ac2:	f002 f86b 	bl	8003b9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000154 	.word	0x20000154

08001ad0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001ad4:	4802      	ldr	r0, [pc, #8]	; (8001ae0 <DMA1_Channel5_IRQHandler+0x10>)
 8001ad6:	f002 f861 	bl	8003b9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000370 	.word	0x20000370

08001ae4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001ae8:	4802      	ldr	r0, [pc, #8]	; (8001af4 <ADC1_2_IRQHandler+0x10>)
 8001aea:	f000 fc6f 	bl	80023cc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	200000ac 	.word	0x200000ac

08001af8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001afc:	4802      	ldr	r0, [pc, #8]	; (8001b08 <USART1_IRQHandler+0x10>)
 8001afe:	f005 fc63 	bl	80073c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000268 	.word	0x20000268

08001b0c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b10:	4802      	ldr	r0, [pc, #8]	; (8001b1c <USART2_IRQHandler+0x10>)
 8001b12:	f005 fc59 	bl	80073c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	200002ec 	.word	0x200002ec

08001b20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001b24:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b28:	f002 fb00 	bl	800412c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001b34:	4802      	ldr	r0, [pc, #8]	; (8001b40 <RTC_Alarm_IRQHandler+0x10>)
 8001b36:	f004 faf7 	bl	8006128 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000198 	.word	0x20000198

08001b44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b4c:	4a14      	ldr	r2, [pc, #80]	; (8001ba0 <_sbrk+0x5c>)
 8001b4e:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <_sbrk+0x60>)
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b58:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <_sbrk+0x64>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d102      	bne.n	8001b66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b60:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <_sbrk+0x64>)
 8001b62:	4a12      	ldr	r2, [pc, #72]	; (8001bac <_sbrk+0x68>)
 8001b64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b66:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <_sbrk+0x64>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d207      	bcs.n	8001b84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b74:	f00a fb7c 	bl	800c270 <__errno>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	220c      	movs	r2, #12
 8001b7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b82:	e009      	b.n	8001b98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b84:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <_sbrk+0x64>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b8a:	4b07      	ldr	r3, [pc, #28]	; (8001ba8 <_sbrk+0x64>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4413      	add	r3, r2
 8001b92:	4a05      	ldr	r2, [pc, #20]	; (8001ba8 <_sbrk+0x64>)
 8001b94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b96:	68fb      	ldr	r3, [r7, #12]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20010000 	.word	0x20010000
 8001ba4:	00000400 	.word	0x00000400
 8001ba8:	2000302c 	.word	0x2000302c
 8001bac:	200042b8 	.word	0x200042b8

08001bb0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <SystemInit+0x20>)
 8001bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bba:	4a05      	ldr	r2, [pc, #20]	; (8001bd0 <SystemInit+0x20>)
 8001bbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <__WAV_SetSampleFreq>:
 * 			+ 16000Hz
 * 			+ 48000Hz
 * @retval None
 */
static void __WAV_SetSampleFreq(uint32_t frequency)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
	htim6.Instance = TIM6;
 8001bdc:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <__WAV_SetSampleFreq+0x4c>)
 8001bde:	4a11      	ldr	r2, [pc, #68]	; (8001c24 <__WAV_SetSampleFreq+0x50>)
 8001be0:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 0;
 8001be2:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <__WAV_SetSampleFreq+0x4c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be8:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <__WAV_SetSampleFreq+0x4c>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = (uint16_t) ((F_HCLK / frequency) - 1);
 8001bee:	4a0e      	ldr	r2, [pc, #56]	; (8001c28 <__WAV_SetSampleFreq+0x54>)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <__WAV_SetSampleFreq+0x4c>)
 8001c00:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c02:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <__WAV_SetSampleFreq+0x4c>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c08:	4805      	ldr	r0, [pc, #20]	; (8001c20 <__WAV_SetSampleFreq+0x4c>)
 8001c0a:	f005 f8e9 	bl	8006de0 <HAL_TIM_Base_Init>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <__WAV_SetSampleFreq+0x44>
	{
		Error_Handler();
 8001c14:	f7ff fbb4 	bl	8001380 <Error_Handler>
	}
}
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	2000021c 	.word	0x2000021c
 8001c24:	40001000 	.word	0x40001000
 8001c28:	044aa200 	.word	0x044aa200

08001c2c <WAV_Init>:
 * @brief  Initialize the audio state
 * @param  wavInfo: Wave audio current info structure
 * @retval None
 */
void WAV_Init(WAV_InfoTypeDef* wavInfo)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
	wavInfo->state = WAV_STATE_PLAY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 27e0 	strb.w	r2, [r3, #2016]	; 0x7e0
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <__WAV_IsWavFile>:
 * @brief  Check the file is wav audio file?
 * @param  header: header of wav audio file
 * @retval '0' if the file is not wav format, '1' if it's correct
 */
static uint8_t __WAV_IsWavFile(WAV_FormatTypeDef *header)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
	//compare chunkID == RIFF ?
	if(strncmp((char*) header->chunkID, "RIFF", 4) != 0)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2204      	movs	r2, #4
 8001c54:	4909      	ldr	r1, [pc, #36]	; (8001c7c <__WAV_IsWavFile+0x34>)
 8001c56:	4618      	mov	r0, r3
 8001c58:	f00a fc5c 	bl	800c514 <strncmp>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <__WAV_IsWavFile+0x1e>
		return 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	e006      	b.n	8001c74 <__WAV_IsWavFile+0x2c>
	if(header->audioFormat != WAVE_FORMAT_PCM)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	8a9b      	ldrh	r3, [r3, #20]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d001      	beq.n	8001c72 <__WAV_IsWavFile+0x2a>
		return 0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	e000      	b.n	8001c74 <__WAV_IsWavFile+0x2c>
	return 1;
 8001c72:	2301      	movs	r3, #1
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	0800d128 	.word	0x0800d128

08001c80 <WAV_GetState>:
 * @brief  Get audio statement
 * @param  wavInfo: Wave audio current info structure
 * @retval WAV state
 */
WAV_StateTypeDef WAV_GetState(WAV_InfoTypeDef* wavInfo)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
	return wavInfo->state;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 37e0 	ldrb.w	r3, [r3, #2016]	; 0x7e0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
	...

08001c9c <WAV_Play>:
 * @param  fileList: FILELIST structure
 * @param  wavInfo: Wave audio current info structure
 * @retval WAV state
 */
WAV_StateTypeDef WAV_Play(char* nameFile, WAV_InfoTypeDef* wavInfo)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b090      	sub	sp, #64	; 0x40
 8001ca0:	af02      	add	r7, sp, #8
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
	static UINT br;
	static FIL fil;
	static uint32_t f_size = 0;
	static uint16_t bufSize = 0;
	WAV_FormatTypeDef header;
	wavInfo->file = nameFile;
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	f8c3 27d0 	str.w	r2, [r3, #2000]	; 0x7d0

	if(WAV_GetState(wavInfo) != WAV_STATE_PLAY)
 8001cae:	6838      	ldr	r0, [r7, #0]
 8001cb0:	f7ff ffe6 	bl	8001c80 <WAV_GetState>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	f040 8099 	bne.w	8001dee <WAV_Play+0x152>
		goto end;
	res = f_open(&fil, wavInfo->file, FA_READ);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	f8d3 37d0 	ldr.w	r3, [r3, #2000]	; 0x7d0
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4854      	ldr	r0, [pc, #336]	; (8001e18 <WAV_Play+0x17c>)
 8001cc8:	f009 f8ac 	bl	800ae24 <f_open>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	461a      	mov	r2, r3
 8001cd0:	4b52      	ldr	r3, [pc, #328]	; (8001e1c <WAV_Play+0x180>)
 8001cd2:	701a      	strb	r2, [r3, #0]
	if(res != FR_OK)
 8001cd4:	4b51      	ldr	r3, [pc, #324]	; (8001e1c <WAV_Play+0x180>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d004      	beq.n	8001ce6 <WAV_Play+0x4a>
	{
		wavInfo->state = WAV_STATE_ERROR;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	2207      	movs	r2, #7
 8001ce0:	f883 27e0 	strb.w	r2, [r3, #2016]	; 0x7e0
 8001ce4:	e07a      	b.n	8001ddc <WAV_Play+0x140>
	}
	else
	{
		res = f_read(&fil, &header, 44, &br);
 8001ce6:	f107 010c 	add.w	r1, r7, #12
 8001cea:	4b4d      	ldr	r3, [pc, #308]	; (8001e20 <WAV_Play+0x184>)
 8001cec:	222c      	movs	r2, #44	; 0x2c
 8001cee:	484a      	ldr	r0, [pc, #296]	; (8001e18 <WAV_Play+0x17c>)
 8001cf0:	f009 fbb0 	bl	800b454 <f_read>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	4b48      	ldr	r3, [pc, #288]	; (8001e1c <WAV_Play+0x180>)
 8001cfa:	701a      	strb	r2, [r3, #0]
		if(res != FR_OK)
 8001cfc:	4b47      	ldr	r3, [pc, #284]	; (8001e1c <WAV_Play+0x180>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d004      	beq.n	8001d0e <WAV_Play+0x72>
		{
			wavInfo->state = WAV_STATE_ERROR;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	2207      	movs	r2, #7
 8001d08:	f883 27e0 	strb.w	r2, [r3, #2016]	; 0x7e0
 8001d0c:	e066      	b.n	8001ddc <WAV_Play+0x140>
		}
		else
		{
			if(__WAV_IsWavFile(&header))
 8001d0e:	f107 030c 	add.w	r3, r7, #12
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff ff98 	bl	8001c48 <__WAV_IsWavFile>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d05d      	beq.n	8001dda <WAV_Play+0x13e>
			{
				f_size = header.fileSize - 36;
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	3b24      	subs	r3, #36	; 0x24
 8001d22:	4a40      	ldr	r2, [pc, #256]	; (8001e24 <WAV_Play+0x188>)
 8001d24:	6013      	str	r3, [r2, #0]
				__WAV_SetSampleFreq(header.sampleRate);
 8001d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff ff53 	bl	8001bd4 <__WAV_SetSampleFreq>
				HAL_TIM_Base_Start(&htim6);
 8001d2e:	483e      	ldr	r0, [pc, #248]	; (8001e28 <WAV_Play+0x18c>)
 8001d30:	f005 f8ae 	bl	8006e90 <HAL_TIM_Base_Start>
				memset(wavInfo->buff, 0, WAV_BUFFER_SIZE);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f00a fad1 	bl	800c2e4 <memset>

				while(f_size > 0)
 8001d42:	e045      	b.n	8001dd0 <WAV_Play+0x134>
				{
					if(f_size < WAV_BUFFER_SIZE) bufSize = f_size;
 8001d44:	4b37      	ldr	r3, [pc, #220]	; (8001e24 <WAV_Play+0x188>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001d4c:	d205      	bcs.n	8001d5a <WAV_Play+0xbe>
 8001d4e:	4b35      	ldr	r3, [pc, #212]	; (8001e24 <WAV_Play+0x188>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	4b35      	ldr	r3, [pc, #212]	; (8001e2c <WAV_Play+0x190>)
 8001d56:	801a      	strh	r2, [r3, #0]
 8001d58:	e003      	b.n	8001d62 <WAV_Play+0xc6>
					else bufSize = WAV_BUFFER_SIZE;
 8001d5a:	4b34      	ldr	r3, [pc, #208]	; (8001e2c <WAV_Play+0x190>)
 8001d5c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001d60:	801a      	strh	r2, [r3, #0]

					f_lseek(&fil, wavInfo->filePtr);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	f8d3 37d8 	ldr.w	r3, [r3, #2008]	; 0x7d8
 8001d68:	4619      	mov	r1, r3
 8001d6a:	482b      	ldr	r0, [pc, #172]	; (8001e18 <WAV_Play+0x17c>)
 8001d6c:	f009 fe53 	bl	800ba16 <f_lseek>
					f_read(&fil, wavInfo->buff, bufSize, &br);
 8001d70:	6839      	ldr	r1, [r7, #0]
 8001d72:	4b2e      	ldr	r3, [pc, #184]	; (8001e2c <WAV_Play+0x190>)
 8001d74:	881b      	ldrh	r3, [r3, #0]
 8001d76:	461a      	mov	r2, r3
 8001d78:	4b29      	ldr	r3, [pc, #164]	; (8001e20 <WAV_Play+0x184>)
 8001d7a:	4827      	ldr	r0, [pc, #156]	; (8001e18 <WAV_Play+0x17c>)
 8001d7c:	f009 fb6a 	bl	800b454 <f_read>

					HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)wavInfo->buff, bufSize, DAC_ALIGN_8B_R);
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	4b2a      	ldr	r3, [pc, #168]	; (8001e2c <WAV_Play+0x190>)
 8001d84:	881b      	ldrh	r3, [r3, #0]
 8001d86:	4619      	mov	r1, r3
 8001d88:	2308      	movs	r3, #8
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	2100      	movs	r1, #0
 8001d90:	4827      	ldr	r0, [pc, #156]	; (8001e30 <WAV_Play+0x194>)
 8001d92:	f001 fc53 	bl	800363c <HAL_DAC_Start_DMA>

					while(HAL_DAC_GetState(&hdac1) != HAL_DAC_STATE_READY)
 8001d96:	e005      	b.n	8001da4 <WAV_Play+0x108>
					{
						if(WAV_GetState(wavInfo) != WAV_STATE_PLAY)
 8001d98:	6838      	ldr	r0, [r7, #0]
 8001d9a:	f7ff ff71 	bl	8001c80 <WAV_GetState>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d126      	bne.n	8001df2 <WAV_Play+0x156>
					while(HAL_DAC_GetState(&hdac1) != HAL_DAC_STATE_READY)
 8001da4:	4822      	ldr	r0, [pc, #136]	; (8001e30 <WAV_Play+0x194>)
 8001da6:	f001 fc1e 	bl	80035e6 <HAL_DAC_GetState>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d1f3      	bne.n	8001d98 <WAV_Play+0xfc>
							goto end;
					}
					f_size -= bufSize;
 8001db0:	4b1c      	ldr	r3, [pc, #112]	; (8001e24 <WAV_Play+0x188>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a1d      	ldr	r2, [pc, #116]	; (8001e2c <WAV_Play+0x190>)
 8001db6:	8812      	ldrh	r2, [r2, #0]
 8001db8:	1a9b      	subs	r3, r3, r2
 8001dba:	4a1a      	ldr	r2, [pc, #104]	; (8001e24 <WAV_Play+0x188>)
 8001dbc:	6013      	str	r3, [r2, #0]
					wavInfo->filePtr += bufSize;
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	f8d3 37d8 	ldr.w	r3, [r3, #2008]	; 0x7d8
 8001dc4:	4a19      	ldr	r2, [pc, #100]	; (8001e2c <WAV_Play+0x190>)
 8001dc6:	8812      	ldrh	r2, [r2, #0]
 8001dc8:	441a      	add	r2, r3
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	f8c3 27d8 	str.w	r2, [r3, #2008]	; 0x7d8
				while(f_size > 0)
 8001dd0:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <WAV_Play+0x188>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1b5      	bne.n	8001d44 <WAV_Play+0xa8>
 8001dd8:	e000      	b.n	8001ddc <WAV_Play+0x140>
				}
			}
			else __NOP();
 8001dda:	bf00      	nop
		}
	}
	wavInfo->filePtr = 0;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f8c3 27d8 	str.w	r2, [r3, #2008]	; 0x7d8
	f_lseek(&fil, 0);
 8001de4:	2100      	movs	r1, #0
 8001de6:	480c      	ldr	r0, [pc, #48]	; (8001e18 <WAV_Play+0x17c>)
 8001de8:	f009 fe15 	bl	800ba16 <f_lseek>
 8001dec:	e002      	b.n	8001df4 <WAV_Play+0x158>
		goto end;
 8001dee:	bf00      	nop
 8001df0:	e000      	b.n	8001df4 <WAV_Play+0x158>
							goto end;
 8001df2:	bf00      	nop

	end:
	f_close(&fil);
 8001df4:	4808      	ldr	r0, [pc, #32]	; (8001e18 <WAV_Play+0x17c>)
 8001df6:	f009 fde3 	bl	800b9c0 <f_close>
	HAL_TIM_Base_Stop(&htim6);
 8001dfa:	480b      	ldr	r0, [pc, #44]	; (8001e28 <WAV_Play+0x18c>)
 8001dfc:	f005 f8b0 	bl	8006f60 <HAL_TIM_Base_Stop>
	HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001e00:	2100      	movs	r1, #0
 8001e02:	480b      	ldr	r0, [pc, #44]	; (8001e30 <WAV_Play+0x194>)
 8001e04:	f001 fb9e 	bl	8003544 <HAL_DAC_Stop_DMA>
	return wavInfo->state;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	f893 37e0 	ldrb.w	r3, [r3, #2016]	; 0x7e0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3738      	adds	r7, #56	; 0x38
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20003030 	.word	0x20003030
 8001e1c:	2000405c 	.word	0x2000405c
 8001e20:	20004060 	.word	0x20004060
 8001e24:	20004064 	.word	0x20004064
 8001e28:	2000021c 	.word	0x2000021c
 8001e2c:	20004068 	.word	0x20004068
 8001e30:	20000140 	.word	0x20000140

08001e34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e6c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e38:	480d      	ldr	r0, [pc, #52]	; (8001e70 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e3a:	490e      	ldr	r1, [pc, #56]	; (8001e74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e3c:	4a0e      	ldr	r2, [pc, #56]	; (8001e78 <LoopForever+0xe>)
  movs r3, #0
 8001e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e40:	e002      	b.n	8001e48 <LoopCopyDataInit>

08001e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e46:	3304      	adds	r3, #4

08001e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e4c:	d3f9      	bcc.n	8001e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e4e:	4a0b      	ldr	r2, [pc, #44]	; (8001e7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e50:	4c0b      	ldr	r4, [pc, #44]	; (8001e80 <LoopForever+0x16>)
  movs r3, #0
 8001e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e54:	e001      	b.n	8001e5a <LoopFillZerobss>

08001e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e58:	3204      	adds	r2, #4

08001e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e5c:	d3fb      	bcc.n	8001e56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e5e:	f7ff fea7 	bl	8001bb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e62:	f00a fa0b 	bl	800c27c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e66:	f7fe ff15 	bl	8000c94 <main>

08001e6a <LoopForever>:

LoopForever:
    b LoopForever
 8001e6a:	e7fe      	b.n	8001e6a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e6c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e74:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001e78:	0800d75c 	.word	0x0800d75c
  ldr r2, =_sbss
 8001e7c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001e80:	200042b4 	.word	0x200042b4

08001e84 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e84:	e7fe      	b.n	8001e84 <ADC3_IRQHandler>
	...

08001e88 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e8c:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <HAL_Init+0x28>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a07      	ldr	r2, [pc, #28]	; (8001eb0 <HAL_Init+0x28>)
 8001e92:	f043 0310 	orr.w	r3, r3, #16
 8001e96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e98:	2003      	movs	r0, #3
 8001e9a:	f001 fae3 	bl	8003464 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e9e:	200f      	movs	r0, #15
 8001ea0:	f000 f808 	bl	8001eb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ea4:	f7ff fb6c 	bl	8001580 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40022000 	.word	0x40022000

08001eb4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ebc:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <HAL_InitTick+0x54>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <HAL_InitTick+0x58>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f001 fafb 	bl	80034ce <HAL_SYSTICK_Config>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e00e      	b.n	8001f00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b0f      	cmp	r3, #15
 8001ee6:	d80a      	bhi.n	8001efe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef0:	f001 fac3 	bl	800347a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ef4:	4a06      	ldr	r2, [pc, #24]	; (8001f10 <HAL_InitTick+0x5c>)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
 8001efc:	e000      	b.n	8001f00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20000004 	.word	0x20000004
 8001f0c:	2000000c 	.word	0x2000000c
 8001f10:	20000008 	.word	0x20000008

08001f14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f18:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_IncTick+0x20>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <HAL_IncTick+0x24>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4413      	add	r3, r2
 8001f24:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <HAL_IncTick+0x24>)
 8001f26:	6013      	str	r3, [r2, #0]
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	2000000c 	.word	0x2000000c
 8001f38:	2000406c 	.word	0x2000406c

08001f3c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001f40:	4b03      	ldr	r3, [pc, #12]	; (8001f50 <HAL_GetTick+0x14>)
 8001f42:	681b      	ldr	r3, [r3, #0]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	2000406c 	.word	0x2000406c

08001f54 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f5c:	f7ff ffee 	bl	8001f3c <HAL_GetTick>
 8001f60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f6c:	d005      	beq.n	8001f7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <HAL_Delay+0x44>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	461a      	mov	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4413      	add	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001f7a:	bf00      	nop
 8001f7c:	f7ff ffde 	bl	8001f3c <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d8f7      	bhi.n	8001f7c <HAL_Delay+0x28>
  {
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	bf00      	nop
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	2000000c 	.word	0x2000000c

08001f9c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b09a      	sub	sp, #104	; 0x68
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e1e3      	b.n	80023c0 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	f003 0310 	and.w	r3, r3, #16
 8002006:	2b00      	cmp	r3, #0
 8002008:	d176      	bne.n	80020f8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	2b00      	cmp	r3, #0
 8002010:	d152      	bne.n	80020b8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff facb 	bl	80015c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d13b      	bne.n	80020b8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f001 f8d9 	bl	80031f8 <ADC_Disable>
 8002046:	4603      	mov	r3, r0
 8002048:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002050:	f003 0310 	and.w	r3, r3, #16
 8002054:	2b00      	cmp	r3, #0
 8002056:	d12f      	bne.n	80020b8 <HAL_ADC_Init+0xe0>
 8002058:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800205c:	2b00      	cmp	r3, #0
 800205e:	d12b      	bne.n	80020b8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002064:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002068:	f023 0302 	bic.w	r3, r3, #2
 800206c:	f043 0202 	orr.w	r2, r3, #2
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002082:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002092:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002094:	4b92      	ldr	r3, [pc, #584]	; (80022e0 <HAL_ADC_Init+0x308>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a92      	ldr	r2, [pc, #584]	; (80022e4 <HAL_ADC_Init+0x30c>)
 800209a:	fba2 2303 	umull	r2, r3, r2, r3
 800209e:	0c9a      	lsrs	r2, r3, #18
 80020a0:	4613      	mov	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020aa:	e002      	b.n	80020b2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	3b01      	subs	r3, #1
 80020b0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1f9      	bne.n	80020ac <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d007      	beq.n	80020d6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80020d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020d4:	d110      	bne.n	80020f8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	f023 0312 	bic.w	r3, r3, #18
 80020de:	f043 0210 	orr.w	r2, r3, #16
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ea:	f043 0201 	orr.w	r2, r3, #1
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	f003 0310 	and.w	r3, r3, #16
 8002100:	2b00      	cmp	r3, #0
 8002102:	f040 8150 	bne.w	80023a6 <HAL_ADC_Init+0x3ce>
 8002106:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800210a:	2b00      	cmp	r3, #0
 800210c:	f040 814b 	bne.w	80023a6 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800211a:	2b00      	cmp	r3, #0
 800211c:	f040 8143 	bne.w	80023a6 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002124:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002128:	f043 0202 	orr.w	r2, r3, #2
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002138:	d004      	beq.n	8002144 <HAL_ADC_Init+0x16c>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a6a      	ldr	r2, [pc, #424]	; (80022e8 <HAL_ADC_Init+0x310>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d101      	bne.n	8002148 <HAL_ADC_Init+0x170>
 8002144:	4b69      	ldr	r3, [pc, #420]	; (80022ec <HAL_ADC_Init+0x314>)
 8002146:	e000      	b.n	800214a <HAL_ADC_Init+0x172>
 8002148:	4b69      	ldr	r3, [pc, #420]	; (80022f0 <HAL_ADC_Init+0x318>)
 800214a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002154:	d102      	bne.n	800215c <HAL_ADC_Init+0x184>
 8002156:	4b64      	ldr	r3, [pc, #400]	; (80022e8 <HAL_ADC_Init+0x310>)
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	e01a      	b.n	8002192 <HAL_ADC_Init+0x1ba>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a61      	ldr	r2, [pc, #388]	; (80022e8 <HAL_ADC_Init+0x310>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d103      	bne.n	800216e <HAL_ADC_Init+0x196>
 8002166:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	e011      	b.n	8002192 <HAL_ADC_Init+0x1ba>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a60      	ldr	r2, [pc, #384]	; (80022f4 <HAL_ADC_Init+0x31c>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d102      	bne.n	800217e <HAL_ADC_Init+0x1a6>
 8002178:	4b5f      	ldr	r3, [pc, #380]	; (80022f8 <HAL_ADC_Init+0x320>)
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	e009      	b.n	8002192 <HAL_ADC_Init+0x1ba>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a5d      	ldr	r2, [pc, #372]	; (80022f8 <HAL_ADC_Init+0x320>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d102      	bne.n	800218e <HAL_ADC_Init+0x1b6>
 8002188:	4b5a      	ldr	r3, [pc, #360]	; (80022f4 <HAL_ADC_Init+0x31c>)
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	e001      	b.n	8002192 <HAL_ADC_Init+0x1ba>
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 0303 	and.w	r3, r3, #3
 800219c:	2b01      	cmp	r3, #1
 800219e:	d108      	bne.n	80021b2 <HAL_ADC_Init+0x1da>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d101      	bne.n	80021b2 <HAL_ADC_Init+0x1da>
 80021ae:	2301      	movs	r3, #1
 80021b0:	e000      	b.n	80021b4 <HAL_ADC_Init+0x1dc>
 80021b2:	2300      	movs	r3, #0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d11c      	bne.n	80021f2 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80021b8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d010      	beq.n	80021e0 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d107      	bne.n	80021da <HAL_ADC_Init+0x202>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d101      	bne.n	80021da <HAL_ADC_Init+0x202>
 80021d6:	2301      	movs	r3, #1
 80021d8:	e000      	b.n	80021dc <HAL_ADC_Init+0x204>
 80021da:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d108      	bne.n	80021f2 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80021e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	431a      	orrs	r2, r3
 80021ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021f0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	7e5b      	ldrb	r3, [r3, #25]
 80021f6:	035b      	lsls	r3, r3, #13
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021fc:	2a01      	cmp	r2, #1
 80021fe:	d002      	beq.n	8002206 <HAL_ADC_Init+0x22e>
 8002200:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002204:	e000      	b.n	8002208 <HAL_ADC_Init+0x230>
 8002206:	2200      	movs	r2, #0
 8002208:	431a      	orrs	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	4313      	orrs	r3, r2
 8002216:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002218:	4313      	orrs	r3, r2
 800221a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d11b      	bne.n	800225e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	7e5b      	ldrb	r3, [r3, #25]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d109      	bne.n	8002242 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	3b01      	subs	r3, #1
 8002234:	045a      	lsls	r2, r3, #17
 8002236:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002238:	4313      	orrs	r3, r2
 800223a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800223e:	663b      	str	r3, [r7, #96]	; 0x60
 8002240:	e00d      	b.n	800225e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800224a:	f043 0220 	orr.w	r2, r3, #32
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002256:	f043 0201 	orr.w	r2, r3, #1
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002262:	2b01      	cmp	r3, #1
 8002264:	d054      	beq.n	8002310 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a22      	ldr	r2, [pc, #136]	; (80022f4 <HAL_ADC_Init+0x31c>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d004      	beq.n	800227a <HAL_ADC_Init+0x2a2>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a20      	ldr	r2, [pc, #128]	; (80022f8 <HAL_ADC_Init+0x320>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d140      	bne.n	80022fc <HAL_ADC_Init+0x324>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002282:	d02a      	beq.n	80022da <HAL_ADC_Init+0x302>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002288:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800228c:	d022      	beq.n	80022d4 <HAL_ADC_Init+0x2fc>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002292:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002296:	d01a      	beq.n	80022ce <HAL_ADC_Init+0x2f6>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229c:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 80022a0:	d012      	beq.n	80022c8 <HAL_ADC_Init+0x2f0>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a6:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80022aa:	d00a      	beq.n	80022c2 <HAL_ADC_Init+0x2ea>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b0:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80022b4:	d002      	beq.n	80022bc <HAL_ADC_Init+0x2e4>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ba:	e023      	b.n	8002304 <HAL_ADC_Init+0x32c>
 80022bc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80022c0:	e020      	b.n	8002304 <HAL_ADC_Init+0x32c>
 80022c2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80022c6:	e01d      	b.n	8002304 <HAL_ADC_Init+0x32c>
 80022c8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80022cc:	e01a      	b.n	8002304 <HAL_ADC_Init+0x32c>
 80022ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022d2:	e017      	b.n	8002304 <HAL_ADC_Init+0x32c>
 80022d4:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80022d8:	e014      	b.n	8002304 <HAL_ADC_Init+0x32c>
 80022da:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80022de:	e011      	b.n	8002304 <HAL_ADC_Init+0x32c>
 80022e0:	20000004 	.word	0x20000004
 80022e4:	431bde83 	.word	0x431bde83
 80022e8:	50000100 	.word	0x50000100
 80022ec:	50000300 	.word	0x50000300
 80022f0:	50000700 	.word	0x50000700
 80022f4:	50000400 	.word	0x50000400
 80022f8:	50000500 	.word	0x50000500
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002300:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002308:	4313      	orrs	r3, r2
 800230a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800230c:	4313      	orrs	r3, r2
 800230e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 030c 	and.w	r3, r3, #12
 800231a:	2b00      	cmp	r3, #0
 800231c:	d114      	bne.n	8002348 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6812      	ldr	r2, [r2, #0]
 8002328:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800232c:	f023 0302 	bic.w	r3, r3, #2
 8002330:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	7e1b      	ldrb	r3, [r3, #24]
 8002336:	039a      	lsls	r2, r3, #14
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	4313      	orrs	r3, r2
 8002342:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002344:	4313      	orrs	r3, r2
 8002346:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	4b1e      	ldr	r3, [pc, #120]	; (80023c8 <HAL_ADC_Init+0x3f0>)
 8002350:	4013      	ands	r3, r2
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6812      	ldr	r2, [r2, #0]
 8002356:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002358:	430b      	orrs	r3, r1
 800235a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d10c      	bne.n	800237e <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	f023 010f 	bic.w	r1, r3, #15
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	1e5a      	subs	r2, r3, #1
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	430a      	orrs	r2, r1
 800237a:	631a      	str	r2, [r3, #48]	; 0x30
 800237c:	e007      	b.n	800238e <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 020f 	bic.w	r2, r2, #15
 800238c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002398:	f023 0303 	bic.w	r3, r3, #3
 800239c:	f043 0201 	orr.w	r2, r3, #1
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	641a      	str	r2, [r3, #64]	; 0x40
 80023a4:	e00a      	b.n	80023bc <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	f023 0312 	bic.w	r3, r3, #18
 80023ae:	f043 0210 	orr.w	r2, r3, #16
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80023b6:	2301      	movs	r3, #1
 80023b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80023bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3768      	adds	r7, #104	; 0x68
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	fff0c007 	.word	0xfff0c007

080023cc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80023d8:	2300      	movs	r3, #0
 80023da:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80023dc:	2300      	movs	r3, #0
 80023de:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0304 	and.w	r3, r3, #4
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d106      	bne.n	80023fc <HAL_ADC_IRQHandler+0x30>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	2b04      	cmp	r3, #4
 80023fa:	d00f      	beq.n	800241c <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002406:	2b08      	cmp	r3, #8
 8002408:	f040 80c0 	bne.w	800258c <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	2b08      	cmp	r3, #8
 8002418:	f040 80b8 	bne.w	800258c <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002420:	f003 0310 	and.w	r3, r3, #16
 8002424:	2b00      	cmp	r3, #0
 8002426:	d105      	bne.n	8002434 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800243c:	d004      	beq.n	8002448 <HAL_ADC_IRQHandler+0x7c>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a8e      	ldr	r2, [pc, #568]	; (800267c <HAL_ADC_IRQHandler+0x2b0>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d106      	bne.n	8002456 <HAL_ADC_IRQHandler+0x8a>
 8002448:	4b8d      	ldr	r3, [pc, #564]	; (8002680 <HAL_ADC_IRQHandler+0x2b4>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 031f 	and.w	r3, r3, #31
 8002450:	2b00      	cmp	r3, #0
 8002452:	d03e      	beq.n	80024d2 <HAL_ADC_IRQHandler+0x106>
 8002454:	e005      	b.n	8002462 <HAL_ADC_IRQHandler+0x96>
 8002456:	4b8b      	ldr	r3, [pc, #556]	; (8002684 <HAL_ADC_IRQHandler+0x2b8>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 031f 	and.w	r3, r3, #31
 800245e:	2b00      	cmp	r3, #0
 8002460:	d037      	beq.n	80024d2 <HAL_ADC_IRQHandler+0x106>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800246a:	d004      	beq.n	8002476 <HAL_ADC_IRQHandler+0xaa>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a82      	ldr	r2, [pc, #520]	; (800267c <HAL_ADC_IRQHandler+0x2b0>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d106      	bne.n	8002484 <HAL_ADC_IRQHandler+0xb8>
 8002476:	4b82      	ldr	r3, [pc, #520]	; (8002680 <HAL_ADC_IRQHandler+0x2b4>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 031f 	and.w	r3, r3, #31
 800247e:	2b05      	cmp	r3, #5
 8002480:	d027      	beq.n	80024d2 <HAL_ADC_IRQHandler+0x106>
 8002482:	e005      	b.n	8002490 <HAL_ADC_IRQHandler+0xc4>
 8002484:	4b7f      	ldr	r3, [pc, #508]	; (8002684 <HAL_ADC_IRQHandler+0x2b8>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 031f 	and.w	r3, r3, #31
 800248c:	2b05      	cmp	r3, #5
 800248e:	d020      	beq.n	80024d2 <HAL_ADC_IRQHandler+0x106>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002498:	d004      	beq.n	80024a4 <HAL_ADC_IRQHandler+0xd8>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a77      	ldr	r2, [pc, #476]	; (800267c <HAL_ADC_IRQHandler+0x2b0>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d106      	bne.n	80024b2 <HAL_ADC_IRQHandler+0xe6>
 80024a4:	4b76      	ldr	r3, [pc, #472]	; (8002680 <HAL_ADC_IRQHandler+0x2b4>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 031f 	and.w	r3, r3, #31
 80024ac:	2b09      	cmp	r3, #9
 80024ae:	d010      	beq.n	80024d2 <HAL_ADC_IRQHandler+0x106>
 80024b0:	e005      	b.n	80024be <HAL_ADC_IRQHandler+0xf2>
 80024b2:	4b74      	ldr	r3, [pc, #464]	; (8002684 <HAL_ADC_IRQHandler+0x2b8>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 031f 	and.w	r3, r3, #31
 80024ba:	2b09      	cmp	r3, #9
 80024bc:	d009      	beq.n	80024d2 <HAL_ADC_IRQHandler+0x106>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024c6:	d004      	beq.n	80024d2 <HAL_ADC_IRQHandler+0x106>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a6e      	ldr	r2, [pc, #440]	; (8002688 <HAL_ADC_IRQHandler+0x2bc>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d104      	bne.n	80024dc <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	613b      	str	r3, [r7, #16]
 80024da:	e00f      	b.n	80024fc <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024e4:	d004      	beq.n	80024f0 <HAL_ADC_IRQHandler+0x124>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a64      	ldr	r2, [pc, #400]	; (800267c <HAL_ADC_IRQHandler+0x2b0>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d102      	bne.n	80024f6 <HAL_ADC_IRQHandler+0x12a>
 80024f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80024f4:	e000      	b.n	80024f8 <HAL_ADC_IRQHandler+0x12c>
 80024f6:	4b64      	ldr	r3, [pc, #400]	; (8002688 <HAL_ADC_IRQHandler+0x2bc>)
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002506:	2b00      	cmp	r3, #0
 8002508:	d139      	bne.n	800257e <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002510:	2b00      	cmp	r3, #0
 8002512:	d134      	bne.n	800257e <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b08      	cmp	r3, #8
 8002520:	d12d      	bne.n	800257e <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	2b00      	cmp	r3, #0
 800252e:	d11a      	bne.n	8002566 <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 020c 	bic.w	r2, r2, #12
 800253e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002544:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002550:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d112      	bne.n	800257e <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	f043 0201 	orr.w	r2, r3, #1
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	641a      	str	r2, [r3, #64]	; 0x40
 8002564:	e00b      	b.n	800257e <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	f043 0210 	orr.w	r2, r3, #16
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002576:	f043 0201 	orr.w	r2, r3, #1
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff fd0c 	bl	8001f9c <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	220c      	movs	r2, #12
 800258a:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0320 	and.w	r3, r3, #32
 8002596:	2b20      	cmp	r3, #32
 8002598:	d106      	bne.n	80025a8 <HAL_ADC_IRQHandler+0x1dc>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 0320 	and.w	r3, r3, #32
 80025a4:	2b20      	cmp	r3, #32
 80025a6:	d00f      	beq.n	80025c8 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80025b2:	2b40      	cmp	r3, #64	; 0x40
 80025b4:	f040 8143 	bne.w	800283e <HAL_ADC_IRQHandler+0x472>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c2:	2b40      	cmp	r3, #64	; 0x40
 80025c4:	f040 813b 	bne.w	800283e <HAL_ADC_IRQHandler+0x472>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025cc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025dc:	d004      	beq.n	80025e8 <HAL_ADC_IRQHandler+0x21c>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a26      	ldr	r2, [pc, #152]	; (800267c <HAL_ADC_IRQHandler+0x2b0>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d106      	bne.n	80025f6 <HAL_ADC_IRQHandler+0x22a>
 80025e8:	4b25      	ldr	r3, [pc, #148]	; (8002680 <HAL_ADC_IRQHandler+0x2b4>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f003 031f 	and.w	r3, r3, #31
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d03e      	beq.n	8002672 <HAL_ADC_IRQHandler+0x2a6>
 80025f4:	e005      	b.n	8002602 <HAL_ADC_IRQHandler+0x236>
 80025f6:	4b23      	ldr	r3, [pc, #140]	; (8002684 <HAL_ADC_IRQHandler+0x2b8>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 031f 	and.w	r3, r3, #31
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d037      	beq.n	8002672 <HAL_ADC_IRQHandler+0x2a6>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800260a:	d004      	beq.n	8002616 <HAL_ADC_IRQHandler+0x24a>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a1a      	ldr	r2, [pc, #104]	; (800267c <HAL_ADC_IRQHandler+0x2b0>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d106      	bne.n	8002624 <HAL_ADC_IRQHandler+0x258>
 8002616:	4b1a      	ldr	r3, [pc, #104]	; (8002680 <HAL_ADC_IRQHandler+0x2b4>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 031f 	and.w	r3, r3, #31
 800261e:	2b05      	cmp	r3, #5
 8002620:	d027      	beq.n	8002672 <HAL_ADC_IRQHandler+0x2a6>
 8002622:	e005      	b.n	8002630 <HAL_ADC_IRQHandler+0x264>
 8002624:	4b17      	ldr	r3, [pc, #92]	; (8002684 <HAL_ADC_IRQHandler+0x2b8>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 031f 	and.w	r3, r3, #31
 800262c:	2b05      	cmp	r3, #5
 800262e:	d020      	beq.n	8002672 <HAL_ADC_IRQHandler+0x2a6>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002638:	d004      	beq.n	8002644 <HAL_ADC_IRQHandler+0x278>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a0f      	ldr	r2, [pc, #60]	; (800267c <HAL_ADC_IRQHandler+0x2b0>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d106      	bne.n	8002652 <HAL_ADC_IRQHandler+0x286>
 8002644:	4b0e      	ldr	r3, [pc, #56]	; (8002680 <HAL_ADC_IRQHandler+0x2b4>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f003 031f 	and.w	r3, r3, #31
 800264c:	2b09      	cmp	r3, #9
 800264e:	d010      	beq.n	8002672 <HAL_ADC_IRQHandler+0x2a6>
 8002650:	e005      	b.n	800265e <HAL_ADC_IRQHandler+0x292>
 8002652:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <HAL_ADC_IRQHandler+0x2b8>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 031f 	and.w	r3, r3, #31
 800265a:	2b09      	cmp	r3, #9
 800265c:	d009      	beq.n	8002672 <HAL_ADC_IRQHandler+0x2a6>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002666:	d004      	beq.n	8002672 <HAL_ADC_IRQHandler+0x2a6>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a06      	ldr	r2, [pc, #24]	; (8002688 <HAL_ADC_IRQHandler+0x2bc>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d10c      	bne.n	800268c <HAL_ADC_IRQHandler+0x2c0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	613b      	str	r3, [r7, #16]
 800267a:	e017      	b.n	80026ac <HAL_ADC_IRQHandler+0x2e0>
 800267c:	50000100 	.word	0x50000100
 8002680:	50000300 	.word	0x50000300
 8002684:	50000700 	.word	0x50000700
 8002688:	50000400 	.word	0x50000400
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002694:	d004      	beq.n	80026a0 <HAL_ADC_IRQHandler+0x2d4>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a5b      	ldr	r2, [pc, #364]	; (8002808 <HAL_ADC_IRQHandler+0x43c>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d102      	bne.n	80026a6 <HAL_ADC_IRQHandler+0x2da>
 80026a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026a4:	e000      	b.n	80026a8 <HAL_ADC_IRQHandler+0x2dc>
 80026a6:	4b59      	ldr	r3, [pc, #356]	; (800280c <HAL_ADC_IRQHandler+0x440>)
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f040 80ba 	bne.w	8002830 <HAL_ADC_IRQHandler+0x464>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00d      	beq.n	80026e2 <HAL_ADC_IRQHandler+0x316>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f040 80ad 	bne.w	8002830 <HAL_ADC_IRQHandler+0x464>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f040 80a7 	bne.w	8002830 <HAL_ADC_IRQHandler+0x464>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ec:	2b40      	cmp	r3, #64	; 0x40
 80026ee:	f040 809f 	bne.w	8002830 <HAL_ADC_IRQHandler+0x464>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026fa:	d004      	beq.n	8002706 <HAL_ADC_IRQHandler+0x33a>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a41      	ldr	r2, [pc, #260]	; (8002808 <HAL_ADC_IRQHandler+0x43c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d106      	bne.n	8002714 <HAL_ADC_IRQHandler+0x348>
 8002706:	4b42      	ldr	r3, [pc, #264]	; (8002810 <HAL_ADC_IRQHandler+0x444>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 031f 	and.w	r3, r3, #31
 800270e:	2b00      	cmp	r3, #0
 8002710:	d03e      	beq.n	8002790 <HAL_ADC_IRQHandler+0x3c4>
 8002712:	e005      	b.n	8002720 <HAL_ADC_IRQHandler+0x354>
 8002714:	4b3f      	ldr	r3, [pc, #252]	; (8002814 <HAL_ADC_IRQHandler+0x448>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 031f 	and.w	r3, r3, #31
 800271c:	2b00      	cmp	r3, #0
 800271e:	d037      	beq.n	8002790 <HAL_ADC_IRQHandler+0x3c4>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002728:	d004      	beq.n	8002734 <HAL_ADC_IRQHandler+0x368>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a36      	ldr	r2, [pc, #216]	; (8002808 <HAL_ADC_IRQHandler+0x43c>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d106      	bne.n	8002742 <HAL_ADC_IRQHandler+0x376>
 8002734:	4b36      	ldr	r3, [pc, #216]	; (8002810 <HAL_ADC_IRQHandler+0x444>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f003 031f 	and.w	r3, r3, #31
 800273c:	2b06      	cmp	r3, #6
 800273e:	d027      	beq.n	8002790 <HAL_ADC_IRQHandler+0x3c4>
 8002740:	e005      	b.n	800274e <HAL_ADC_IRQHandler+0x382>
 8002742:	4b34      	ldr	r3, [pc, #208]	; (8002814 <HAL_ADC_IRQHandler+0x448>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 031f 	and.w	r3, r3, #31
 800274a:	2b06      	cmp	r3, #6
 800274c:	d020      	beq.n	8002790 <HAL_ADC_IRQHandler+0x3c4>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002756:	d004      	beq.n	8002762 <HAL_ADC_IRQHandler+0x396>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a2a      	ldr	r2, [pc, #168]	; (8002808 <HAL_ADC_IRQHandler+0x43c>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d106      	bne.n	8002770 <HAL_ADC_IRQHandler+0x3a4>
 8002762:	4b2b      	ldr	r3, [pc, #172]	; (8002810 <HAL_ADC_IRQHandler+0x444>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 031f 	and.w	r3, r3, #31
 800276a:	2b07      	cmp	r3, #7
 800276c:	d010      	beq.n	8002790 <HAL_ADC_IRQHandler+0x3c4>
 800276e:	e005      	b.n	800277c <HAL_ADC_IRQHandler+0x3b0>
 8002770:	4b28      	ldr	r3, [pc, #160]	; (8002814 <HAL_ADC_IRQHandler+0x448>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 031f 	and.w	r3, r3, #31
 8002778:	2b07      	cmp	r3, #7
 800277a:	d009      	beq.n	8002790 <HAL_ADC_IRQHandler+0x3c4>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002784:	d004      	beq.n	8002790 <HAL_ADC_IRQHandler+0x3c4>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a20      	ldr	r2, [pc, #128]	; (800280c <HAL_ADC_IRQHandler+0x440>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d104      	bne.n	800279a <HAL_ADC_IRQHandler+0x3ce>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	e00f      	b.n	80027ba <HAL_ADC_IRQHandler+0x3ee>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027a2:	d004      	beq.n	80027ae <HAL_ADC_IRQHandler+0x3e2>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a17      	ldr	r2, [pc, #92]	; (8002808 <HAL_ADC_IRQHandler+0x43c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d102      	bne.n	80027b4 <HAL_ADC_IRQHandler+0x3e8>
 80027ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80027b2:	e000      	b.n	80027b6 <HAL_ADC_IRQHandler+0x3ea>
 80027b4:	4b15      	ldr	r3, [pc, #84]	; (800280c <HAL_ADC_IRQHandler+0x440>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d135      	bne.n	8002830 <HAL_ADC_IRQHandler+0x464>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d122      	bne.n	8002818 <HAL_ADC_IRQHandler+0x44c>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80027e0:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d11a      	bne.n	8002830 <HAL_ADC_IRQHandler+0x464>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f043 0201 	orr.w	r2, r3, #1
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	641a      	str	r2, [r3, #64]	; 0x40
 8002806:	e013      	b.n	8002830 <HAL_ADC_IRQHandler+0x464>
 8002808:	50000100 	.word	0x50000100
 800280c:	50000400 	.word	0x50000400
 8002810:	50000300 	.word	0x50000300
 8002814:	50000700 	.word	0x50000700
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	f043 0210 	orr.w	r2, r3, #16
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002828:	f043 0201 	orr.w	r2, r3, #1
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 f8db 	bl	80029ec <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2260      	movs	r2, #96	; 0x60
 800283c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002848:	2b80      	cmp	r3, #128	; 0x80
 800284a:	d113      	bne.n	8002874 <HAL_ADC_IRQHandler+0x4a8>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002856:	2b80      	cmp	r3, #128	; 0x80
 8002858:	d10c      	bne.n	8002874 <HAL_ADC_IRQHandler+0x4a8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7ff fba2 	bl	8001fb0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2280      	movs	r2, #128	; 0x80
 8002872:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002882:	d115      	bne.n	80028b0 <HAL_ADC_IRQHandler+0x4e4>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002892:	d10d      	bne.n	80028b0 <HAL_ADC_IRQHandler+0x4e4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f8b7 	bl	8002a14 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028ae:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028be:	d115      	bne.n	80028ec <HAL_ADC_IRQHandler+0x520>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028ce:	d10d      	bne.n	80028ec <HAL_ADC_IRQHandler+0x520>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f8a3 	bl	8002a28 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028ea:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0310 	and.w	r3, r3, #16
 80028f6:	2b10      	cmp	r3, #16
 80028f8:	d149      	bne.n	800298e <HAL_ADC_IRQHandler+0x5c2>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 0310 	and.w	r3, r3, #16
 8002904:	2b10      	cmp	r3, #16
 8002906:	d142      	bne.n	800298e <HAL_ADC_IRQHandler+0x5c2>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800290c:	2b01      	cmp	r3, #1
 800290e:	d102      	bne.n	8002916 <HAL_ADC_IRQHandler+0x54a>
    {
      overrun_error = 1U;
 8002910:	2301      	movs	r3, #1
 8002912:	617b      	str	r3, [r7, #20]
 8002914:	e025      	b.n	8002962 <HAL_ADC_IRQHandler+0x596>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800291e:	d004      	beq.n	800292a <HAL_ADC_IRQHandler+0x55e>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a2e      	ldr	r2, [pc, #184]	; (80029e0 <HAL_ADC_IRQHandler+0x614>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d101      	bne.n	800292e <HAL_ADC_IRQHandler+0x562>
 800292a:	4b2e      	ldr	r3, [pc, #184]	; (80029e4 <HAL_ADC_IRQHandler+0x618>)
 800292c:	e000      	b.n	8002930 <HAL_ADC_IRQHandler+0x564>
 800292e:	4b2e      	ldr	r3, [pc, #184]	; (80029e8 <HAL_ADC_IRQHandler+0x61c>)
 8002930:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 031f 	and.w	r3, r3, #31
 800293a:	2b00      	cmp	r3, #0
 800293c:	d109      	bne.n	8002952 <HAL_ADC_IRQHandler+0x586>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b01      	cmp	r3, #1
 800294a:	d10a      	bne.n	8002962 <HAL_ADC_IRQHandler+0x596>
        {
          overrun_error = 1U;  
 800294c:	2301      	movs	r3, #1
 800294e:	617b      	str	r3, [r7, #20]
 8002950:	e007      	b.n	8002962 <HAL_ADC_IRQHandler+0x596>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <HAL_ADC_IRQHandler+0x596>
        {
          overrun_error = 1U;  
 800295e:	2301      	movs	r3, #1
 8002960:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d10e      	bne.n	8002986 <HAL_ADC_IRQHandler+0x5ba>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002978:	f043 0202 	orr.w	r2, r3, #2
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f7ff fb1f 	bl	8001fc4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2210      	movs	r2, #16
 800298c:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800299c:	d11b      	bne.n	80029d6 <HAL_ADC_IRQHandler+0x60a>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ac:	d113      	bne.n	80029d6 <HAL_ADC_IRQHandler+0x60a>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029be:	f043 0208 	orr.w	r2, r3, #8
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029ce:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 f815 	bl	8002a00 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 80029d6:	bf00      	nop
 80029d8:	3718      	adds	r7, #24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	50000100 	.word	0x50000100
 80029e4:	50000300 	.word	0x50000300
 80029e8:	50000700 	.word	0x50000700

080029ec <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b09b      	sub	sp, #108	; 0x6c
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a46:	2300      	movs	r3, #0
 8002a48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d101      	bne.n	8002a5e <HAL_ADC_ConfigChannel+0x22>
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	e2ca      	b.n	8002ff4 <HAL_ADC_ConfigChannel+0x5b8>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f040 82ae 	bne.w	8002fd2 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d81c      	bhi.n	8002ab8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	4413      	add	r3, r2
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	461a      	mov	r2, r3
 8002a92:	231f      	movs	r3, #31
 8002a94:	4093      	lsls	r3, r2
 8002a96:	43db      	mvns	r3, r3
 8002a98:	4019      	ands	r1, r3
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	6818      	ldr	r0, [r3, #0]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	4413      	add	r3, r2
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	fa00 f203 	lsl.w	r2, r0, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	631a      	str	r2, [r3, #48]	; 0x30
 8002ab6:	e063      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	2b09      	cmp	r3, #9
 8002abe:	d81e      	bhi.n	8002afe <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	4413      	add	r3, r2
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	3b1e      	subs	r3, #30
 8002ad4:	221f      	movs	r2, #31
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	43db      	mvns	r3, r3
 8002adc:	4019      	ands	r1, r3
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	6818      	ldr	r0, [r3, #0]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685a      	ldr	r2, [r3, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	4413      	add	r3, r2
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	3b1e      	subs	r3, #30
 8002af0:	fa00 f203 	lsl.w	r2, r0, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	635a      	str	r2, [r3, #52]	; 0x34
 8002afc:	e040      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b0e      	cmp	r3, #14
 8002b04:	d81e      	bhi.n	8002b44 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	4413      	add	r3, r2
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	3b3c      	subs	r3, #60	; 0x3c
 8002b1a:	221f      	movs	r2, #31
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	4019      	ands	r1, r3
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	6818      	ldr	r0, [r3, #0]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	4413      	add	r3, r2
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	3b3c      	subs	r3, #60	; 0x3c
 8002b36:	fa00 f203 	lsl.w	r2, r0, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	639a      	str	r2, [r3, #56]	; 0x38
 8002b42:	e01d      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	4413      	add	r3, r2
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	3b5a      	subs	r3, #90	; 0x5a
 8002b58:	221f      	movs	r2, #31
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	4019      	ands	r1, r3
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	6818      	ldr	r0, [r3, #0]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	4413      	add	r3, r2
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	3b5a      	subs	r3, #90	; 0x5a
 8002b74:	fa00 f203 	lsl.w	r2, r0, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 030c 	and.w	r3, r3, #12
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f040 80e5 	bne.w	8002d5a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2b09      	cmp	r3, #9
 8002b96:	d91c      	bls.n	8002bd2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6999      	ldr	r1, [r3, #24]
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3b1e      	subs	r3, #30
 8002baa:	2207      	movs	r2, #7
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	4019      	ands	r1, r3
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	6898      	ldr	r0, [r3, #8]
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3b1e      	subs	r3, #30
 8002bc4:	fa00 f203 	lsl.w	r2, r0, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	619a      	str	r2, [r3, #24]
 8002bd0:	e019      	b.n	8002c06 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	6959      	ldr	r1, [r3, #20]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	4413      	add	r3, r2
 8002be2:	2207      	movs	r2, #7
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	43db      	mvns	r3, r3
 8002bea:	4019      	ands	r1, r3
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	6898      	ldr	r0, [r3, #8]
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	4413      	add	r3, r2
 8002bfa:	fa00 f203 	lsl.w	r2, r0, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	695a      	ldr	r2, [r3, #20]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	08db      	lsrs	r3, r3, #3
 8002c12:	f003 0303 	and.w	r3, r3, #3
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	2b03      	cmp	r3, #3
 8002c26:	d84f      	bhi.n	8002cc8 <HAL_ADC_ConfigChannel+0x28c>
 8002c28:	a201      	add	r2, pc, #4	; (adr r2, 8002c30 <HAL_ADC_ConfigChannel+0x1f4>)
 8002c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2e:	bf00      	nop
 8002c30:	08002c41 	.word	0x08002c41
 8002c34:	08002c63 	.word	0x08002c63
 8002c38:	08002c85 	.word	0x08002c85
 8002c3c:	08002ca7 	.word	0x08002ca7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c46:	4b9a      	ldr	r3, [pc, #616]	; (8002eb0 <HAL_ADC_ConfigChannel+0x474>)
 8002c48:	4013      	ands	r3, r2
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	6812      	ldr	r2, [r2, #0]
 8002c4e:	0691      	lsls	r1, r2, #26
 8002c50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c52:	430a      	orrs	r2, r1
 8002c54:	431a      	orrs	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002c5e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002c60:	e07e      	b.n	8002d60 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002c68:	4b91      	ldr	r3, [pc, #580]	; (8002eb0 <HAL_ADC_ConfigChannel+0x474>)
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	6812      	ldr	r2, [r2, #0]
 8002c70:	0691      	lsls	r1, r2, #26
 8002c72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c74:	430a      	orrs	r2, r1
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002c80:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002c82:	e06d      	b.n	8002d60 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002c8a:	4b89      	ldr	r3, [pc, #548]	; (8002eb0 <HAL_ADC_ConfigChannel+0x474>)
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	6812      	ldr	r2, [r2, #0]
 8002c92:	0691      	lsls	r1, r2, #26
 8002c94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c96:	430a      	orrs	r2, r1
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002ca2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002ca4:	e05c      	b.n	8002d60 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002cac:	4b80      	ldr	r3, [pc, #512]	; (8002eb0 <HAL_ADC_ConfigChannel+0x474>)
 8002cae:	4013      	ands	r3, r2
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	6812      	ldr	r2, [r2, #0]
 8002cb4:	0691      	lsls	r1, r2, #26
 8002cb6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002cc4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002cc6:	e04b      	b.n	8002d60 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	069b      	lsls	r3, r3, #26
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d107      	bne.n	8002cec <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002cea:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cf2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	069b      	lsls	r3, r3, #26
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d107      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d0e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	069b      	lsls	r3, r3, #26
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d107      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d32:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	069b      	lsls	r3, r3, #26
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d10a      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d56:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002d58:	e001      	b.n	8002d5e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002d5a:	bf00      	nop
 8002d5c:	e000      	b.n	8002d60 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002d5e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d108      	bne.n	8002d80 <HAL_ADC_ConfigChannel+0x344>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d101      	bne.n	8002d80 <HAL_ADC_ConfigChannel+0x344>
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e000      	b.n	8002d82 <HAL_ADC_ConfigChannel+0x346>
 8002d80:	2300      	movs	r3, #0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f040 8130 	bne.w	8002fe8 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d00f      	beq.n	8002db0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	43da      	mvns	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	400a      	ands	r2, r1
 8002daa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002dae:	e049      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	409a      	lsls	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2b09      	cmp	r3, #9
 8002dd0:	d91c      	bls.n	8002e0c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6999      	ldr	r1, [r3, #24]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	4413      	add	r3, r2
 8002de2:	3b1b      	subs	r3, #27
 8002de4:	2207      	movs	r2, #7
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	43db      	mvns	r3, r3
 8002dec:	4019      	ands	r1, r3
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	6898      	ldr	r0, [r3, #8]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	4613      	mov	r3, r2
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	4413      	add	r3, r2
 8002dfc:	3b1b      	subs	r3, #27
 8002dfe:	fa00 f203 	lsl.w	r2, r0, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	619a      	str	r2, [r3, #24]
 8002e0a:	e01b      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6959      	ldr	r1, [r3, #20]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	1c5a      	adds	r2, r3, #1
 8002e18:	4613      	mov	r3, r2
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	4413      	add	r3, r2
 8002e1e:	2207      	movs	r2, #7
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	43db      	mvns	r3, r3
 8002e26:	4019      	ands	r1, r3
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	6898      	ldr	r0, [r3, #8]
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	1c5a      	adds	r2, r3, #1
 8002e32:	4613      	mov	r3, r2
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	4413      	add	r3, r2
 8002e38:	fa00 f203 	lsl.w	r2, r0, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e4c:	d004      	beq.n	8002e58 <HAL_ADC_ConfigChannel+0x41c>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a18      	ldr	r2, [pc, #96]	; (8002eb4 <HAL_ADC_ConfigChannel+0x478>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d101      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x420>
 8002e58:	4b17      	ldr	r3, [pc, #92]	; (8002eb8 <HAL_ADC_ConfigChannel+0x47c>)
 8002e5a:	e000      	b.n	8002e5e <HAL_ADC_ConfigChannel+0x422>
 8002e5c:	4b17      	ldr	r3, [pc, #92]	; (8002ebc <HAL_ADC_ConfigChannel+0x480>)
 8002e5e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b10      	cmp	r3, #16
 8002e66:	d105      	bne.n	8002e74 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002e68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d015      	beq.n	8002ea0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002e78:	2b11      	cmp	r3, #17
 8002e7a:	d105      	bne.n	8002e88 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002e7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00b      	beq.n	8002ea0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002e8c:	2b12      	cmp	r3, #18
 8002e8e:	f040 80ab 	bne.w	8002fe8 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002e92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f040 80a4 	bne.w	8002fe8 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ea8:	d10a      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x484>
 8002eaa:	4b02      	ldr	r3, [pc, #8]	; (8002eb4 <HAL_ADC_ConfigChannel+0x478>)
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	e022      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x4ba>
 8002eb0:	83fff000 	.word	0x83fff000
 8002eb4:	50000100 	.word	0x50000100
 8002eb8:	50000300 	.word	0x50000300
 8002ebc:	50000700 	.word	0x50000700
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a4e      	ldr	r2, [pc, #312]	; (8003000 <HAL_ADC_ConfigChannel+0x5c4>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d103      	bne.n	8002ed2 <HAL_ADC_ConfigChannel+0x496>
 8002eca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	e011      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x4ba>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a4b      	ldr	r2, [pc, #300]	; (8003004 <HAL_ADC_ConfigChannel+0x5c8>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d102      	bne.n	8002ee2 <HAL_ADC_ConfigChannel+0x4a6>
 8002edc:	4b4a      	ldr	r3, [pc, #296]	; (8003008 <HAL_ADC_ConfigChannel+0x5cc>)
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	e009      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x4ba>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a48      	ldr	r2, [pc, #288]	; (8003008 <HAL_ADC_ConfigChannel+0x5cc>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d102      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x4b6>
 8002eec:	4b45      	ldr	r3, [pc, #276]	; (8003004 <HAL_ADC_ConfigChannel+0x5c8>)
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	e001      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x4ba>
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 0303 	and.w	r3, r3, #3
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d108      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x4da>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d101      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x4da>
 8002f12:	2301      	movs	r3, #1
 8002f14:	e000      	b.n	8002f18 <HAL_ADC_ConfigChannel+0x4dc>
 8002f16:	2300      	movs	r3, #0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d150      	bne.n	8002fbe <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002f1c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d010      	beq.n	8002f44 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d107      	bne.n	8002f3e <HAL_ADC_ConfigChannel+0x502>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d101      	bne.n	8002f3e <HAL_ADC_ConfigChannel+0x502>
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e000      	b.n	8002f40 <HAL_ADC_ConfigChannel+0x504>
 8002f3e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d13c      	bne.n	8002fbe <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2b10      	cmp	r3, #16
 8002f4a:	d11d      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x54c>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f54:	d118      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002f56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f60:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f62:	4b2a      	ldr	r3, [pc, #168]	; (800300c <HAL_ADC_ConfigChannel+0x5d0>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a2a      	ldr	r2, [pc, #168]	; (8003010 <HAL_ADC_ConfigChannel+0x5d4>)
 8002f68:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6c:	0c9a      	lsrs	r2, r3, #18
 8002f6e:	4613      	mov	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f78:	e002      	b.n	8002f80 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f9      	bne.n	8002f7a <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002f86:	e02e      	b.n	8002fe6 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2b11      	cmp	r3, #17
 8002f8e:	d10b      	bne.n	8002fa8 <HAL_ADC_ConfigChannel+0x56c>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f98:	d106      	bne.n	8002fa8 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002f9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002fa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fa4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002fa6:	e01e      	b.n	8002fe6 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2b12      	cmp	r3, #18
 8002fae:	d11a      	bne.n	8002fe6 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002fb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002fb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fba:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002fbc:	e013      	b.n	8002fe6 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	f043 0220 	orr.w	r2, r3, #32
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002fd0:	e00a      	b.n	8002fe8 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	f043 0220 	orr.w	r2, r3, #32
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002fe4:	e000      	b.n	8002fe8 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002fe6:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002ff0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	376c      	adds	r7, #108	; 0x6c
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	50000100 	.word	0x50000100
 8003004:	50000400 	.word	0x50000400
 8003008:	50000500 	.word	0x50000500
 800300c:	20000004 	.word	0x20000004
 8003010:	431bde83 	.word	0x431bde83

08003014 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003014:	b480      	push	{r7}
 8003016:	b099      	sub	sp, #100	; 0x64
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800301e:	2300      	movs	r3, #0
 8003020:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800302c:	d102      	bne.n	8003034 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800302e:	4b6d      	ldr	r3, [pc, #436]	; (80031e4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003030:	60bb      	str	r3, [r7, #8]
 8003032:	e01a      	b.n	800306a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a6a      	ldr	r2, [pc, #424]	; (80031e4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d103      	bne.n	8003046 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800303e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003042:	60bb      	str	r3, [r7, #8]
 8003044:	e011      	b.n	800306a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a67      	ldr	r2, [pc, #412]	; (80031e8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d102      	bne.n	8003056 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003050:	4b66      	ldr	r3, [pc, #408]	; (80031ec <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003052:	60bb      	str	r3, [r7, #8]
 8003054:	e009      	b.n	800306a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a64      	ldr	r2, [pc, #400]	; (80031ec <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d102      	bne.n	8003066 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003060:	4b61      	ldr	r3, [pc, #388]	; (80031e8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003062:	60bb      	str	r3, [r7, #8]
 8003064:	e001      	b.n	800306a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003066:	2300      	movs	r3, #0
 8003068:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e0b0      	b.n	80031d6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800307a:	2b01      	cmp	r3, #1
 800307c:	d101      	bne.n	8003082 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800307e:	2302      	movs	r3, #2
 8003080:	e0a9      	b.n	80031d6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b00      	cmp	r3, #0
 8003096:	f040 808d 	bne.w	80031b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 0304 	and.w	r3, r3, #4
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f040 8086 	bne.w	80031b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030b0:	d004      	beq.n	80030bc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a4b      	ldr	r2, [pc, #300]	; (80031e4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d101      	bne.n	80030c0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80030bc:	4b4c      	ldr	r3, [pc, #304]	; (80031f0 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80030be:	e000      	b.n	80030c2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80030c0:	4b4c      	ldr	r3, [pc, #304]	; (80031f4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80030c2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d040      	beq.n	800314e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80030cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	6859      	ldr	r1, [r3, #4]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030de:	035b      	lsls	r3, r3, #13
 80030e0:	430b      	orrs	r3, r1
 80030e2:	431a      	orrs	r2, r3
 80030e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030e6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d108      	bne.n	8003108 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b01      	cmp	r3, #1
 8003102:	d101      	bne.n	8003108 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003104:	2301      	movs	r3, #1
 8003106:	e000      	b.n	800310a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003108:	2300      	movs	r3, #0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d15c      	bne.n	80031c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 0303 	and.w	r3, r3, #3
 8003116:	2b01      	cmp	r3, #1
 8003118:	d107      	bne.n	800312a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b01      	cmp	r3, #1
 8003124:	d101      	bne.n	800312a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003126:	2301      	movs	r3, #1
 8003128:	e000      	b.n	800312c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800312a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800312c:	2b00      	cmp	r3, #0
 800312e:	d14b      	bne.n	80031c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003130:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003138:	f023 030f 	bic.w	r3, r3, #15
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	6811      	ldr	r1, [r2, #0]
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	6892      	ldr	r2, [r2, #8]
 8003144:	430a      	orrs	r2, r1
 8003146:	431a      	orrs	r2, r3
 8003148:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800314a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800314c:	e03c      	b.n	80031c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800314e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003156:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003158:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f003 0303 	and.w	r3, r3, #3
 8003164:	2b01      	cmp	r3, #1
 8003166:	d108      	bne.n	800317a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b01      	cmp	r3, #1
 8003174:	d101      	bne.n	800317a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003176:	2301      	movs	r3, #1
 8003178:	e000      	b.n	800317c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800317a:	2300      	movs	r3, #0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d123      	bne.n	80031c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 0303 	and.w	r3, r3, #3
 8003188:	2b01      	cmp	r3, #1
 800318a:	d107      	bne.n	800319c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b01      	cmp	r3, #1
 8003196:	d101      	bne.n	800319c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 800319c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d112      	bne.n	80031c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80031a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80031aa:	f023 030f 	bic.w	r3, r3, #15
 80031ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031b0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80031b2:	e009      	b.n	80031c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	f043 0220 	orr.w	r2, r3, #32
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80031c6:	e000      	b.n	80031ca <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80031c8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80031d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80031d6:	4618      	mov	r0, r3
 80031d8:	3764      	adds	r7, #100	; 0x64
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	50000100 	.word	0x50000100
 80031e8:	50000400 	.word	0x50000400
 80031ec:	50000500 	.word	0x50000500
 80031f0:	50000300 	.word	0x50000300
 80031f4:	50000700 	.word	0x50000700

080031f8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	2b01      	cmp	r3, #1
 8003210:	d108      	bne.n	8003224 <ADC_Disable+0x2c>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b01      	cmp	r3, #1
 800321e:	d101      	bne.n	8003224 <ADC_Disable+0x2c>
 8003220:	2301      	movs	r3, #1
 8003222:	e000      	b.n	8003226 <ADC_Disable+0x2e>
 8003224:	2300      	movs	r3, #0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d047      	beq.n	80032ba <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f003 030d 	and.w	r3, r3, #13
 8003234:	2b01      	cmp	r3, #1
 8003236:	d10f      	bne.n	8003258 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689a      	ldr	r2, [r3, #8]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0202 	orr.w	r2, r2, #2
 8003246:	609a      	str	r2, [r3, #8]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2203      	movs	r2, #3
 800324e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003250:	f7fe fe74 	bl	8001f3c <HAL_GetTick>
 8003254:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003256:	e029      	b.n	80032ac <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325c:	f043 0210 	orr.w	r2, r3, #16
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003268:	f043 0201 	orr.w	r2, r3, #1
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e023      	b.n	80032bc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003274:	f7fe fe62 	bl	8001f3c <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d914      	bls.n	80032ac <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b01      	cmp	r3, #1
 800328e:	d10d      	bne.n	80032ac <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003294:	f043 0210 	orr.w	r2, r3, #16
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a0:	f043 0201 	orr.w	r2, r3, #1
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e007      	b.n	80032bc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d0dc      	beq.n	8003274 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032d4:	4b0c      	ldr	r3, [pc, #48]	; (8003308 <__NVIC_SetPriorityGrouping+0x44>)
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032e0:	4013      	ands	r3, r2
 80032e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032f6:	4a04      	ldr	r2, [pc, #16]	; (8003308 <__NVIC_SetPriorityGrouping+0x44>)
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	60d3      	str	r3, [r2, #12]
}
 80032fc:	bf00      	nop
 80032fe:	3714      	adds	r7, #20
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	e000ed00 	.word	0xe000ed00

0800330c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003310:	4b04      	ldr	r3, [pc, #16]	; (8003324 <__NVIC_GetPriorityGrouping+0x18>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	0a1b      	lsrs	r3, r3, #8
 8003316:	f003 0307 	and.w	r3, r3, #7
}
 800331a:	4618      	mov	r0, r3
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	e000ed00 	.word	0xe000ed00

08003328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	4603      	mov	r3, r0
 8003330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003336:	2b00      	cmp	r3, #0
 8003338:	db0b      	blt.n	8003352 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800333a:	79fb      	ldrb	r3, [r7, #7]
 800333c:	f003 021f 	and.w	r2, r3, #31
 8003340:	4907      	ldr	r1, [pc, #28]	; (8003360 <__NVIC_EnableIRQ+0x38>)
 8003342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003346:	095b      	lsrs	r3, r3, #5
 8003348:	2001      	movs	r0, #1
 800334a:	fa00 f202 	lsl.w	r2, r0, r2
 800334e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	e000e100 	.word	0xe000e100

08003364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	6039      	str	r1, [r7, #0]
 800336e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003374:	2b00      	cmp	r3, #0
 8003376:	db0a      	blt.n	800338e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	b2da      	uxtb	r2, r3
 800337c:	490c      	ldr	r1, [pc, #48]	; (80033b0 <__NVIC_SetPriority+0x4c>)
 800337e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003382:	0112      	lsls	r2, r2, #4
 8003384:	b2d2      	uxtb	r2, r2
 8003386:	440b      	add	r3, r1
 8003388:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800338c:	e00a      	b.n	80033a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	b2da      	uxtb	r2, r3
 8003392:	4908      	ldr	r1, [pc, #32]	; (80033b4 <__NVIC_SetPriority+0x50>)
 8003394:	79fb      	ldrb	r3, [r7, #7]
 8003396:	f003 030f 	and.w	r3, r3, #15
 800339a:	3b04      	subs	r3, #4
 800339c:	0112      	lsls	r2, r2, #4
 800339e:	b2d2      	uxtb	r2, r2
 80033a0:	440b      	add	r3, r1
 80033a2:	761a      	strb	r2, [r3, #24]
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	e000e100 	.word	0xe000e100
 80033b4:	e000ed00 	.word	0xe000ed00

080033b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b089      	sub	sp, #36	; 0x24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	f1c3 0307 	rsb	r3, r3, #7
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	bf28      	it	cs
 80033d6:	2304      	movcs	r3, #4
 80033d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	3304      	adds	r3, #4
 80033de:	2b06      	cmp	r3, #6
 80033e0:	d902      	bls.n	80033e8 <NVIC_EncodePriority+0x30>
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	3b03      	subs	r3, #3
 80033e6:	e000      	b.n	80033ea <NVIC_EncodePriority+0x32>
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033ec:	f04f 32ff 	mov.w	r2, #4294967295
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	43da      	mvns	r2, r3
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	401a      	ands	r2, r3
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003400:	f04f 31ff 	mov.w	r1, #4294967295
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	fa01 f303 	lsl.w	r3, r1, r3
 800340a:	43d9      	mvns	r1, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003410:	4313      	orrs	r3, r2
         );
}
 8003412:	4618      	mov	r0, r3
 8003414:	3724      	adds	r7, #36	; 0x24
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
	...

08003420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	3b01      	subs	r3, #1
 800342c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003430:	d301      	bcc.n	8003436 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003432:	2301      	movs	r3, #1
 8003434:	e00f      	b.n	8003456 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003436:	4a0a      	ldr	r2, [pc, #40]	; (8003460 <SysTick_Config+0x40>)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3b01      	subs	r3, #1
 800343c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800343e:	210f      	movs	r1, #15
 8003440:	f04f 30ff 	mov.w	r0, #4294967295
 8003444:	f7ff ff8e 	bl	8003364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003448:	4b05      	ldr	r3, [pc, #20]	; (8003460 <SysTick_Config+0x40>)
 800344a:	2200      	movs	r2, #0
 800344c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800344e:	4b04      	ldr	r3, [pc, #16]	; (8003460 <SysTick_Config+0x40>)
 8003450:	2207      	movs	r2, #7
 8003452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	e000e010 	.word	0xe000e010

08003464 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f7ff ff29 	bl	80032c4 <__NVIC_SetPriorityGrouping>
}
 8003472:	bf00      	nop
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b086      	sub	sp, #24
 800347e:	af00      	add	r7, sp, #0
 8003480:	4603      	mov	r3, r0
 8003482:	60b9      	str	r1, [r7, #8]
 8003484:	607a      	str	r2, [r7, #4]
 8003486:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003488:	2300      	movs	r3, #0
 800348a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800348c:	f7ff ff3e 	bl	800330c <__NVIC_GetPriorityGrouping>
 8003490:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	68b9      	ldr	r1, [r7, #8]
 8003496:	6978      	ldr	r0, [r7, #20]
 8003498:	f7ff ff8e 	bl	80033b8 <NVIC_EncodePriority>
 800349c:	4602      	mov	r2, r0
 800349e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034a2:	4611      	mov	r1, r2
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7ff ff5d 	bl	8003364 <__NVIC_SetPriority>
}
 80034aa:	bf00      	nop
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b082      	sub	sp, #8
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	4603      	mov	r3, r0
 80034ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff ff31 	bl	8003328 <__NVIC_EnableIRQ>
}
 80034c6:	bf00      	nop
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b082      	sub	sp, #8
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7ff ffa2 	bl	8003420 <SysTick_Config>
 80034dc:	4603      	mov	r3, r0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80034ea:	f000 f802 	bl	80034f2 <HAL_SYSTICK_Callback>
}
 80034ee:	bf00      	nop
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80034f2:	b480      	push	{r7}
 80034f4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80034f6:	bf00      	nop
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e014      	b.n	800353c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	791b      	ldrb	r3, [r3, #4]
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b00      	cmp	r3, #0
 800351a:	d105      	bne.n	8003528 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7fe f8c0 	bl	80016a8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected  
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800354e:	2300      	movs	r3, #0
 8003550:	73fb      	strb	r3, [r7, #15]
    
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Disable the selected DAC channel DMA request */
    hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6819      	ldr	r1, [r3, #0]
 8003558:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	fa02 f303 	lsl.w	r3, r2, r3
 8003562:	43da      	mvns	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	400a      	ands	r2, r1
 800356a:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6819      	ldr	r1, [r3, #0]
 8003572:	2201      	movs	r2, #1
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	43da      	mvns	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	400a      	ands	r2, r1
 8003582:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA channel */
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10f      	bne.n	80035aa <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);   
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	4618      	mov	r0, r3
 8003590:	f000 fa8d 	bl	8003aae <HAL_DMA_Abort>
 8003594:	4603      	mov	r3, r0
 8003596:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	e00e      	b.n	80035c8 <HAL_DAC_Stop_DMA+0x84>
  /* For all products including channel 2U */
  /* DAC channel 2 is available on top of DAC channel 1U */
  else /* Channel2 is used */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);   
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 fa7d 	bl	8003aae <HAL_DMA_Abort>
 80035b4:	4603      	mov	r3, r0
 80035b6:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80035c6:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */
    
  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_DAC_Stop_DMA+0x92>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2204      	movs	r2, #4
 80035d2:	711a      	strb	r2, [r3, #4]
 80035d4:	e002      	b.n	80035dc <HAL_DAC_Stop_DMA+0x98>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	711a      	strb	r2, [r3, #4]
  }
  
  /* Return function status */
  return status;
 80035dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <HAL_DAC_GetState>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL state
  */
HAL_DAC_StateTypeDef HAL_DAC_GetState(DAC_HandleTypeDef* hdac)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  /* Return DAC handle state */
  return hdac->State;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	791b      	ldrb	r3, [r3, #4]
 80035f2:	b2db      	uxtb	r3, r3
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
 8003648:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 800364a:	2300      	movs	r3, #0
 800364c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	795b      	ldrb	r3, [r3, #5]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d101      	bne.n	800365a <HAL_DAC_Start_DMA+0x1e>
 8003656:	2302      	movs	r3, #2
 8003658:	e09b      	b.n	8003792 <HAL_DAC_Start_DMA+0x156>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2201      	movs	r2, #1
 800365e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2202      	movs	r2, #2
 8003664:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d12f      	bne.n	80036cc <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	4a4a      	ldr	r2, [pc, #296]	; (800379c <HAL_DAC_Start_DMA+0x160>)
 8003672:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	4a49      	ldr	r2, [pc, #292]	; (80037a0 <HAL_DAC_Start_DMA+0x164>)
 800367a:	62da      	str	r2, [r3, #44]	; 0x2c
      
    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	4a48      	ldr	r2, [pc, #288]	; (80037a4 <HAL_DAC_Start_DMA+0x168>)
 8003682:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003692:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1U */
    switch(Alignment)
 8003694:	6a3b      	ldr	r3, [r7, #32]
 8003696:	2b08      	cmp	r3, #8
 8003698:	d013      	beq.n	80036c2 <HAL_DAC_Start_DMA+0x86>
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	2b08      	cmp	r3, #8
 800369e:	d845      	bhi.n	800372c <HAL_DAC_Start_DMA+0xf0>
 80036a0:	6a3b      	ldr	r3, [r7, #32]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_DAC_Start_DMA+0x72>
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	2b04      	cmp	r3, #4
 80036aa:	d005      	beq.n	80036b8 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80036ac:	e03e      	b.n	800372c <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	3308      	adds	r3, #8
 80036b4:	617b      	str	r3, [r7, #20]
        break;
 80036b6:	e03c      	b.n	8003732 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	330c      	adds	r3, #12
 80036be:	617b      	str	r3, [r7, #20]
        break;
 80036c0:	e037      	b.n	8003732 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	3310      	adds	r3, #16
 80036c8:	617b      	str	r3, [r7, #20]
        break;
 80036ca:	e032      	b.n	8003732 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	4a35      	ldr	r2, [pc, #212]	; (80037a8 <HAL_DAC_Start_DMA+0x16c>)
 80036d2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	4a34      	ldr	r2, [pc, #208]	; (80037ac <HAL_DAC_Start_DMA+0x170>)
 80036da:	62da      	str	r2, [r3, #44]	; 0x2c
       
    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	4a33      	ldr	r2, [pc, #204]	; (80037b0 <HAL_DAC_Start_DMA+0x174>)
 80036e2:	631a      	str	r2, [r3, #48]	; 0x30
 
    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80036f2:	601a      	str	r2, [r3, #0]
   
    /* Case of use of channel 2U */
    switch(Alignment)
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	2b08      	cmp	r3, #8
 80036f8:	d013      	beq.n	8003722 <HAL_DAC_Start_DMA+0xe6>
 80036fa:	6a3b      	ldr	r3, [r7, #32]
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d817      	bhi.n	8003730 <HAL_DAC_Start_DMA+0xf4>
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <HAL_DAC_Start_DMA+0xd2>
 8003706:	6a3b      	ldr	r3, [r7, #32]
 8003708:	2b04      	cmp	r3, #4
 800370a:	d005      	beq.n	8003718 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800370c:	e010      	b.n	8003730 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	3314      	adds	r3, #20
 8003714:	617b      	str	r3, [r7, #20]
        break;
 8003716:	e00c      	b.n	8003732 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	3318      	adds	r3, #24
 800371e:	617b      	str	r3, [r7, #20]
        break;
 8003720:	e007      	b.n	8003732 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	331c      	adds	r3, #28
 8003728:	617b      	str	r3, [r7, #20]
        break;
 800372a:	e002      	b.n	8003732 <HAL_DAC_Start_DMA+0xf6>
        break;
 800372c:	bf00      	nop
 800372e:	e000      	b.n	8003732 <HAL_DAC_Start_DMA+0xf6>
        break;
 8003730:	bf00      	nop
    }
  }
 
  /* Enable the DMA Channel */
  if(Channel == DAC_CHANNEL_1)
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10f      	bne.n	8003758 <HAL_DAC_Start_DMA+0x11c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003746:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6898      	ldr	r0, [r3, #8]
 800374c:	6879      	ldr	r1, [r7, #4]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	f000 f94d 	bl	80039f0 <HAL_DMA_Start_IT>
 8003756:	e00e      	b.n	8003776 <HAL_DAC_Start_DMA+0x13a>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003766:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	68d8      	ldr	r0, [r3, #12]
 800376c:	6879      	ldr	r1, [r7, #4]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	f000 f93d 	bl	80039f0 <HAL_DMA_Start_IT>
  }
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6819      	ldr	r1, [r3, #0]
 8003782:	2201      	movs	r2, #1
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	409a      	lsls	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3718      	adds	r7, #24
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	0800388b 	.word	0x0800388b
 80037a0:	080038ad 	.word	0x080038ad
 80037a4:	080038c9 	.word	0x080038c9
 80037a8:	080038f7 	.word	0x080038f7
 80037ac:	08003919 	.word	0x08003919
 80037b0:	08003935 	.word	0x08003935

080037b4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b087      	sub	sp, #28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	617b      	str	r3, [r7, #20]
 80037c4:	2300      	movs	r3, #0
 80037c6:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	795b      	ldrb	r3, [r3, #5]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d101      	bne.n	80037d4 <HAL_DAC_ConfigChannel+0x20>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e036      	b.n	8003842 <HAL_DAC_ConfigChannel+0x8e>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2201      	movs	r2, #1
 80037d8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2202      	movs	r2, #2
 80037de:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80037e8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	43db      	mvns	r3, r3
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	4013      	ands	r3, r2
 80037f8:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	4313      	orrs	r3, r2
 8003804:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	4313      	orrs	r3, r2
 8003812:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6819      	ldr	r1, [r3, #0]
 8003822:	22c0      	movs	r2, #192	; 0xc0
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	43da      	mvns	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	400a      	ands	r2, r1
 8003832:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2201      	movs	r2, #1
 8003838:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	371c      	adds	r7, #28
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8003862:	b480      	push	{r7}
 8003864:	b083      	sub	sp, #12
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800386a:	bf00      	nop
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800387e:	bf00      	nop
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b084      	sub	sp, #16
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003896:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f7ff feb1 	bl	8003600 <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2201      	movs	r2, #1
 80038a2:	711a      	strb	r2, [r3, #4]
}
 80038a4:	bf00      	nop
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b8:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f7ff feaa 	bl	8003614 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 80038c0:	bf00      	nop
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d4:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	f043 0204 	orr.w	r2, r3, #4
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f7ff fea0 	bl	8003628 <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2201      	movs	r2, #1
 80038ec:	711a      	strb	r2, [r3, #4]
}
 80038ee:	bf00      	nop
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b084      	sub	sp, #16
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f7ff ffa2 	bl	800384e <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2201      	movs	r2, #1
 800390e:	711a      	strb	r2, [r3, #4]
}
 8003910:	bf00      	nop
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f7ff ff9b 	bl	8003862 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 800392c:	bf00      	nop
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	f043 0204 	orr.w	r2, r3, #4
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f7ff ff91 	bl	8003876 <HAL_DACEx_ErrorCallbackCh2>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2201      	movs	r2, #1
 8003958:	711a      	strb	r2, [r3, #4]
}
 800395a:	bf00      	nop
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003962:	b580      	push	{r7, lr}
 8003964:	b084      	sub	sp, #16
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e037      	b.n	80039e8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2202      	movs	r2, #2
 800397c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800398e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003992:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800399c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	4313      	orrs	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f9b8 	bl	8003d40 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}  
 80039e8:	4618      	mov	r0, r3
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
 80039fc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80039fe:	2300      	movs	r3, #0
 8003a00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d101      	bne.n	8003a10 <HAL_DMA_Start_IT+0x20>
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	e04a      	b.n	8003aa6 <HAL_DMA_Start_IT+0xb6>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d13a      	bne.n	8003a98 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2202      	movs	r2, #2
 8003a26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0201 	bic.w	r2, r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	68b9      	ldr	r1, [r7, #8]
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 f94b 	bl	8003ce2 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d008      	beq.n	8003a66 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 020e 	orr.w	r2, r2, #14
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	e00f      	b.n	8003a86 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f042 020a 	orr.w	r2, r2, #10
 8003a74:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0204 	bic.w	r2, r2, #4
 8003a84:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f042 0201 	orr.w	r2, r2, #1
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	e005      	b.n	8003aa4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003aa4:	7dfb      	ldrb	r3, [r7, #23]
} 
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3718      	adds	r7, #24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b083      	sub	sp, #12
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d008      	beq.n	8003ad2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2204      	movs	r2, #4
 8003ac4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e020      	b.n	8003b14 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 020e 	bic.w	r2, r2, #14
 8003ae0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0201 	bic.w	r2, r2, #1
 8003af0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afa:	2101      	movs	r1, #1
 8003afc:	fa01 f202 	lsl.w	r2, r1, r2
 8003b00:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d005      	beq.n	8003b42 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2204      	movs	r2, #4
 8003b3a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	73fb      	strb	r3, [r7, #15]
 8003b40:	e027      	b.n	8003b92 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 020e 	bic.w	r2, r2, #14
 8003b50:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 0201 	bic.w	r2, r2, #1
 8003b60:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b70:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	4798      	blx	r3
    } 
  }
  return status;
 8003b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb8:	2204      	movs	r2, #4
 8003bba:	409a      	lsls	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d024      	beq.n	8003c0e <HAL_DMA_IRQHandler+0x72>
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	f003 0304 	and.w	r3, r3, #4
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d01f      	beq.n	8003c0e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0320 	and.w	r3, r3, #32
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d107      	bne.n	8003bec <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0204 	bic.w	r2, r2, #4
 8003bea:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf4:	2104      	movs	r1, #4
 8003bf6:	fa01 f202 	lsl.w	r2, r1, r2
 8003bfa:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d06a      	beq.n	8003cda <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003c0c:	e065      	b.n	8003cda <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	2202      	movs	r2, #2
 8003c14:	409a      	lsls	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d02c      	beq.n	8003c78 <HAL_DMA_IRQHandler+0xdc>
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d027      	beq.n	8003c78 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0320 	and.w	r3, r3, #32
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10b      	bne.n	8003c4e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 020a 	bic.w	r2, r2, #10
 8003c44:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c56:	2102      	movs	r1, #2
 8003c58:	fa01 f202 	lsl.w	r2, r1, r2
 8003c5c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d035      	beq.n	8003cda <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003c76:	e030      	b.n	8003cda <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7c:	2208      	movs	r2, #8
 8003c7e:	409a      	lsls	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4013      	ands	r3, r2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d028      	beq.n	8003cda <HAL_DMA_IRQHandler+0x13e>
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	f003 0308 	and.w	r3, r3, #8
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d023      	beq.n	8003cda <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 020e 	bic.w	r2, r2, #14
 8003ca0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003caa:	2101      	movs	r1, #1
 8003cac:	fa01 f202 	lsl.w	r2, r1, r2
 8003cb0:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d004      	beq.n	8003cda <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	4798      	blx	r3
    }
  }
}  
 8003cd8:	e7ff      	b.n	8003cda <HAL_DMA_IRQHandler+0x13e>
 8003cda:	bf00      	nop
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b085      	sub	sp, #20
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	60f8      	str	r0, [r7, #12]
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	607a      	str	r2, [r7, #4]
 8003cee:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8003cfe:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	2b10      	cmp	r3, #16
 8003d0e:	d108      	bne.n	8003d22 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d20:	e007      	b.n	8003d32 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	60da      	str	r2, [r3, #12]
}
 8003d32:	bf00      	nop
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
	...

08003d40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	4b14      	ldr	r3, [pc, #80]	; (8003da0 <DMA_CalcBaseAndBitshift+0x60>)
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d80f      	bhi.n	8003d74 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	461a      	mov	r2, r3
 8003d5a:	4b12      	ldr	r3, [pc, #72]	; (8003da4 <DMA_CalcBaseAndBitshift+0x64>)
 8003d5c:	4413      	add	r3, r2
 8003d5e:	4a12      	ldr	r2, [pc, #72]	; (8003da8 <DMA_CalcBaseAndBitshift+0x68>)
 8003d60:	fba2 2303 	umull	r2, r3, r2, r3
 8003d64:	091b      	lsrs	r3, r3, #4
 8003d66:	009a      	lsls	r2, r3, #2
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a0f      	ldr	r2, [pc, #60]	; (8003dac <DMA_CalcBaseAndBitshift+0x6c>)
 8003d70:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8003d72:	e00e      	b.n	8003d92 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	461a      	mov	r2, r3
 8003d7a:	4b0d      	ldr	r3, [pc, #52]	; (8003db0 <DMA_CalcBaseAndBitshift+0x70>)
 8003d7c:	4413      	add	r3, r2
 8003d7e:	4a0a      	ldr	r2, [pc, #40]	; (8003da8 <DMA_CalcBaseAndBitshift+0x68>)
 8003d80:	fba2 2303 	umull	r2, r3, r2, r3
 8003d84:	091b      	lsrs	r3, r3, #4
 8003d86:	009a      	lsls	r2, r3, #2
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a09      	ldr	r2, [pc, #36]	; (8003db4 <DMA_CalcBaseAndBitshift+0x74>)
 8003d90:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	40020407 	.word	0x40020407
 8003da4:	bffdfff8 	.word	0xbffdfff8
 8003da8:	cccccccd 	.word	0xcccccccd
 8003dac:	40020000 	.word	0x40020000
 8003db0:	bffdfbf8 	.word	0xbffdfbf8
 8003db4:	40020400 	.word	0x40020400

08003db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b087      	sub	sp, #28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dc6:	e160      	b.n	800408a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	2101      	movs	r1, #1
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 8152 	beq.w	8004084 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f003 0303 	and.w	r3, r3, #3
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d005      	beq.n	8003df8 <HAL_GPIO_Init+0x40>
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f003 0303 	and.w	r3, r3, #3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d130      	bne.n	8003e5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	2203      	movs	r2, #3
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	43db      	mvns	r3, r3
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	68da      	ldr	r2, [r3, #12]
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e2e:	2201      	movs	r2, #1
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	43db      	mvns	r3, r3
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	091b      	lsrs	r3, r3, #4
 8003e44:	f003 0201 	and.w	r2, r3, #1
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	2b03      	cmp	r3, #3
 8003e64:	d017      	beq.n	8003e96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	2203      	movs	r2, #3
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	43db      	mvns	r3, r3
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	689a      	ldr	r2, [r3, #8]
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f003 0303 	and.w	r3, r3, #3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d123      	bne.n	8003eea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	08da      	lsrs	r2, r3, #3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	3208      	adds	r2, #8
 8003eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	f003 0307 	and.w	r3, r3, #7
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	220f      	movs	r2, #15
 8003eba:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebe:	43db      	mvns	r3, r3
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	691a      	ldr	r2, [r3, #16]
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	08da      	lsrs	r2, r3, #3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3208      	adds	r2, #8
 8003ee4:	6939      	ldr	r1, [r7, #16]
 8003ee6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	2203      	movs	r2, #3
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	43db      	mvns	r3, r3
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	4013      	ands	r3, r2
 8003f00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f003 0203 	and.w	r2, r3, #3
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f000 80ac 	beq.w	8004084 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f2c:	4b5e      	ldr	r3, [pc, #376]	; (80040a8 <HAL_GPIO_Init+0x2f0>)
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	4a5d      	ldr	r2, [pc, #372]	; (80040a8 <HAL_GPIO_Init+0x2f0>)
 8003f32:	f043 0301 	orr.w	r3, r3, #1
 8003f36:	6193      	str	r3, [r2, #24]
 8003f38:	4b5b      	ldr	r3, [pc, #364]	; (80040a8 <HAL_GPIO_Init+0x2f0>)
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	60bb      	str	r3, [r7, #8]
 8003f42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003f44:	4a59      	ldr	r2, [pc, #356]	; (80040ac <HAL_GPIO_Init+0x2f4>)
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	089b      	lsrs	r3, r3, #2
 8003f4a:	3302      	adds	r3, #2
 8003f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f003 0303 	and.w	r3, r3, #3
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	220f      	movs	r2, #15
 8003f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f60:	43db      	mvns	r3, r3
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	4013      	ands	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f6e:	d025      	beq.n	8003fbc <HAL_GPIO_Init+0x204>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a4f      	ldr	r2, [pc, #316]	; (80040b0 <HAL_GPIO_Init+0x2f8>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d01f      	beq.n	8003fb8 <HAL_GPIO_Init+0x200>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a4e      	ldr	r2, [pc, #312]	; (80040b4 <HAL_GPIO_Init+0x2fc>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d019      	beq.n	8003fb4 <HAL_GPIO_Init+0x1fc>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a4d      	ldr	r2, [pc, #308]	; (80040b8 <HAL_GPIO_Init+0x300>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d013      	beq.n	8003fb0 <HAL_GPIO_Init+0x1f8>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a4c      	ldr	r2, [pc, #304]	; (80040bc <HAL_GPIO_Init+0x304>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d00d      	beq.n	8003fac <HAL_GPIO_Init+0x1f4>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a4b      	ldr	r2, [pc, #300]	; (80040c0 <HAL_GPIO_Init+0x308>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d007      	beq.n	8003fa8 <HAL_GPIO_Init+0x1f0>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a4a      	ldr	r2, [pc, #296]	; (80040c4 <HAL_GPIO_Init+0x30c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d101      	bne.n	8003fa4 <HAL_GPIO_Init+0x1ec>
 8003fa0:	2306      	movs	r3, #6
 8003fa2:	e00c      	b.n	8003fbe <HAL_GPIO_Init+0x206>
 8003fa4:	2307      	movs	r3, #7
 8003fa6:	e00a      	b.n	8003fbe <HAL_GPIO_Init+0x206>
 8003fa8:	2305      	movs	r3, #5
 8003faa:	e008      	b.n	8003fbe <HAL_GPIO_Init+0x206>
 8003fac:	2304      	movs	r3, #4
 8003fae:	e006      	b.n	8003fbe <HAL_GPIO_Init+0x206>
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e004      	b.n	8003fbe <HAL_GPIO_Init+0x206>
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	e002      	b.n	8003fbe <HAL_GPIO_Init+0x206>
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e000      	b.n	8003fbe <HAL_GPIO_Init+0x206>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	f002 0203 	and.w	r2, r2, #3
 8003fc4:	0092      	lsls	r2, r2, #2
 8003fc6:	4093      	lsls	r3, r2
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003fce:	4937      	ldr	r1, [pc, #220]	; (80040ac <HAL_GPIO_Init+0x2f4>)
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	089b      	lsrs	r3, r3, #2
 8003fd4:	3302      	adds	r3, #2
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fdc:	4b3a      	ldr	r3, [pc, #232]	; (80040c8 <HAL_GPIO_Init+0x310>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004000:	4a31      	ldr	r2, [pc, #196]	; (80040c8 <HAL_GPIO_Init+0x310>)
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004006:	4b30      	ldr	r3, [pc, #192]	; (80040c8 <HAL_GPIO_Init+0x310>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	43db      	mvns	r3, r3
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	4013      	ands	r3, r2
 8004014:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	4313      	orrs	r3, r2
 8004028:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800402a:	4a27      	ldr	r2, [pc, #156]	; (80040c8 <HAL_GPIO_Init+0x310>)
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004030:	4b25      	ldr	r3, [pc, #148]	; (80040c8 <HAL_GPIO_Init+0x310>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	43db      	mvns	r3, r3
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	4013      	ands	r3, r2
 800403e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	4313      	orrs	r3, r2
 8004052:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004054:	4a1c      	ldr	r2, [pc, #112]	; (80040c8 <HAL_GPIO_Init+0x310>)
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800405a:	4b1b      	ldr	r3, [pc, #108]	; (80040c8 <HAL_GPIO_Init+0x310>)
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	43db      	mvns	r3, r3
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	4013      	ands	r3, r2
 8004068:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	4313      	orrs	r3, r2
 800407c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800407e:	4a12      	ldr	r2, [pc, #72]	; (80040c8 <HAL_GPIO_Init+0x310>)
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	3301      	adds	r3, #1
 8004088:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	fa22 f303 	lsr.w	r3, r2, r3
 8004094:	2b00      	cmp	r3, #0
 8004096:	f47f ae97 	bne.w	8003dc8 <HAL_GPIO_Init+0x10>
  }
}
 800409a:	bf00      	nop
 800409c:	bf00      	nop
 800409e:	371c      	adds	r7, #28
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	40021000 	.word	0x40021000
 80040ac:	40010000 	.word	0x40010000
 80040b0:	48000400 	.word	0x48000400
 80040b4:	48000800 	.word	0x48000800
 80040b8:	48000c00 	.word	0x48000c00
 80040bc:	48001000 	.word	0x48001000
 80040c0:	48001400 	.word	0x48001400
 80040c4:	48001800 	.word	0x48001800
 80040c8:	40010400 	.word	0x40010400

080040cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	460b      	mov	r3, r1
 80040d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	691a      	ldr	r2, [r3, #16]
 80040dc:	887b      	ldrh	r3, [r7, #2]
 80040de:	4013      	ands	r3, r2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d002      	beq.n	80040ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040e4:	2301      	movs	r3, #1
 80040e6:	73fb      	strb	r3, [r7, #15]
 80040e8:	e001      	b.n	80040ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040ea:	2300      	movs	r3, #0
 80040ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	460b      	mov	r3, r1
 8004106:	807b      	strh	r3, [r7, #2]
 8004108:	4613      	mov	r3, r2
 800410a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800410c:	787b      	ldrb	r3, [r7, #1]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004112:	887a      	ldrh	r2, [r7, #2]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004118:	e002      	b.n	8004120 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800411a:	887a      	ldrh	r2, [r7, #2]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	4603      	mov	r3, r0
 8004134:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004136:	4b08      	ldr	r3, [pc, #32]	; (8004158 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004138:	695a      	ldr	r2, [r3, #20]
 800413a:	88fb      	ldrh	r3, [r7, #6]
 800413c:	4013      	ands	r3, r2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d006      	beq.n	8004150 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004142:	4a05      	ldr	r2, [pc, #20]	; (8004158 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004144:	88fb      	ldrh	r3, [r7, #6]
 8004146:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004148:	88fb      	ldrh	r3, [r7, #6]
 800414a:	4618      	mov	r0, r3
 800414c:	f7fc fd6a 	bl	8000c24 <HAL_GPIO_EXTI_Callback>
  }
}
 8004150:	bf00      	nop
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	40010400 	.word	0x40010400

0800415c <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8004160:	4b05      	ldr	r3, [pc, #20]	; (8004178 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a04      	ldr	r2, [pc, #16]	; (8004178 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800416a:	6013      	str	r3, [r2, #0]
}
 800416c:	bf00      	nop
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	40007000 	.word	0x40007000

0800417c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8004182:	af00      	add	r7, sp, #0
 8004184:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004188:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800418c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800418e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004192:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d102      	bne.n	80041a2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	f001 b83a 	b.w	8005216 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041a6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f000 816f 	beq.w	8004496 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80041b8:	4bb5      	ldr	r3, [pc, #724]	; (8004490 <HAL_RCC_OscConfig+0x314>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f003 030c 	and.w	r3, r3, #12
 80041c0:	2b04      	cmp	r3, #4
 80041c2:	d00c      	beq.n	80041de <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80041c4:	4bb2      	ldr	r3, [pc, #712]	; (8004490 <HAL_RCC_OscConfig+0x314>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f003 030c 	and.w	r3, r3, #12
 80041cc:	2b08      	cmp	r3, #8
 80041ce:	d15c      	bne.n	800428a <HAL_RCC_OscConfig+0x10e>
 80041d0:	4baf      	ldr	r3, [pc, #700]	; (8004490 <HAL_RCC_OscConfig+0x314>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80041d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041dc:	d155      	bne.n	800428a <HAL_RCC_OscConfig+0x10e>
 80041de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041e2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80041ea:	fa93 f3a3 	rbit	r3, r3
 80041ee:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 80041f2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041f6:	fab3 f383 	clz	r3, r3
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	095b      	lsrs	r3, r3, #5
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	f043 0301 	orr.w	r3, r3, #1
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b01      	cmp	r3, #1
 8004208:	d102      	bne.n	8004210 <HAL_RCC_OscConfig+0x94>
 800420a:	4ba1      	ldr	r3, [pc, #644]	; (8004490 <HAL_RCC_OscConfig+0x314>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	e015      	b.n	800423c <HAL_RCC_OscConfig+0xc0>
 8004210:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004214:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004218:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800421c:	fa93 f3a3 	rbit	r3, r3
 8004220:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004224:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004228:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800422c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8004230:	fa93 f3a3 	rbit	r3, r3
 8004234:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004238:	4b95      	ldr	r3, [pc, #596]	; (8004490 <HAL_RCC_OscConfig+0x314>)
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004240:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8004244:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8004248:	fa92 f2a2 	rbit	r2, r2
 800424c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8004250:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004254:	fab2 f282 	clz	r2, r2
 8004258:	b2d2      	uxtb	r2, r2
 800425a:	f042 0220 	orr.w	r2, r2, #32
 800425e:	b2d2      	uxtb	r2, r2
 8004260:	f002 021f 	and.w	r2, r2, #31
 8004264:	2101      	movs	r1, #1
 8004266:	fa01 f202 	lsl.w	r2, r1, r2
 800426a:	4013      	ands	r3, r2
 800426c:	2b00      	cmp	r3, #0
 800426e:	f000 8111 	beq.w	8004494 <HAL_RCC_OscConfig+0x318>
 8004272:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004276:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	f040 8108 	bne.w	8004494 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	f000 bfc6 	b.w	8005216 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800428a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800428e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800429a:	d106      	bne.n	80042aa <HAL_RCC_OscConfig+0x12e>
 800429c:	4b7c      	ldr	r3, [pc, #496]	; (8004490 <HAL_RCC_OscConfig+0x314>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a7b      	ldr	r2, [pc, #492]	; (8004490 <HAL_RCC_OscConfig+0x314>)
 80042a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a6:	6013      	str	r3, [r2, #0]
 80042a8:	e036      	b.n	8004318 <HAL_RCC_OscConfig+0x19c>
 80042aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10c      	bne.n	80042d4 <HAL_RCC_OscConfig+0x158>
 80042ba:	4b75      	ldr	r3, [pc, #468]	; (8004490 <HAL_RCC_OscConfig+0x314>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a74      	ldr	r2, [pc, #464]	; (8004490 <HAL_RCC_OscConfig+0x314>)
 80042c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042c4:	6013      	str	r3, [r2, #0]
 80042c6:	4b72      	ldr	r3, [pc, #456]	; (8004490 <HAL_RCC_OscConfig+0x314>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a71      	ldr	r2, [pc, #452]	; (8004490 <HAL_RCC_OscConfig+0x314>)
 80042cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	e021      	b.n	8004318 <HAL_RCC_OscConfig+0x19c>
 80042d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042e4:	d10c      	bne.n	8004300 <HAL_RCC_OscConfig+0x184>
 80042e6:	4b6a      	ldr	r3, [pc, #424]	; (8004490 <HAL_RCC_OscConfig+0x314>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a69      	ldr	r2, [pc, #420]	; (8004490 <HAL_RCC_OscConfig+0x314>)
 80042ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042f0:	6013      	str	r3, [r2, #0]
 80042f2:	4b67      	ldr	r3, [pc, #412]	; (8004490 <HAL_RCC_OscConfig+0x314>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a66      	ldr	r2, [pc, #408]	; (8004490 <HAL_RCC_OscConfig+0x314>)
 80042f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042fc:	6013      	str	r3, [r2, #0]
 80042fe:	e00b      	b.n	8004318 <HAL_RCC_OscConfig+0x19c>
 8004300:	4b63      	ldr	r3, [pc, #396]	; (8004490 <HAL_RCC_OscConfig+0x314>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a62      	ldr	r2, [pc, #392]	; (8004490 <HAL_RCC_OscConfig+0x314>)
 8004306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800430a:	6013      	str	r3, [r2, #0]
 800430c:	4b60      	ldr	r3, [pc, #384]	; (8004490 <HAL_RCC_OscConfig+0x314>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a5f      	ldr	r2, [pc, #380]	; (8004490 <HAL_RCC_OscConfig+0x314>)
 8004312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004316:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004318:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800431c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d059      	beq.n	80043dc <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004328:	f7fd fe08 	bl	8001f3c <HAL_GetTick>
 800432c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004330:	e00a      	b.n	8004348 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004332:	f7fd fe03 	bl	8001f3c <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b64      	cmp	r3, #100	; 0x64
 8004340:	d902      	bls.n	8004348 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	f000 bf67 	b.w	8005216 <HAL_RCC_OscConfig+0x109a>
 8004348:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800434c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004350:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8004354:	fa93 f3a3 	rbit	r3, r3
 8004358:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800435c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004360:	fab3 f383 	clz	r3, r3
 8004364:	b2db      	uxtb	r3, r3
 8004366:	095b      	lsrs	r3, r3, #5
 8004368:	b2db      	uxtb	r3, r3
 800436a:	f043 0301 	orr.w	r3, r3, #1
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b01      	cmp	r3, #1
 8004372:	d102      	bne.n	800437a <HAL_RCC_OscConfig+0x1fe>
 8004374:	4b46      	ldr	r3, [pc, #280]	; (8004490 <HAL_RCC_OscConfig+0x314>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	e015      	b.n	80043a6 <HAL_RCC_OscConfig+0x22a>
 800437a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800437e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004382:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8004386:	fa93 f3a3 	rbit	r3, r3
 800438a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800438e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004392:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004396:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800439a:	fa93 f3a3 	rbit	r3, r3
 800439e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80043a2:	4b3b      	ldr	r3, [pc, #236]	; (8004490 <HAL_RCC_OscConfig+0x314>)
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043aa:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80043ae:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80043b2:	fa92 f2a2 	rbit	r2, r2
 80043b6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80043ba:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80043be:	fab2 f282 	clz	r2, r2
 80043c2:	b2d2      	uxtb	r2, r2
 80043c4:	f042 0220 	orr.w	r2, r2, #32
 80043c8:	b2d2      	uxtb	r2, r2
 80043ca:	f002 021f 	and.w	r2, r2, #31
 80043ce:	2101      	movs	r1, #1
 80043d0:	fa01 f202 	lsl.w	r2, r1, r2
 80043d4:	4013      	ands	r3, r2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d0ab      	beq.n	8004332 <HAL_RCC_OscConfig+0x1b6>
 80043da:	e05c      	b.n	8004496 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043dc:	f7fd fdae 	bl	8001f3c <HAL_GetTick>
 80043e0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043e4:	e00a      	b.n	80043fc <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043e6:	f7fd fda9 	bl	8001f3c <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b64      	cmp	r3, #100	; 0x64
 80043f4:	d902      	bls.n	80043fc <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	f000 bf0d 	b.w	8005216 <HAL_RCC_OscConfig+0x109a>
 80043fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004400:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004404:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8004408:	fa93 f3a3 	rbit	r3, r3
 800440c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8004410:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004414:	fab3 f383 	clz	r3, r3
 8004418:	b2db      	uxtb	r3, r3
 800441a:	095b      	lsrs	r3, r3, #5
 800441c:	b2db      	uxtb	r3, r3
 800441e:	f043 0301 	orr.w	r3, r3, #1
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b01      	cmp	r3, #1
 8004426:	d102      	bne.n	800442e <HAL_RCC_OscConfig+0x2b2>
 8004428:	4b19      	ldr	r3, [pc, #100]	; (8004490 <HAL_RCC_OscConfig+0x314>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	e015      	b.n	800445a <HAL_RCC_OscConfig+0x2de>
 800442e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004432:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004436:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800443a:	fa93 f3a3 	rbit	r3, r3
 800443e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8004442:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004446:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800444a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800444e:	fa93 f3a3 	rbit	r3, r3
 8004452:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004456:	4b0e      	ldr	r3, [pc, #56]	; (8004490 <HAL_RCC_OscConfig+0x314>)
 8004458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800445e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004462:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8004466:	fa92 f2a2 	rbit	r2, r2
 800446a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800446e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004472:	fab2 f282 	clz	r2, r2
 8004476:	b2d2      	uxtb	r2, r2
 8004478:	f042 0220 	orr.w	r2, r2, #32
 800447c:	b2d2      	uxtb	r2, r2
 800447e:	f002 021f 	and.w	r2, r2, #31
 8004482:	2101      	movs	r1, #1
 8004484:	fa01 f202 	lsl.w	r2, r1, r2
 8004488:	4013      	ands	r3, r2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1ab      	bne.n	80043e6 <HAL_RCC_OscConfig+0x26a>
 800448e:	e002      	b.n	8004496 <HAL_RCC_OscConfig+0x31a>
 8004490:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004496:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800449a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f000 817f 	beq.w	80047aa <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80044ac:	4ba7      	ldr	r3, [pc, #668]	; (800474c <HAL_RCC_OscConfig+0x5d0>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f003 030c 	and.w	r3, r3, #12
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00c      	beq.n	80044d2 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80044b8:	4ba4      	ldr	r3, [pc, #656]	; (800474c <HAL_RCC_OscConfig+0x5d0>)
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f003 030c 	and.w	r3, r3, #12
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d173      	bne.n	80045ac <HAL_RCC_OscConfig+0x430>
 80044c4:	4ba1      	ldr	r3, [pc, #644]	; (800474c <HAL_RCC_OscConfig+0x5d0>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80044cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044d0:	d16c      	bne.n	80045ac <HAL_RCC_OscConfig+0x430>
 80044d2:	2302      	movs	r3, #2
 80044d4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80044dc:	fa93 f3a3 	rbit	r3, r3
 80044e0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80044e4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044e8:	fab3 f383 	clz	r3, r3
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	095b      	lsrs	r3, r3, #5
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	f043 0301 	orr.w	r3, r3, #1
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d102      	bne.n	8004502 <HAL_RCC_OscConfig+0x386>
 80044fc:	4b93      	ldr	r3, [pc, #588]	; (800474c <HAL_RCC_OscConfig+0x5d0>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	e013      	b.n	800452a <HAL_RCC_OscConfig+0x3ae>
 8004502:	2302      	movs	r3, #2
 8004504:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004508:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800450c:	fa93 f3a3 	rbit	r3, r3
 8004510:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004514:	2302      	movs	r3, #2
 8004516:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800451a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800451e:	fa93 f3a3 	rbit	r3, r3
 8004522:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004526:	4b89      	ldr	r3, [pc, #548]	; (800474c <HAL_RCC_OscConfig+0x5d0>)
 8004528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452a:	2202      	movs	r2, #2
 800452c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004530:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8004534:	fa92 f2a2 	rbit	r2, r2
 8004538:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800453c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004540:	fab2 f282 	clz	r2, r2
 8004544:	b2d2      	uxtb	r2, r2
 8004546:	f042 0220 	orr.w	r2, r2, #32
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	f002 021f 	and.w	r2, r2, #31
 8004550:	2101      	movs	r1, #1
 8004552:	fa01 f202 	lsl.w	r2, r1, r2
 8004556:	4013      	ands	r3, r2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00a      	beq.n	8004572 <HAL_RCC_OscConfig+0x3f6>
 800455c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004560:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d002      	beq.n	8004572 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	f000 be52 	b.w	8005216 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004572:	4b76      	ldr	r3, [pc, #472]	; (800474c <HAL_RCC_OscConfig+0x5d0>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800457a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800457e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	21f8      	movs	r1, #248	; 0xf8
 8004588:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800458c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8004590:	fa91 f1a1 	rbit	r1, r1
 8004594:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8004598:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800459c:	fab1 f181 	clz	r1, r1
 80045a0:	b2c9      	uxtb	r1, r1
 80045a2:	408b      	lsls	r3, r1
 80045a4:	4969      	ldr	r1, [pc, #420]	; (800474c <HAL_RCC_OscConfig+0x5d0>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045aa:	e0fe      	b.n	80047aa <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 8088 	beq.w	80046ce <HAL_RCC_OscConfig+0x552>
 80045be:	2301      	movs	r3, #1
 80045c0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80045c8:	fa93 f3a3 	rbit	r3, r3
 80045cc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80045d0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045d4:	fab3 f383 	clz	r3, r3
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80045de:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	461a      	mov	r2, r3
 80045e6:	2301      	movs	r3, #1
 80045e8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ea:	f7fd fca7 	bl	8001f3c <HAL_GetTick>
 80045ee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045f2:	e00a      	b.n	800460a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045f4:	f7fd fca2 	bl	8001f3c <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d902      	bls.n	800460a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	f000 be06 	b.w	8005216 <HAL_RCC_OscConfig+0x109a>
 800460a:	2302      	movs	r3, #2
 800460c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004610:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004614:	fa93 f3a3 	rbit	r3, r3
 8004618:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800461c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004620:	fab3 f383 	clz	r3, r3
 8004624:	b2db      	uxtb	r3, r3
 8004626:	095b      	lsrs	r3, r3, #5
 8004628:	b2db      	uxtb	r3, r3
 800462a:	f043 0301 	orr.w	r3, r3, #1
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b01      	cmp	r3, #1
 8004632:	d102      	bne.n	800463a <HAL_RCC_OscConfig+0x4be>
 8004634:	4b45      	ldr	r3, [pc, #276]	; (800474c <HAL_RCC_OscConfig+0x5d0>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	e013      	b.n	8004662 <HAL_RCC_OscConfig+0x4e6>
 800463a:	2302      	movs	r3, #2
 800463c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004640:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004644:	fa93 f3a3 	rbit	r3, r3
 8004648:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800464c:	2302      	movs	r3, #2
 800464e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004652:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004656:	fa93 f3a3 	rbit	r3, r3
 800465a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800465e:	4b3b      	ldr	r3, [pc, #236]	; (800474c <HAL_RCC_OscConfig+0x5d0>)
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	2202      	movs	r2, #2
 8004664:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004668:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800466c:	fa92 f2a2 	rbit	r2, r2
 8004670:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8004674:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004678:	fab2 f282 	clz	r2, r2
 800467c:	b2d2      	uxtb	r2, r2
 800467e:	f042 0220 	orr.w	r2, r2, #32
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	f002 021f 	and.w	r2, r2, #31
 8004688:	2101      	movs	r1, #1
 800468a:	fa01 f202 	lsl.w	r2, r1, r2
 800468e:	4013      	ands	r3, r2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0af      	beq.n	80045f4 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004694:	4b2d      	ldr	r3, [pc, #180]	; (800474c <HAL_RCC_OscConfig+0x5d0>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800469c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	21f8      	movs	r1, #248	; 0xf8
 80046aa:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ae:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80046b2:	fa91 f1a1 	rbit	r1, r1
 80046b6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80046ba:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80046be:	fab1 f181 	clz	r1, r1
 80046c2:	b2c9      	uxtb	r1, r1
 80046c4:	408b      	lsls	r3, r1
 80046c6:	4921      	ldr	r1, [pc, #132]	; (800474c <HAL_RCC_OscConfig+0x5d0>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	600b      	str	r3, [r1, #0]
 80046cc:	e06d      	b.n	80047aa <HAL_RCC_OscConfig+0x62e>
 80046ce:	2301      	movs	r3, #1
 80046d0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80046d8:	fa93 f3a3 	rbit	r3, r3
 80046dc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80046e0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046e4:	fab3 f383 	clz	r3, r3
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80046ee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	461a      	mov	r2, r3
 80046f6:	2300      	movs	r3, #0
 80046f8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046fa:	f7fd fc1f 	bl	8001f3c <HAL_GetTick>
 80046fe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004702:	e00a      	b.n	800471a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004704:	f7fd fc1a 	bl	8001f3c <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d902      	bls.n	800471a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	f000 bd7e 	b.w	8005216 <HAL_RCC_OscConfig+0x109a>
 800471a:	2302      	movs	r3, #2
 800471c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004720:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004724:	fa93 f3a3 	rbit	r3, r3
 8004728:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800472c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004730:	fab3 f383 	clz	r3, r3
 8004734:	b2db      	uxtb	r3, r3
 8004736:	095b      	lsrs	r3, r3, #5
 8004738:	b2db      	uxtb	r3, r3
 800473a:	f043 0301 	orr.w	r3, r3, #1
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b01      	cmp	r3, #1
 8004742:	d105      	bne.n	8004750 <HAL_RCC_OscConfig+0x5d4>
 8004744:	4b01      	ldr	r3, [pc, #4]	; (800474c <HAL_RCC_OscConfig+0x5d0>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	e016      	b.n	8004778 <HAL_RCC_OscConfig+0x5fc>
 800474a:	bf00      	nop
 800474c:	40021000 	.word	0x40021000
 8004750:	2302      	movs	r3, #2
 8004752:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004756:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800475a:	fa93 f3a3 	rbit	r3, r3
 800475e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004762:	2302      	movs	r3, #2
 8004764:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004768:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800476c:	fa93 f3a3 	rbit	r3, r3
 8004770:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004774:	4bbf      	ldr	r3, [pc, #764]	; (8004a74 <HAL_RCC_OscConfig+0x8f8>)
 8004776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004778:	2202      	movs	r2, #2
 800477a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800477e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8004782:	fa92 f2a2 	rbit	r2, r2
 8004786:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800478a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800478e:	fab2 f282 	clz	r2, r2
 8004792:	b2d2      	uxtb	r2, r2
 8004794:	f042 0220 	orr.w	r2, r2, #32
 8004798:	b2d2      	uxtb	r2, r2
 800479a:	f002 021f 	and.w	r2, r2, #31
 800479e:	2101      	movs	r1, #1
 80047a0:	fa01 f202 	lsl.w	r2, r1, r2
 80047a4:	4013      	ands	r3, r2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1ac      	bne.n	8004704 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0308 	and.w	r3, r3, #8
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f000 8113 	beq.w	80049e6 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d07c      	beq.n	80048ca <HAL_RCC_OscConfig+0x74e>
 80047d0:	2301      	movs	r3, #1
 80047d2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047da:	fa93 f3a3 	rbit	r3, r3
 80047de:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80047e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047e6:	fab3 f383 	clz	r3, r3
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	461a      	mov	r2, r3
 80047ee:	4ba2      	ldr	r3, [pc, #648]	; (8004a78 <HAL_RCC_OscConfig+0x8fc>)
 80047f0:	4413      	add	r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	461a      	mov	r2, r3
 80047f6:	2301      	movs	r3, #1
 80047f8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047fa:	f7fd fb9f 	bl	8001f3c <HAL_GetTick>
 80047fe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004802:	e00a      	b.n	800481a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004804:	f7fd fb9a 	bl	8001f3c <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	2b02      	cmp	r3, #2
 8004812:	d902      	bls.n	800481a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	f000 bcfe 	b.w	8005216 <HAL_RCC_OscConfig+0x109a>
 800481a:	2302      	movs	r3, #2
 800481c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004820:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004824:	fa93 f2a3 	rbit	r2, r3
 8004828:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800482c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004836:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800483a:	2202      	movs	r2, #2
 800483c:	601a      	str	r2, [r3, #0]
 800483e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004842:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	fa93 f2a3 	rbit	r2, r3
 800484c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004850:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800485a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800485e:	2202      	movs	r2, #2
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004866:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	fa93 f2a3 	rbit	r2, r3
 8004870:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004874:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004878:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800487a:	4b7e      	ldr	r3, [pc, #504]	; (8004a74 <HAL_RCC_OscConfig+0x8f8>)
 800487c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800487e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004882:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004886:	2102      	movs	r1, #2
 8004888:	6019      	str	r1, [r3, #0]
 800488a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800488e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	fa93 f1a3 	rbit	r1, r3
 8004898:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800489c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80048a0:	6019      	str	r1, [r3, #0]
  return result;
 80048a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048a6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	fab3 f383 	clz	r3, r3
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	f003 031f 	and.w	r3, r3, #31
 80048bc:	2101      	movs	r1, #1
 80048be:	fa01 f303 	lsl.w	r3, r1, r3
 80048c2:	4013      	ands	r3, r2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d09d      	beq.n	8004804 <HAL_RCC_OscConfig+0x688>
 80048c8:	e08d      	b.n	80049e6 <HAL_RCC_OscConfig+0x86a>
 80048ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048ce:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80048d2:	2201      	movs	r2, #1
 80048d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048da:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	fa93 f2a3 	rbit	r2, r3
 80048e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048e8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80048ec:	601a      	str	r2, [r3, #0]
  return result;
 80048ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048f2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80048f6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048f8:	fab3 f383 	clz	r3, r3
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	461a      	mov	r2, r3
 8004900:	4b5d      	ldr	r3, [pc, #372]	; (8004a78 <HAL_RCC_OscConfig+0x8fc>)
 8004902:	4413      	add	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	461a      	mov	r2, r3
 8004908:	2300      	movs	r3, #0
 800490a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800490c:	f7fd fb16 	bl	8001f3c <HAL_GetTick>
 8004910:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004914:	e00a      	b.n	800492c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004916:	f7fd fb11 	bl	8001f3c <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d902      	bls.n	800492c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	f000 bc75 	b.w	8005216 <HAL_RCC_OscConfig+0x109a>
 800492c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004930:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004934:	2202      	movs	r2, #2
 8004936:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004938:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800493c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	fa93 f2a3 	rbit	r2, r3
 8004946:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800494a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004954:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004958:	2202      	movs	r2, #2
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004960:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	fa93 f2a3 	rbit	r2, r3
 800496a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800496e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004972:	601a      	str	r2, [r3, #0]
 8004974:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004978:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800497c:	2202      	movs	r2, #2
 800497e:	601a      	str	r2, [r3, #0]
 8004980:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004984:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	fa93 f2a3 	rbit	r2, r3
 800498e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004992:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004996:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004998:	4b36      	ldr	r3, [pc, #216]	; (8004a74 <HAL_RCC_OscConfig+0x8f8>)
 800499a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800499c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049a0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80049a4:	2102      	movs	r1, #2
 80049a6:	6019      	str	r1, [r3, #0]
 80049a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049ac:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	fa93 f1a3 	rbit	r1, r3
 80049b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049ba:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80049be:	6019      	str	r1, [r3, #0]
  return result;
 80049c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049c4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	fab3 f383 	clz	r3, r3
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	f003 031f 	and.w	r3, r3, #31
 80049da:	2101      	movs	r1, #1
 80049dc:	fa01 f303 	lsl.w	r3, r1, r3
 80049e0:	4013      	ands	r3, r2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d197      	bne.n	8004916 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0304 	and.w	r3, r3, #4
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f000 81a5 	beq.w	8004d46 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049fc:	2300      	movs	r3, #0
 80049fe:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a02:	4b1c      	ldr	r3, [pc, #112]	; (8004a74 <HAL_RCC_OscConfig+0x8f8>)
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d116      	bne.n	8004a3c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a0e:	4b19      	ldr	r3, [pc, #100]	; (8004a74 <HAL_RCC_OscConfig+0x8f8>)
 8004a10:	69db      	ldr	r3, [r3, #28]
 8004a12:	4a18      	ldr	r2, [pc, #96]	; (8004a74 <HAL_RCC_OscConfig+0x8f8>)
 8004a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a18:	61d3      	str	r3, [r2, #28]
 8004a1a:	4b16      	ldr	r3, [pc, #88]	; (8004a74 <HAL_RCC_OscConfig+0x8f8>)
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004a22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a2a:	601a      	str	r2, [r3, #0]
 8004a2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a34:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004a36:	2301      	movs	r3, #1
 8004a38:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a3c:	4b0f      	ldr	r3, [pc, #60]	; (8004a7c <HAL_RCC_OscConfig+0x900>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d121      	bne.n	8004a8c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a48:	4b0c      	ldr	r3, [pc, #48]	; (8004a7c <HAL_RCC_OscConfig+0x900>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a0b      	ldr	r2, [pc, #44]	; (8004a7c <HAL_RCC_OscConfig+0x900>)
 8004a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a52:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a54:	f7fd fa72 	bl	8001f3c <HAL_GetTick>
 8004a58:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a5c:	e010      	b.n	8004a80 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a5e:	f7fd fa6d 	bl	8001f3c <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b64      	cmp	r3, #100	; 0x64
 8004a6c:	d908      	bls.n	8004a80 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e3d1      	b.n	8005216 <HAL_RCC_OscConfig+0x109a>
 8004a72:	bf00      	nop
 8004a74:	40021000 	.word	0x40021000
 8004a78:	10908120 	.word	0x10908120
 8004a7c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a80:	4b8d      	ldr	r3, [pc, #564]	; (8004cb8 <HAL_RCC_OscConfig+0xb3c>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d0e8      	beq.n	8004a5e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a90:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d106      	bne.n	8004aaa <HAL_RCC_OscConfig+0x92e>
 8004a9c:	4b87      	ldr	r3, [pc, #540]	; (8004cbc <HAL_RCC_OscConfig+0xb40>)
 8004a9e:	6a1b      	ldr	r3, [r3, #32]
 8004aa0:	4a86      	ldr	r2, [pc, #536]	; (8004cbc <HAL_RCC_OscConfig+0xb40>)
 8004aa2:	f043 0301 	orr.w	r3, r3, #1
 8004aa6:	6213      	str	r3, [r2, #32]
 8004aa8:	e035      	b.n	8004b16 <HAL_RCC_OscConfig+0x99a>
 8004aaa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004aae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10c      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x958>
 8004aba:	4b80      	ldr	r3, [pc, #512]	; (8004cbc <HAL_RCC_OscConfig+0xb40>)
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	4a7f      	ldr	r2, [pc, #508]	; (8004cbc <HAL_RCC_OscConfig+0xb40>)
 8004ac0:	f023 0301 	bic.w	r3, r3, #1
 8004ac4:	6213      	str	r3, [r2, #32]
 8004ac6:	4b7d      	ldr	r3, [pc, #500]	; (8004cbc <HAL_RCC_OscConfig+0xb40>)
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	4a7c      	ldr	r2, [pc, #496]	; (8004cbc <HAL_RCC_OscConfig+0xb40>)
 8004acc:	f023 0304 	bic.w	r3, r3, #4
 8004ad0:	6213      	str	r3, [r2, #32]
 8004ad2:	e020      	b.n	8004b16 <HAL_RCC_OscConfig+0x99a>
 8004ad4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ad8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	2b05      	cmp	r3, #5
 8004ae2:	d10c      	bne.n	8004afe <HAL_RCC_OscConfig+0x982>
 8004ae4:	4b75      	ldr	r3, [pc, #468]	; (8004cbc <HAL_RCC_OscConfig+0xb40>)
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	4a74      	ldr	r2, [pc, #464]	; (8004cbc <HAL_RCC_OscConfig+0xb40>)
 8004aea:	f043 0304 	orr.w	r3, r3, #4
 8004aee:	6213      	str	r3, [r2, #32]
 8004af0:	4b72      	ldr	r3, [pc, #456]	; (8004cbc <HAL_RCC_OscConfig+0xb40>)
 8004af2:	6a1b      	ldr	r3, [r3, #32]
 8004af4:	4a71      	ldr	r2, [pc, #452]	; (8004cbc <HAL_RCC_OscConfig+0xb40>)
 8004af6:	f043 0301 	orr.w	r3, r3, #1
 8004afa:	6213      	str	r3, [r2, #32]
 8004afc:	e00b      	b.n	8004b16 <HAL_RCC_OscConfig+0x99a>
 8004afe:	4b6f      	ldr	r3, [pc, #444]	; (8004cbc <HAL_RCC_OscConfig+0xb40>)
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	4a6e      	ldr	r2, [pc, #440]	; (8004cbc <HAL_RCC_OscConfig+0xb40>)
 8004b04:	f023 0301 	bic.w	r3, r3, #1
 8004b08:	6213      	str	r3, [r2, #32]
 8004b0a:	4b6c      	ldr	r3, [pc, #432]	; (8004cbc <HAL_RCC_OscConfig+0xb40>)
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	4a6b      	ldr	r2, [pc, #428]	; (8004cbc <HAL_RCC_OscConfig+0xb40>)
 8004b10:	f023 0304 	bic.w	r3, r3, #4
 8004b14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b1a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f000 8081 	beq.w	8004c2a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b28:	f7fd fa08 	bl	8001f3c <HAL_GetTick>
 8004b2c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b30:	e00b      	b.n	8004b4a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b32:	f7fd fa03 	bl	8001f3c <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e365      	b.n	8005216 <HAL_RCC_OscConfig+0x109a>
 8004b4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b4e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004b52:	2202      	movs	r2, #2
 8004b54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b5a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	fa93 f2a3 	rbit	r2, r3
 8004b64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b68:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004b6c:	601a      	str	r2, [r3, #0]
 8004b6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b72:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004b76:	2202      	movs	r2, #2
 8004b78:	601a      	str	r2, [r3, #0]
 8004b7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b7e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	fa93 f2a3 	rbit	r2, r3
 8004b88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b8c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004b90:	601a      	str	r2, [r3, #0]
  return result;
 8004b92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b96:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004b9a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b9c:	fab3 f383 	clz	r3, r3
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	095b      	lsrs	r3, r3, #5
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	f043 0302 	orr.w	r3, r3, #2
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d102      	bne.n	8004bb6 <HAL_RCC_OscConfig+0xa3a>
 8004bb0:	4b42      	ldr	r3, [pc, #264]	; (8004cbc <HAL_RCC_OscConfig+0xb40>)
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	e013      	b.n	8004bde <HAL_RCC_OscConfig+0xa62>
 8004bb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bba:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bc6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	fa93 f2a3 	rbit	r2, r3
 8004bd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bd4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	4b38      	ldr	r3, [pc, #224]	; (8004cbc <HAL_RCC_OscConfig+0xb40>)
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bde:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004be2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004be6:	2102      	movs	r1, #2
 8004be8:	6011      	str	r1, [r2, #0]
 8004bea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004bee:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004bf2:	6812      	ldr	r2, [r2, #0]
 8004bf4:	fa92 f1a2 	rbit	r1, r2
 8004bf8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004bfc:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8004c00:	6011      	str	r1, [r2, #0]
  return result;
 8004c02:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004c06:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8004c0a:	6812      	ldr	r2, [r2, #0]
 8004c0c:	fab2 f282 	clz	r2, r2
 8004c10:	b2d2      	uxtb	r2, r2
 8004c12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c16:	b2d2      	uxtb	r2, r2
 8004c18:	f002 021f 	and.w	r2, r2, #31
 8004c1c:	2101      	movs	r1, #1
 8004c1e:	fa01 f202 	lsl.w	r2, r1, r2
 8004c22:	4013      	ands	r3, r2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d084      	beq.n	8004b32 <HAL_RCC_OscConfig+0x9b6>
 8004c28:	e083      	b.n	8004d32 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c2a:	f7fd f987 	bl	8001f3c <HAL_GetTick>
 8004c2e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c32:	e00b      	b.n	8004c4c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c34:	f7fd f982 	bl	8001f3c <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d901      	bls.n	8004c4c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e2e4      	b.n	8005216 <HAL_RCC_OscConfig+0x109a>
 8004c4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c50:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004c54:	2202      	movs	r2, #2
 8004c56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c5c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	fa93 f2a3 	rbit	r2, r3
 8004c66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c6a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004c6e:	601a      	str	r2, [r3, #0]
 8004c70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c74:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004c78:	2202      	movs	r2, #2
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c80:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	fa93 f2a3 	rbit	r2, r3
 8004c8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c8e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004c92:	601a      	str	r2, [r3, #0]
  return result;
 8004c94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c98:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004c9c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c9e:	fab3 f383 	clz	r3, r3
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	095b      	lsrs	r3, r3, #5
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	f043 0302 	orr.w	r3, r3, #2
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d106      	bne.n	8004cc0 <HAL_RCC_OscConfig+0xb44>
 8004cb2:	4b02      	ldr	r3, [pc, #8]	; (8004cbc <HAL_RCC_OscConfig+0xb40>)
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	e017      	b.n	8004ce8 <HAL_RCC_OscConfig+0xb6c>
 8004cb8:	40007000 	.word	0x40007000
 8004cbc:	40021000 	.word	0x40021000
 8004cc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cc4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004cc8:	2202      	movs	r2, #2
 8004cca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ccc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cd0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	fa93 f2a3 	rbit	r2, r3
 8004cda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cde:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004ce2:	601a      	str	r2, [r3, #0]
 8004ce4:	4bb3      	ldr	r3, [pc, #716]	; (8004fb4 <HAL_RCC_OscConfig+0xe38>)
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004cec:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004cf0:	2102      	movs	r1, #2
 8004cf2:	6011      	str	r1, [r2, #0]
 8004cf4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004cf8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004cfc:	6812      	ldr	r2, [r2, #0]
 8004cfe:	fa92 f1a2 	rbit	r1, r2
 8004d02:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004d06:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004d0a:	6011      	str	r1, [r2, #0]
  return result;
 8004d0c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004d10:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004d14:	6812      	ldr	r2, [r2, #0]
 8004d16:	fab2 f282 	clz	r2, r2
 8004d1a:	b2d2      	uxtb	r2, r2
 8004d1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d20:	b2d2      	uxtb	r2, r2
 8004d22:	f002 021f 	and.w	r2, r2, #31
 8004d26:	2101      	movs	r1, #1
 8004d28:	fa01 f202 	lsl.w	r2, r1, r2
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d180      	bne.n	8004c34 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004d32:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d105      	bne.n	8004d46 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d3a:	4b9e      	ldr	r3, [pc, #632]	; (8004fb4 <HAL_RCC_OscConfig+0xe38>)
 8004d3c:	69db      	ldr	r3, [r3, #28]
 8004d3e:	4a9d      	ldr	r2, [pc, #628]	; (8004fb4 <HAL_RCC_OscConfig+0xe38>)
 8004d40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d44:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d4a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f000 825e 	beq.w	8005214 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d58:	4b96      	ldr	r3, [pc, #600]	; (8004fb4 <HAL_RCC_OscConfig+0xe38>)
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f003 030c 	and.w	r3, r3, #12
 8004d60:	2b08      	cmp	r3, #8
 8004d62:	f000 821f 	beq.w	80051a4 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d6a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	f040 8170 	bne.w	8005058 <HAL_RCC_OscConfig+0xedc>
 8004d78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d7c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004d80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d8a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	fa93 f2a3 	rbit	r2, r3
 8004d94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d98:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004d9c:	601a      	str	r2, [r3, #0]
  return result;
 8004d9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004da2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004da6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004da8:	fab3 f383 	clz	r3, r3
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004db2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	461a      	mov	r2, r3
 8004dba:	2300      	movs	r3, #0
 8004dbc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dbe:	f7fd f8bd 	bl	8001f3c <HAL_GetTick>
 8004dc2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dc6:	e009      	b.n	8004ddc <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dc8:	f7fd f8b8 	bl	8001f3c <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d901      	bls.n	8004ddc <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e21c      	b.n	8005216 <HAL_RCC_OscConfig+0x109a>
 8004ddc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004de0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004de4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004de8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004dee:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	fa93 f2a3 	rbit	r2, r3
 8004df8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004dfc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004e00:	601a      	str	r2, [r3, #0]
  return result;
 8004e02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e06:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004e0a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e0c:	fab3 f383 	clz	r3, r3
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	095b      	lsrs	r3, r3, #5
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	f043 0301 	orr.w	r3, r3, #1
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d102      	bne.n	8004e26 <HAL_RCC_OscConfig+0xcaa>
 8004e20:	4b64      	ldr	r3, [pc, #400]	; (8004fb4 <HAL_RCC_OscConfig+0xe38>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	e027      	b.n	8004e76 <HAL_RCC_OscConfig+0xcfa>
 8004e26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e2a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004e2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e38:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	fa93 f2a3 	rbit	r2, r3
 8004e42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e46:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004e4a:	601a      	str	r2, [r3, #0]
 8004e4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e50:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004e54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e58:	601a      	str	r2, [r3, #0]
 8004e5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e5e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	fa93 f2a3 	rbit	r2, r3
 8004e68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e6c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004e70:	601a      	str	r2, [r3, #0]
 8004e72:	4b50      	ldr	r3, [pc, #320]	; (8004fb4 <HAL_RCC_OscConfig+0xe38>)
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004e7a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004e7e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004e82:	6011      	str	r1, [r2, #0]
 8004e84:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004e88:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004e8c:	6812      	ldr	r2, [r2, #0]
 8004e8e:	fa92 f1a2 	rbit	r1, r2
 8004e92:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004e96:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004e9a:	6011      	str	r1, [r2, #0]
  return result;
 8004e9c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004ea0:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004ea4:	6812      	ldr	r2, [r2, #0]
 8004ea6:	fab2 f282 	clz	r2, r2
 8004eaa:	b2d2      	uxtb	r2, r2
 8004eac:	f042 0220 	orr.w	r2, r2, #32
 8004eb0:	b2d2      	uxtb	r2, r2
 8004eb2:	f002 021f 	and.w	r2, r2, #31
 8004eb6:	2101      	movs	r1, #1
 8004eb8:	fa01 f202 	lsl.w	r2, r1, r2
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d182      	bne.n	8004dc8 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ec2:	4b3c      	ldr	r3, [pc, #240]	; (8004fb4 <HAL_RCC_OscConfig+0xe38>)
 8004ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec6:	f023 020f 	bic.w	r2, r3, #15
 8004eca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ece:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed6:	4937      	ldr	r1, [pc, #220]	; (8004fb4 <HAL_RCC_OscConfig+0xe38>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004edc:	4b35      	ldr	r3, [pc, #212]	; (8004fb4 <HAL_RCC_OscConfig+0xe38>)
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004ee4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ee8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	6a19      	ldr	r1, [r3, #32]
 8004ef0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ef4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	69db      	ldr	r3, [r3, #28]
 8004efc:	430b      	orrs	r3, r1
 8004efe:	492d      	ldr	r1, [pc, #180]	; (8004fb4 <HAL_RCC_OscConfig+0xe38>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	604b      	str	r3, [r1, #4]
 8004f04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f08:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004f0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f16:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	fa93 f2a3 	rbit	r2, r3
 8004f20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f24:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004f28:	601a      	str	r2, [r3, #0]
  return result;
 8004f2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f2e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004f32:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f34:	fab3 f383 	clz	r3, r3
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004f3e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	461a      	mov	r2, r3
 8004f46:	2301      	movs	r3, #1
 8004f48:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f4a:	f7fc fff7 	bl	8001f3c <HAL_GetTick>
 8004f4e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f52:	e009      	b.n	8004f68 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f54:	f7fc fff2 	bl	8001f3c <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d901      	bls.n	8004f68 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e156      	b.n	8005216 <HAL_RCC_OscConfig+0x109a>
 8004f68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f6c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004f70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f7a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	fa93 f2a3 	rbit	r2, r3
 8004f84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f88:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004f8c:	601a      	str	r2, [r3, #0]
  return result;
 8004f8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f92:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004f96:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f98:	fab3 f383 	clz	r3, r3
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	095b      	lsrs	r3, r3, #5
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	f043 0301 	orr.w	r3, r3, #1
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d105      	bne.n	8004fb8 <HAL_RCC_OscConfig+0xe3c>
 8004fac:	4b01      	ldr	r3, [pc, #4]	; (8004fb4 <HAL_RCC_OscConfig+0xe38>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	e02a      	b.n	8005008 <HAL_RCC_OscConfig+0xe8c>
 8004fb2:	bf00      	nop
 8004fb4:	40021000 	.word	0x40021000
 8004fb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fbc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004fc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fca:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	fa93 f2a3 	rbit	r2, r3
 8004fd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fd8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fe2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004fe6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ff0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	fa93 f2a3 	rbit	r2, r3
 8004ffa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ffe:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8005002:	601a      	str	r2, [r3, #0]
 8005004:	4b86      	ldr	r3, [pc, #536]	; (8005220 <HAL_RCC_OscConfig+0x10a4>)
 8005006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005008:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800500c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005010:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005014:	6011      	str	r1, [r2, #0]
 8005016:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800501a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800501e:	6812      	ldr	r2, [r2, #0]
 8005020:	fa92 f1a2 	rbit	r1, r2
 8005024:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005028:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800502c:	6011      	str	r1, [r2, #0]
  return result;
 800502e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005032:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8005036:	6812      	ldr	r2, [r2, #0]
 8005038:	fab2 f282 	clz	r2, r2
 800503c:	b2d2      	uxtb	r2, r2
 800503e:	f042 0220 	orr.w	r2, r2, #32
 8005042:	b2d2      	uxtb	r2, r2
 8005044:	f002 021f 	and.w	r2, r2, #31
 8005048:	2101      	movs	r1, #1
 800504a:	fa01 f202 	lsl.w	r2, r1, r2
 800504e:	4013      	ands	r3, r2
 8005050:	2b00      	cmp	r3, #0
 8005052:	f43f af7f 	beq.w	8004f54 <HAL_RCC_OscConfig+0xdd8>
 8005056:	e0dd      	b.n	8005214 <HAL_RCC_OscConfig+0x1098>
 8005058:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800505c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005060:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005064:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005066:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800506a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	fa93 f2a3 	rbit	r2, r3
 8005074:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005078:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800507c:	601a      	str	r2, [r3, #0]
  return result;
 800507e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005082:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005086:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005088:	fab3 f383 	clz	r3, r3
 800508c:	b2db      	uxtb	r3, r3
 800508e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005092:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	461a      	mov	r2, r3
 800509a:	2300      	movs	r3, #0
 800509c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800509e:	f7fc ff4d 	bl	8001f3c <HAL_GetTick>
 80050a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050a6:	e009      	b.n	80050bc <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050a8:	f7fc ff48 	bl	8001f3c <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e0ac      	b.n	8005216 <HAL_RCC_OscConfig+0x109a>
 80050bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050c0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80050c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80050c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050ce:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	fa93 f2a3 	rbit	r2, r3
 80050d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050dc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80050e0:	601a      	str	r2, [r3, #0]
  return result;
 80050e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050e6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80050ea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050ec:	fab3 f383 	clz	r3, r3
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	095b      	lsrs	r3, r3, #5
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	f043 0301 	orr.w	r3, r3, #1
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d102      	bne.n	8005106 <HAL_RCC_OscConfig+0xf8a>
 8005100:	4b47      	ldr	r3, [pc, #284]	; (8005220 <HAL_RCC_OscConfig+0x10a4>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	e027      	b.n	8005156 <HAL_RCC_OscConfig+0xfda>
 8005106:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800510a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800510e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005112:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005114:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005118:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	fa93 f2a3 	rbit	r2, r3
 8005122:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005126:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800512a:	601a      	str	r2, [r3, #0]
 800512c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005130:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005134:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800513e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	fa93 f2a3 	rbit	r2, r3
 8005148:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800514c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	4b33      	ldr	r3, [pc, #204]	; (8005220 <HAL_RCC_OscConfig+0x10a4>)
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800515a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800515e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005162:	6011      	str	r1, [r2, #0]
 8005164:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005168:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800516c:	6812      	ldr	r2, [r2, #0]
 800516e:	fa92 f1a2 	rbit	r1, r2
 8005172:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005176:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800517a:	6011      	str	r1, [r2, #0]
  return result;
 800517c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005180:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8005184:	6812      	ldr	r2, [r2, #0]
 8005186:	fab2 f282 	clz	r2, r2
 800518a:	b2d2      	uxtb	r2, r2
 800518c:	f042 0220 	orr.w	r2, r2, #32
 8005190:	b2d2      	uxtb	r2, r2
 8005192:	f002 021f 	and.w	r2, r2, #31
 8005196:	2101      	movs	r1, #1
 8005198:	fa01 f202 	lsl.w	r2, r1, r2
 800519c:	4013      	ands	r3, r2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d182      	bne.n	80050a8 <HAL_RCC_OscConfig+0xf2c>
 80051a2:	e037      	b.n	8005214 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051a8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d101      	bne.n	80051b8 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e02e      	b.n	8005216 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80051b8:	4b19      	ldr	r3, [pc, #100]	; (8005220 <HAL_RCC_OscConfig+0x10a4>)
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80051c0:	4b17      	ldr	r3, [pc, #92]	; (8005220 <HAL_RCC_OscConfig+0x10a4>)
 80051c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80051c8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80051cc:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80051d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	69db      	ldr	r3, [r3, #28]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d117      	bne.n	8005210 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80051e0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80051e4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80051e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d10b      	bne.n	8005210 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80051f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80051fc:	f003 020f 	and.w	r2, r3, #15
 8005200:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005204:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800520c:	429a      	cmp	r2, r3
 800520e:	d001      	beq.n	8005214 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e000      	b.n	8005216 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	40021000 	.word	0x40021000

08005224 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b09e      	sub	sp, #120	; 0x78
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e162      	b.n	8005502 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800523c:	4b90      	ldr	r3, [pc, #576]	; (8005480 <HAL_RCC_ClockConfig+0x25c>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0307 	and.w	r3, r3, #7
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	429a      	cmp	r2, r3
 8005248:	d910      	bls.n	800526c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800524a:	4b8d      	ldr	r3, [pc, #564]	; (8005480 <HAL_RCC_ClockConfig+0x25c>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f023 0207 	bic.w	r2, r3, #7
 8005252:	498b      	ldr	r1, [pc, #556]	; (8005480 <HAL_RCC_ClockConfig+0x25c>)
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	4313      	orrs	r3, r2
 8005258:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800525a:	4b89      	ldr	r3, [pc, #548]	; (8005480 <HAL_RCC_ClockConfig+0x25c>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0307 	and.w	r3, r3, #7
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	429a      	cmp	r2, r3
 8005266:	d001      	beq.n	800526c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e14a      	b.n	8005502 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	2b00      	cmp	r3, #0
 8005276:	d008      	beq.n	800528a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005278:	4b82      	ldr	r3, [pc, #520]	; (8005484 <HAL_RCC_ClockConfig+0x260>)
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	497f      	ldr	r1, [pc, #508]	; (8005484 <HAL_RCC_ClockConfig+0x260>)
 8005286:	4313      	orrs	r3, r2
 8005288:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b00      	cmp	r3, #0
 8005294:	f000 80dc 	beq.w	8005450 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d13c      	bne.n	800531a <HAL_RCC_ClockConfig+0xf6>
 80052a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80052a4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052a8:	fa93 f3a3 	rbit	r3, r3
 80052ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80052ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052b0:	fab3 f383 	clz	r3, r3
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	095b      	lsrs	r3, r3, #5
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	f043 0301 	orr.w	r3, r3, #1
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d102      	bne.n	80052ca <HAL_RCC_ClockConfig+0xa6>
 80052c4:	4b6f      	ldr	r3, [pc, #444]	; (8005484 <HAL_RCC_ClockConfig+0x260>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	e00f      	b.n	80052ea <HAL_RCC_ClockConfig+0xc6>
 80052ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80052ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052d2:	fa93 f3a3 	rbit	r3, r3
 80052d6:	667b      	str	r3, [r7, #100]	; 0x64
 80052d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80052dc:	663b      	str	r3, [r7, #96]	; 0x60
 80052de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052e0:	fa93 f3a3 	rbit	r3, r3
 80052e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052e6:	4b67      	ldr	r3, [pc, #412]	; (8005484 <HAL_RCC_ClockConfig+0x260>)
 80052e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80052ee:	65ba      	str	r2, [r7, #88]	; 0x58
 80052f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052f2:	fa92 f2a2 	rbit	r2, r2
 80052f6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80052f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80052fa:	fab2 f282 	clz	r2, r2
 80052fe:	b2d2      	uxtb	r2, r2
 8005300:	f042 0220 	orr.w	r2, r2, #32
 8005304:	b2d2      	uxtb	r2, r2
 8005306:	f002 021f 	and.w	r2, r2, #31
 800530a:	2101      	movs	r1, #1
 800530c:	fa01 f202 	lsl.w	r2, r1, r2
 8005310:	4013      	ands	r3, r2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d17b      	bne.n	800540e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e0f3      	b.n	8005502 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	2b02      	cmp	r3, #2
 8005320:	d13c      	bne.n	800539c <HAL_RCC_ClockConfig+0x178>
 8005322:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005326:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005328:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800532a:	fa93 f3a3 	rbit	r3, r3
 800532e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005332:	fab3 f383 	clz	r3, r3
 8005336:	b2db      	uxtb	r3, r3
 8005338:	095b      	lsrs	r3, r3, #5
 800533a:	b2db      	uxtb	r3, r3
 800533c:	f043 0301 	orr.w	r3, r3, #1
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b01      	cmp	r3, #1
 8005344:	d102      	bne.n	800534c <HAL_RCC_ClockConfig+0x128>
 8005346:	4b4f      	ldr	r3, [pc, #316]	; (8005484 <HAL_RCC_ClockConfig+0x260>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	e00f      	b.n	800536c <HAL_RCC_ClockConfig+0x148>
 800534c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005350:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005354:	fa93 f3a3 	rbit	r3, r3
 8005358:	647b      	str	r3, [r7, #68]	; 0x44
 800535a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800535e:	643b      	str	r3, [r7, #64]	; 0x40
 8005360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005362:	fa93 f3a3 	rbit	r3, r3
 8005366:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005368:	4b46      	ldr	r3, [pc, #280]	; (8005484 <HAL_RCC_ClockConfig+0x260>)
 800536a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005370:	63ba      	str	r2, [r7, #56]	; 0x38
 8005372:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005374:	fa92 f2a2 	rbit	r2, r2
 8005378:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800537a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800537c:	fab2 f282 	clz	r2, r2
 8005380:	b2d2      	uxtb	r2, r2
 8005382:	f042 0220 	orr.w	r2, r2, #32
 8005386:	b2d2      	uxtb	r2, r2
 8005388:	f002 021f 	and.w	r2, r2, #31
 800538c:	2101      	movs	r1, #1
 800538e:	fa01 f202 	lsl.w	r2, r1, r2
 8005392:	4013      	ands	r3, r2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d13a      	bne.n	800540e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e0b2      	b.n	8005502 <HAL_RCC_ClockConfig+0x2de>
 800539c:	2302      	movs	r3, #2
 800539e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a2:	fa93 f3a3 	rbit	r3, r3
 80053a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80053a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053aa:	fab3 f383 	clz	r3, r3
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	095b      	lsrs	r3, r3, #5
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	f043 0301 	orr.w	r3, r3, #1
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d102      	bne.n	80053c4 <HAL_RCC_ClockConfig+0x1a0>
 80053be:	4b31      	ldr	r3, [pc, #196]	; (8005484 <HAL_RCC_ClockConfig+0x260>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	e00d      	b.n	80053e0 <HAL_RCC_ClockConfig+0x1bc>
 80053c4:	2302      	movs	r3, #2
 80053c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ca:	fa93 f3a3 	rbit	r3, r3
 80053ce:	627b      	str	r3, [r7, #36]	; 0x24
 80053d0:	2302      	movs	r3, #2
 80053d2:	623b      	str	r3, [r7, #32]
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	fa93 f3a3 	rbit	r3, r3
 80053da:	61fb      	str	r3, [r7, #28]
 80053dc:	4b29      	ldr	r3, [pc, #164]	; (8005484 <HAL_RCC_ClockConfig+0x260>)
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	2202      	movs	r2, #2
 80053e2:	61ba      	str	r2, [r7, #24]
 80053e4:	69ba      	ldr	r2, [r7, #24]
 80053e6:	fa92 f2a2 	rbit	r2, r2
 80053ea:	617a      	str	r2, [r7, #20]
  return result;
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	fab2 f282 	clz	r2, r2
 80053f2:	b2d2      	uxtb	r2, r2
 80053f4:	f042 0220 	orr.w	r2, r2, #32
 80053f8:	b2d2      	uxtb	r2, r2
 80053fa:	f002 021f 	and.w	r2, r2, #31
 80053fe:	2101      	movs	r1, #1
 8005400:	fa01 f202 	lsl.w	r2, r1, r2
 8005404:	4013      	ands	r3, r2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e079      	b.n	8005502 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800540e:	4b1d      	ldr	r3, [pc, #116]	; (8005484 <HAL_RCC_ClockConfig+0x260>)
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f023 0203 	bic.w	r2, r3, #3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	491a      	ldr	r1, [pc, #104]	; (8005484 <HAL_RCC_ClockConfig+0x260>)
 800541c:	4313      	orrs	r3, r2
 800541e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005420:	f7fc fd8c 	bl	8001f3c <HAL_GetTick>
 8005424:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005426:	e00a      	b.n	800543e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005428:	f7fc fd88 	bl	8001f3c <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	f241 3288 	movw	r2, #5000	; 0x1388
 8005436:	4293      	cmp	r3, r2
 8005438:	d901      	bls.n	800543e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e061      	b.n	8005502 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800543e:	4b11      	ldr	r3, [pc, #68]	; (8005484 <HAL_RCC_ClockConfig+0x260>)
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f003 020c 	and.w	r2, r3, #12
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	429a      	cmp	r2, r3
 800544e:	d1eb      	bne.n	8005428 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005450:	4b0b      	ldr	r3, [pc, #44]	; (8005480 <HAL_RCC_ClockConfig+0x25c>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0307 	and.w	r3, r3, #7
 8005458:	683a      	ldr	r2, [r7, #0]
 800545a:	429a      	cmp	r2, r3
 800545c:	d214      	bcs.n	8005488 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800545e:	4b08      	ldr	r3, [pc, #32]	; (8005480 <HAL_RCC_ClockConfig+0x25c>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f023 0207 	bic.w	r2, r3, #7
 8005466:	4906      	ldr	r1, [pc, #24]	; (8005480 <HAL_RCC_ClockConfig+0x25c>)
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	4313      	orrs	r3, r2
 800546c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800546e:	4b04      	ldr	r3, [pc, #16]	; (8005480 <HAL_RCC_ClockConfig+0x25c>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0307 	and.w	r3, r3, #7
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	429a      	cmp	r2, r3
 800547a:	d005      	beq.n	8005488 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e040      	b.n	8005502 <HAL_RCC_ClockConfig+0x2de>
 8005480:	40022000 	.word	0x40022000
 8005484:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0304 	and.w	r3, r3, #4
 8005490:	2b00      	cmp	r3, #0
 8005492:	d008      	beq.n	80054a6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005494:	4b1d      	ldr	r3, [pc, #116]	; (800550c <HAL_RCC_ClockConfig+0x2e8>)
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	491a      	ldr	r1, [pc, #104]	; (800550c <HAL_RCC_ClockConfig+0x2e8>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0308 	and.w	r3, r3, #8
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d009      	beq.n	80054c6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054b2:	4b16      	ldr	r3, [pc, #88]	; (800550c <HAL_RCC_ClockConfig+0x2e8>)
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	00db      	lsls	r3, r3, #3
 80054c0:	4912      	ldr	r1, [pc, #72]	; (800550c <HAL_RCC_ClockConfig+0x2e8>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80054c6:	f000 f829 	bl	800551c <HAL_RCC_GetSysClockFreq>
 80054ca:	4601      	mov	r1, r0
 80054cc:	4b0f      	ldr	r3, [pc, #60]	; (800550c <HAL_RCC_ClockConfig+0x2e8>)
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054d4:	22f0      	movs	r2, #240	; 0xf0
 80054d6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	fa92 f2a2 	rbit	r2, r2
 80054de:	60fa      	str	r2, [r7, #12]
  return result;
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	fab2 f282 	clz	r2, r2
 80054e6:	b2d2      	uxtb	r2, r2
 80054e8:	40d3      	lsrs	r3, r2
 80054ea:	4a09      	ldr	r2, [pc, #36]	; (8005510 <HAL_RCC_ClockConfig+0x2ec>)
 80054ec:	5cd3      	ldrb	r3, [r2, r3]
 80054ee:	fa21 f303 	lsr.w	r3, r1, r3
 80054f2:	4a08      	ldr	r2, [pc, #32]	; (8005514 <HAL_RCC_ClockConfig+0x2f0>)
 80054f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80054f6:	4b08      	ldr	r3, [pc, #32]	; (8005518 <HAL_RCC_ClockConfig+0x2f4>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7fc fcda 	bl	8001eb4 <HAL_InitTick>
  
  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3778      	adds	r7, #120	; 0x78
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	40021000 	.word	0x40021000
 8005510:	0800d198 	.word	0x0800d198
 8005514:	20000004 	.word	0x20000004
 8005518:	20000008 	.word	0x20000008

0800551c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800551c:	b480      	push	{r7}
 800551e:	b08b      	sub	sp, #44	; 0x2c
 8005520:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005522:	2300      	movs	r3, #0
 8005524:	61fb      	str	r3, [r7, #28]
 8005526:	2300      	movs	r3, #0
 8005528:	61bb      	str	r3, [r7, #24]
 800552a:	2300      	movs	r3, #0
 800552c:	627b      	str	r3, [r7, #36]	; 0x24
 800552e:	2300      	movs	r3, #0
 8005530:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005532:	2300      	movs	r3, #0
 8005534:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005536:	4b2a      	ldr	r3, [pc, #168]	; (80055e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	f003 030c 	and.w	r3, r3, #12
 8005542:	2b04      	cmp	r3, #4
 8005544:	d002      	beq.n	800554c <HAL_RCC_GetSysClockFreq+0x30>
 8005546:	2b08      	cmp	r3, #8
 8005548:	d003      	beq.n	8005552 <HAL_RCC_GetSysClockFreq+0x36>
 800554a:	e03f      	b.n	80055cc <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800554c:	4b25      	ldr	r3, [pc, #148]	; (80055e4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800554e:	623b      	str	r3, [r7, #32]
      break;
 8005550:	e03f      	b.n	80055d2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005558:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800555c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	fa92 f2a2 	rbit	r2, r2
 8005564:	607a      	str	r2, [r7, #4]
  return result;
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	fab2 f282 	clz	r2, r2
 800556c:	b2d2      	uxtb	r2, r2
 800556e:	40d3      	lsrs	r3, r2
 8005570:	4a1d      	ldr	r2, [pc, #116]	; (80055e8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005572:	5cd3      	ldrb	r3, [r2, r3]
 8005574:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005576:	4b1a      	ldr	r3, [pc, #104]	; (80055e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557a:	f003 030f 	and.w	r3, r3, #15
 800557e:	220f      	movs	r2, #15
 8005580:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	fa92 f2a2 	rbit	r2, r2
 8005588:	60fa      	str	r2, [r7, #12]
  return result;
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	fab2 f282 	clz	r2, r2
 8005590:	b2d2      	uxtb	r2, r2
 8005592:	40d3      	lsrs	r3, r2
 8005594:	4a15      	ldr	r2, [pc, #84]	; (80055ec <HAL_RCC_GetSysClockFreq+0xd0>)
 8005596:	5cd3      	ldrb	r3, [r2, r3]
 8005598:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d008      	beq.n	80055b6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80055a4:	4a0f      	ldr	r2, [pc, #60]	; (80055e4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	fb02 f303 	mul.w	r3, r2, r3
 80055b2:	627b      	str	r3, [r7, #36]	; 0x24
 80055b4:	e007      	b.n	80055c6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80055b6:	4a0b      	ldr	r2, [pc, #44]	; (80055e4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	fb02 f303 	mul.w	r3, r2, r3
 80055c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	623b      	str	r3, [r7, #32]
      break;
 80055ca:	e002      	b.n	80055d2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80055cc:	4b05      	ldr	r3, [pc, #20]	; (80055e4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80055ce:	623b      	str	r3, [r7, #32]
      break;
 80055d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055d2:	6a3b      	ldr	r3, [r7, #32]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	372c      	adds	r7, #44	; 0x2c
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	40021000 	.word	0x40021000
 80055e4:	007a1200 	.word	0x007a1200
 80055e8:	0800d1b0 	.word	0x0800d1b0
 80055ec:	0800d1c0 	.word	0x0800d1c0

080055f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055f0:	b480      	push	{r7}
 80055f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055f4:	4b03      	ldr	r3, [pc, #12]	; (8005604 <HAL_RCC_GetHCLKFreq+0x14>)
 80055f6:	681b      	ldr	r3, [r3, #0]
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	20000004 	.word	0x20000004

08005608 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800560e:	f7ff ffef 	bl	80055f0 <HAL_RCC_GetHCLKFreq>
 8005612:	4601      	mov	r1, r0
 8005614:	4b0b      	ldr	r3, [pc, #44]	; (8005644 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800561c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005620:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	fa92 f2a2 	rbit	r2, r2
 8005628:	603a      	str	r2, [r7, #0]
  return result;
 800562a:	683a      	ldr	r2, [r7, #0]
 800562c:	fab2 f282 	clz	r2, r2
 8005630:	b2d2      	uxtb	r2, r2
 8005632:	40d3      	lsrs	r3, r2
 8005634:	4a04      	ldr	r2, [pc, #16]	; (8005648 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005636:	5cd3      	ldrb	r3, [r2, r3]
 8005638:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800563c:	4618      	mov	r0, r3
 800563e:	3708      	adds	r7, #8
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	40021000 	.word	0x40021000
 8005648:	0800d1a8 	.word	0x0800d1a8

0800564c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005652:	f7ff ffcd 	bl	80055f0 <HAL_RCC_GetHCLKFreq>
 8005656:	4601      	mov	r1, r0
 8005658:	4b0b      	ldr	r3, [pc, #44]	; (8005688 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005660:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005664:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	fa92 f2a2 	rbit	r2, r2
 800566c:	603a      	str	r2, [r7, #0]
  return result;
 800566e:	683a      	ldr	r2, [r7, #0]
 8005670:	fab2 f282 	clz	r2, r2
 8005674:	b2d2      	uxtb	r2, r2
 8005676:	40d3      	lsrs	r3, r2
 8005678:	4a04      	ldr	r2, [pc, #16]	; (800568c <HAL_RCC_GetPCLK2Freq+0x40>)
 800567a:	5cd3      	ldrb	r3, [r2, r3]
 800567c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005680:	4618      	mov	r0, r3
 8005682:	3708      	adds	r7, #8
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	40021000 	.word	0x40021000
 800568c:	0800d1a8 	.word	0x0800d1a8

08005690 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b092      	sub	sp, #72	; 0x48
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005698:	2300      	movs	r3, #0
 800569a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800569c:	2300      	movs	r3, #0
 800569e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80056a0:	2300      	movs	r3, #0
 80056a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f000 80d4 	beq.w	800585c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056b4:	4b4e      	ldr	r3, [pc, #312]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056b6:	69db      	ldr	r3, [r3, #28]
 80056b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10e      	bne.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056c0:	4b4b      	ldr	r3, [pc, #300]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056c2:	69db      	ldr	r3, [r3, #28]
 80056c4:	4a4a      	ldr	r2, [pc, #296]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056ca:	61d3      	str	r3, [r2, #28]
 80056cc:	4b48      	ldr	r3, [pc, #288]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056ce:	69db      	ldr	r3, [r3, #28]
 80056d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056d4:	60bb      	str	r3, [r7, #8]
 80056d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056d8:	2301      	movs	r3, #1
 80056da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056de:	4b45      	ldr	r3, [pc, #276]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d118      	bne.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056ea:	4b42      	ldr	r3, [pc, #264]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a41      	ldr	r2, [pc, #260]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056f4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056f6:	f7fc fc21 	bl	8001f3c <HAL_GetTick>
 80056fa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056fc:	e008      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056fe:	f7fc fc1d 	bl	8001f3c <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	2b64      	cmp	r3, #100	; 0x64
 800570a:	d901      	bls.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e1d6      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005710:	4b38      	ldr	r3, [pc, #224]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005718:	2b00      	cmp	r3, #0
 800571a:	d0f0      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800571c:	4b34      	ldr	r3, [pc, #208]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800571e:	6a1b      	ldr	r3, [r3, #32]
 8005720:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005724:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 8084 	beq.w	8005836 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005736:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005738:	429a      	cmp	r2, r3
 800573a:	d07c      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800573c:	4b2c      	ldr	r3, [pc, #176]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800573e:	6a1b      	ldr	r3, [r3, #32]
 8005740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005744:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005746:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800574a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800574c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574e:	fa93 f3a3 	rbit	r3, r3
 8005752:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005756:	fab3 f383 	clz	r3, r3
 800575a:	b2db      	uxtb	r3, r3
 800575c:	461a      	mov	r2, r3
 800575e:	4b26      	ldr	r3, [pc, #152]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005760:	4413      	add	r3, r2
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	461a      	mov	r2, r3
 8005766:	2301      	movs	r3, #1
 8005768:	6013      	str	r3, [r2, #0]
 800576a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800576e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005772:	fa93 f3a3 	rbit	r3, r3
 8005776:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800577a:	fab3 f383 	clz	r3, r3
 800577e:	b2db      	uxtb	r3, r3
 8005780:	461a      	mov	r2, r3
 8005782:	4b1d      	ldr	r3, [pc, #116]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005784:	4413      	add	r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	461a      	mov	r2, r3
 800578a:	2300      	movs	r3, #0
 800578c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800578e:	4a18      	ldr	r2, [pc, #96]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005792:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b00      	cmp	r3, #0
 800579c:	d04b      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800579e:	f7fc fbcd 	bl	8001f3c <HAL_GetTick>
 80057a2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057a4:	e00a      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057a6:	f7fc fbc9 	bl	8001f3c <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d901      	bls.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e180      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80057bc:	2302      	movs	r3, #2
 80057be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c2:	fa93 f3a3 	rbit	r3, r3
 80057c6:	627b      	str	r3, [r7, #36]	; 0x24
 80057c8:	2302      	movs	r3, #2
 80057ca:	623b      	str	r3, [r7, #32]
 80057cc:	6a3b      	ldr	r3, [r7, #32]
 80057ce:	fa93 f3a3 	rbit	r3, r3
 80057d2:	61fb      	str	r3, [r7, #28]
  return result;
 80057d4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057d6:	fab3 f383 	clz	r3, r3
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	095b      	lsrs	r3, r3, #5
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	f043 0302 	orr.w	r3, r3, #2
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d108      	bne.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80057ea:	4b01      	ldr	r3, [pc, #4]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	e00d      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80057f0:	40021000 	.word	0x40021000
 80057f4:	40007000 	.word	0x40007000
 80057f8:	10908100 	.word	0x10908100
 80057fc:	2302      	movs	r3, #2
 80057fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	fa93 f3a3 	rbit	r3, r3
 8005806:	617b      	str	r3, [r7, #20]
 8005808:	4b9a      	ldr	r3, [pc, #616]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800580a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580c:	2202      	movs	r2, #2
 800580e:	613a      	str	r2, [r7, #16]
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	fa92 f2a2 	rbit	r2, r2
 8005816:	60fa      	str	r2, [r7, #12]
  return result;
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	fab2 f282 	clz	r2, r2
 800581e:	b2d2      	uxtb	r2, r2
 8005820:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005824:	b2d2      	uxtb	r2, r2
 8005826:	f002 021f 	and.w	r2, r2, #31
 800582a:	2101      	movs	r1, #1
 800582c:	fa01 f202 	lsl.w	r2, r1, r2
 8005830:	4013      	ands	r3, r2
 8005832:	2b00      	cmp	r3, #0
 8005834:	d0b7      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005836:	4b8f      	ldr	r3, [pc, #572]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	498c      	ldr	r1, [pc, #560]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005844:	4313      	orrs	r3, r2
 8005846:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005848:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800584c:	2b01      	cmp	r3, #1
 800584e:	d105      	bne.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005850:	4b88      	ldr	r3, [pc, #544]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005852:	69db      	ldr	r3, [r3, #28]
 8005854:	4a87      	ldr	r2, [pc, #540]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005856:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800585a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0301 	and.w	r3, r3, #1
 8005864:	2b00      	cmp	r3, #0
 8005866:	d008      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005868:	4b82      	ldr	r3, [pc, #520]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800586a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586c:	f023 0203 	bic.w	r2, r3, #3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	497f      	ldr	r1, [pc, #508]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005876:	4313      	orrs	r3, r2
 8005878:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d008      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005886:	4b7b      	ldr	r3, [pc, #492]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	4978      	ldr	r1, [pc, #480]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005894:	4313      	orrs	r3, r2
 8005896:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0304 	and.w	r3, r3, #4
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d008      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058a4:	4b73      	ldr	r3, [pc, #460]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	4970      	ldr	r1, [pc, #448]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0320 	and.w	r3, r3, #32
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d008      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058c2:	4b6c      	ldr	r3, [pc, #432]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c6:	f023 0210 	bic.w	r2, r3, #16
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	69db      	ldr	r3, [r3, #28]
 80058ce:	4969      	ldr	r1, [pc, #420]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d008      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80058e0:	4b64      	ldr	r3, [pc, #400]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ec:	4961      	ldr	r1, [pc, #388]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d008      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80058fe:	4b5d      	ldr	r3, [pc, #372]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005902:	f023 0220 	bic.w	r2, r3, #32
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	495a      	ldr	r1, [pc, #360]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800590c:	4313      	orrs	r3, r2
 800590e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d008      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800591c:	4b55      	ldr	r3, [pc, #340]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800591e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005920:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005928:	4952      	ldr	r1, [pc, #328]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800592a:	4313      	orrs	r3, r2
 800592c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0308 	and.w	r3, r3, #8
 8005936:	2b00      	cmp	r3, #0
 8005938:	d008      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800593a:	4b4e      	ldr	r3, [pc, #312]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800593c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	494b      	ldr	r1, [pc, #300]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005948:	4313      	orrs	r3, r2
 800594a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0310 	and.w	r3, r3, #16
 8005954:	2b00      	cmp	r3, #0
 8005956:	d008      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005958:	4b46      	ldr	r3, [pc, #280]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800595a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	4943      	ldr	r1, [pc, #268]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005966:	4313      	orrs	r3, r2
 8005968:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005972:	2b00      	cmp	r3, #0
 8005974:	d008      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005976:	4b3f      	ldr	r3, [pc, #252]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005982:	493c      	ldr	r1, [pc, #240]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005984:	4313      	orrs	r3, r2
 8005986:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005990:	2b00      	cmp	r3, #0
 8005992:	d008      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005994:	4b37      	ldr	r3, [pc, #220]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005998:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a0:	4934      	ldr	r1, [pc, #208]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d008      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80059b2:	4b30      	ldr	r3, [pc, #192]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80059b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059be:	492d      	ldr	r1, [pc, #180]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d008      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80059d0:	4b28      	ldr	r3, [pc, #160]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80059d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059dc:	4925      	ldr	r1, [pc, #148]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d008      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80059ee:	4b21      	ldr	r3, [pc, #132]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80059f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fa:	491e      	ldr	r1, [pc, #120]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d008      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005a0c:	4b19      	ldr	r3, [pc, #100]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a10:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a18:	4916      	ldr	r1, [pc, #88]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d008      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8005a2a:	4b12      	ldr	r3, [pc, #72]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a36:	490f      	ldr	r1, [pc, #60]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d008      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005a48:	4b0a      	ldr	r3, [pc, #40]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a54:	4907      	ldr	r1, [pc, #28]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00c      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005a66:	4b03      	ldr	r3, [pc, #12]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	e002      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005a72:	bf00      	nop
 8005a74:	40021000 	.word	0x40021000
 8005a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a7a:	4913      	ldr	r1, [pc, #76]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d008      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005a8c:	4b0e      	ldr	r3, [pc, #56]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a90:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a98:	490b      	ldr	r1, [pc, #44]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d008      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8005aaa:	4b07      	ldr	r3, [pc, #28]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aae:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ab6:	4904      	ldr	r1, [pc, #16]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3748      	adds	r7, #72	; 0x48
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	40021000 	.word	0x40021000

08005acc <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e083      	b.n	8005be6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	7f5b      	ldrb	r3, [r3, #29]
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d105      	bne.n	8005af4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f7fb fe4a 	bl	8001788 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2202      	movs	r2, #2
 8005af8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	22ca      	movs	r2, #202	; 0xca
 8005b00:	625a      	str	r2, [r3, #36]	; 0x24
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2253      	movs	r2, #83	; 0x53
 8005b08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 fb84 	bl	8006218 <RTC_EnterInitMode>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d008      	beq.n	8005b28 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	22ff      	movs	r2, #255	; 0xff
 8005b1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2204      	movs	r2, #4
 8005b22:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e05e      	b.n	8005be6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	6812      	ldr	r2, [r2, #0]
 8005b32:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005b36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b3a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6899      	ldr	r1, [r3, #8]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685a      	ldr	r2, [r3, #4]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	431a      	orrs	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	695b      	ldr	r3, [r3, #20]
 8005b50:	431a      	orrs	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	430a      	orrs	r2, r1
 8005b58:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	68d2      	ldr	r2, [r2, #12]
 8005b62:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6919      	ldr	r1, [r3, #16]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	041a      	lsls	r2, r3, #16
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68da      	ldr	r2, [r3, #12]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b86:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f003 0320 	and.w	r3, r3, #32
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10e      	bne.n	8005bb4 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 fb16 	bl	80061c8 <HAL_RTC_WaitForSynchro>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d008      	beq.n	8005bb4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	22ff      	movs	r2, #255	; 0xff
 8005ba8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2204      	movs	r2, #4
 8005bae:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e018      	b.n	8005be6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005bc2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	699a      	ldr	r2, [r3, #24]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	430a      	orrs	r2, r1
 8005bd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	22ff      	movs	r2, #255	; 0xff
 8005bdc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005be4:	2300      	movs	r3, #0
  }
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3708      	adds	r7, #8
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005bee:	b590      	push	{r4, r7, lr}
 8005bf0:	b087      	sub	sp, #28
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	60f8      	str	r0, [r7, #12]
 8005bf6:	60b9      	str	r1, [r7, #8]
 8005bf8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	7f1b      	ldrb	r3, [r3, #28]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d101      	bne.n	8005c0a <HAL_RTC_SetTime+0x1c>
 8005c06:	2302      	movs	r3, #2
 8005c08:	e0aa      	b.n	8005d60 <HAL_RTC_SetTime+0x172>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2202      	movs	r2, #2
 8005c14:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d126      	bne.n	8005c6a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d102      	bne.n	8005c30 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	4618      	mov	r0, r3
 8005c36:	f000 fb1b 	bl	8006270 <RTC_ByteToBcd2>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	785b      	ldrb	r3, [r3, #1]
 8005c42:	4618      	mov	r0, r3
 8005c44:	f000 fb14 	bl	8006270 <RTC_ByteToBcd2>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005c4c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	789b      	ldrb	r3, [r3, #2]
 8005c52:	4618      	mov	r0, r3
 8005c54:	f000 fb0c 	bl	8006270 <RTC_ByteToBcd2>
 8005c58:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005c5a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	78db      	ldrb	r3, [r3, #3]
 8005c62:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005c64:	4313      	orrs	r3, r2
 8005c66:	617b      	str	r3, [r7, #20]
 8005c68:	e018      	b.n	8005c9c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d102      	bne.n	8005c7e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	785b      	ldrb	r3, [r3, #1]
 8005c88:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005c8a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005c8c:	68ba      	ldr	r2, [r7, #8]
 8005c8e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005c90:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	78db      	ldrb	r3, [r3, #3]
 8005c96:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	22ca      	movs	r2, #202	; 0xca
 8005ca2:	625a      	str	r2, [r3, #36]	; 0x24
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2253      	movs	r2, #83	; 0x53
 8005caa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f000 fab3 	bl	8006218 <RTC_EnterInitMode>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00b      	beq.n	8005cd0 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	22ff      	movs	r2, #255	; 0xff
 8005cbe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2204      	movs	r2, #4
 8005cc4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e047      	b.n	8005d60 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005cda:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005cde:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689a      	ldr	r2, [r3, #8]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005cee:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6899      	ldr	r1, [r3, #8]
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	68da      	ldr	r2, [r3, #12]
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	431a      	orrs	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	430a      	orrs	r2, r1
 8005d06:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68da      	ldr	r2, [r3, #12]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d16:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f003 0320 	and.w	r3, r3, #32
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d111      	bne.n	8005d4a <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f000 fa4e 	bl	80061c8 <HAL_RTC_WaitForSynchro>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00b      	beq.n	8005d4a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	22ff      	movs	r2, #255	; 0xff
 8005d38:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2204      	movs	r2, #4
 8005d3e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2200      	movs	r2, #0
 8005d44:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e00a      	b.n	8005d60 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	22ff      	movs	r2, #255	; 0xff
 8005d50:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2201      	movs	r2, #1
 8005d56:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
  }
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	371c      	adds	r7, #28
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd90      	pop	{r4, r7, pc}

08005d68 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005d68:	b590      	push	{r4, r7, lr}
 8005d6a:	b087      	sub	sp, #28
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005d74:	2300      	movs	r3, #0
 8005d76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	7f1b      	ldrb	r3, [r3, #28]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d101      	bne.n	8005d84 <HAL_RTC_SetDate+0x1c>
 8005d80:	2302      	movs	r3, #2
 8005d82:	e094      	b.n	8005eae <HAL_RTC_SetDate+0x146>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2201      	movs	r2, #1
 8005d88:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2202      	movs	r2, #2
 8005d8e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10e      	bne.n	8005db4 <HAL_RTC_SetDate+0x4c>
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	785b      	ldrb	r3, [r3, #1]
 8005d9a:	f003 0310 	and.w	r3, r3, #16
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d008      	beq.n	8005db4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	785b      	ldrb	r3, [r3, #1]
 8005da6:	f023 0310 	bic.w	r3, r3, #16
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	330a      	adds	r3, #10
 8005dae:	b2da      	uxtb	r2, r3
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d11c      	bne.n	8005df4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	78db      	ldrb	r3, [r3, #3]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 fa56 	bl	8006270 <RTC_ByteToBcd2>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	785b      	ldrb	r3, [r3, #1]
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f000 fa4f 	bl	8006270 <RTC_ByteToBcd2>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005dd6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	789b      	ldrb	r3, [r3, #2]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f000 fa47 	bl	8006270 <RTC_ByteToBcd2>
 8005de2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005de4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005dee:	4313      	orrs	r3, r2
 8005df0:	617b      	str	r3, [r7, #20]
 8005df2:	e00e      	b.n	8005e12 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	78db      	ldrb	r3, [r3, #3]
 8005df8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	785b      	ldrb	r3, [r3, #1]
 8005dfe:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005e00:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005e06:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	22ca      	movs	r2, #202	; 0xca
 8005e18:	625a      	str	r2, [r3, #36]	; 0x24
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2253      	movs	r2, #83	; 0x53
 8005e20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f000 f9f8 	bl	8006218 <RTC_EnterInitMode>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00b      	beq.n	8005e46 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	22ff      	movs	r2, #255	; 0xff
 8005e34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2204      	movs	r2, #4
 8005e3a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e033      	b.n	8005eae <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005e50:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005e54:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68da      	ldr	r2, [r3, #12]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e64:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	f003 0320 	and.w	r3, r3, #32
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d111      	bne.n	8005e98 <HAL_RTC_SetDate+0x130>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f000 f9a7 	bl	80061c8 <HAL_RTC_WaitForSynchro>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d00b      	beq.n	8005e98 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	22ff      	movs	r2, #255	; 0xff
 8005e86:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2204      	movs	r2, #4
 8005e8c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e00a      	b.n	8005eae <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	22ff      	movs	r2, #255	; 0xff
 8005e9e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005eac:	2300      	movs	r3, #0
  }
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	371c      	adds	r7, #28
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd90      	pop	{r4, r7, pc}
	...

08005eb8 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005eb8:	b590      	push	{r4, r7, lr}
 8005eba:	b089      	sub	sp, #36	; 0x24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	61fb      	str	r3, [r7, #28]
 8005ecc:	2300      	movs	r3, #0
 8005ece:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	7f1b      	ldrb	r3, [r3, #28]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d101      	bne.n	8005edc <HAL_RTC_SetAlarm_IT+0x24>
 8005ed8:	2302      	movs	r3, #2
 8005eda:	e11f      	b.n	800611c <HAL_RTC_SetAlarm_IT+0x264>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d137      	bne.n	8005f5e <HAL_RTC_SetAlarm_IT+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d102      	bne.n	8005f02 <HAL_RTC_SetAlarm_IT+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	2200      	movs	r2, #0
 8005f00:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f000 f9b2 	bl	8006270 <RTC_ByteToBcd2>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	785b      	ldrb	r3, [r3, #1]
 8005f14:	4618      	mov	r0, r3
 8005f16:	f000 f9ab 	bl	8006270 <RTC_ByteToBcd2>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005f1e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	789b      	ldrb	r3, [r3, #2]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f000 f9a3 	bl	8006270 <RTC_ByteToBcd2>
 8005f2a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005f2c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	78db      	ldrb	r3, [r3, #3]
 8005f34:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005f36:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f000 f995 	bl	8006270 <RTC_ByteToBcd2>
 8005f46:	4603      	mov	r3, r0
 8005f48:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005f4a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005f52:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	61fb      	str	r3, [r7, #28]
 8005f5c:	e023      	b.n	8005fa6 <HAL_RTC_SetAlarm_IT+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d102      	bne.n	8005f72 <HAL_RTC_SetAlarm_IT+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	785b      	ldrb	r3, [r3, #1]
 8005f7c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005f7e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005f80:	68ba      	ldr	r2, [r7, #8]
 8005f82:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005f84:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	78db      	ldrb	r3, [r3, #3]
 8005f8a:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005f8c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f94:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005f96:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005f9c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	685a      	ldr	r2, [r3, #4]
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	22ca      	movs	r2, #202	; 0xca
 8005fb8:	625a      	str	r2, [r3, #36]	; 0x24
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2253      	movs	r2, #83	; 0x53
 8005fc0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fca:	d148      	bne.n	800605e <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	689a      	ldr	r2, [r3, #8]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fda:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	b2da      	uxtb	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005fec:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005fee:	f7fb ffa5 	bl	8001f3c <HAL_GetTick>
 8005ff2:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005ff4:	e013      	b.n	800601e <HAL_RTC_SetAlarm_IT+0x166>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ff6:	f7fb ffa1 	bl	8001f3c <HAL_GetTick>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006004:	d90b      	bls.n	800601e <HAL_RTC_SetAlarm_IT+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	22ff      	movs	r2, #255	; 0xff
 800600c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2203      	movs	r2, #3
 8006012:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e07e      	b.n	800611c <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	f003 0301 	and.w	r3, r3, #1
 8006028:	2b00      	cmp	r3, #0
 800602a:	d0e4      	beq.n	8005ff6 <HAL_RTC_SetAlarm_IT+0x13e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	69fa      	ldr	r2, [r7, #28]
 8006032:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	689a      	ldr	r2, [r3, #8]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800604a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	689a      	ldr	r2, [r3, #8]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800605a:	609a      	str	r2, [r3, #8]
 800605c:	e047      	b.n	80060ee <HAL_RTC_SetAlarm_IT+0x236>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800606c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	b2da      	uxtb	r2, r3
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f462 7220 	orn	r2, r2, #640	; 0x280
 800607e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006080:	f7fb ff5c 	bl	8001f3c <HAL_GetTick>
 8006084:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8006086:	e013      	b.n	80060b0 <HAL_RTC_SetAlarm_IT+0x1f8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006088:	f7fb ff58 	bl	8001f3c <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006096:	d90b      	bls.n	80060b0 <HAL_RTC_SetAlarm_IT+0x1f8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	22ff      	movs	r2, #255	; 0xff
 800609e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2203      	movs	r2, #3
 80060a4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e035      	b.n	800611c <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	f003 0302 	and.w	r3, r3, #2
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d0e4      	beq.n	8006088 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	69fa      	ldr	r2, [r7, #28]
 80060c4:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	689a      	ldr	r2, [r3, #8]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060dc:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	689a      	ldr	r2, [r3, #8]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060ec:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80060ee:	4b0d      	ldr	r3, [pc, #52]	; (8006124 <HAL_RTC_SetAlarm_IT+0x26c>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a0c      	ldr	r2, [pc, #48]	; (8006124 <HAL_RTC_SetAlarm_IT+0x26c>)
 80060f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060f8:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80060fa:	4b0a      	ldr	r3, [pc, #40]	; (8006124 <HAL_RTC_SetAlarm_IT+0x26c>)
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	4a09      	ldr	r2, [pc, #36]	; (8006124 <HAL_RTC_SetAlarm_IT+0x26c>)
 8006100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006104:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	22ff      	movs	r2, #255	; 0xff
 800610c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2201      	movs	r2, #1
 8006112:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3724      	adds	r7, #36	; 0x24
 8006120:	46bd      	mov	sp, r7
 8006122:	bd90      	pop	{r4, r7, pc}
 8006124:	40010400 	.word	0x40010400

08006128 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800613a:	2b00      	cmp	r3, #0
 800613c:	d012      	beq.n	8006164 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00b      	beq.n	8006164 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 f831 	bl	80061b4 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	b2da      	uxtb	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8006162:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != RESET)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d012      	beq.n	8006198 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00b      	beq.n	8006198 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 f893 	bl	80062ac <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	b2da      	uxtb	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f462 7220 	orn	r2, r2, #640	; 0x280
 8006196:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006198:	4b05      	ldr	r3, [pc, #20]	; (80061b0 <HAL_RTC_AlarmIRQHandler+0x88>)
 800619a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800619e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	775a      	strb	r2, [r3, #29]
}
 80061a6:	bf00      	nop
 80061a8:	3708      	adds	r7, #8
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	40010400 	.word	0x40010400

080061b4 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80061d0:	2300      	movs	r3, #0
 80061d2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68da      	ldr	r2, [r3, #12]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80061e2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80061e4:	f7fb feaa 	bl	8001f3c <HAL_GetTick>
 80061e8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80061ea:	e009      	b.n	8006200 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80061ec:	f7fb fea6 	bl	8001f3c <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061fa:	d901      	bls.n	8006200 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e007      	b.n	8006210 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	f003 0320 	and.w	r3, r3, #32
 800620a:	2b00      	cmp	r3, #0
 800620c:	d0ee      	beq.n	80061ec <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006220:	2300      	movs	r3, #0
 8006222:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800622e:	2b00      	cmp	r3, #0
 8006230:	d119      	bne.n	8006266 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f04f 32ff 	mov.w	r2, #4294967295
 800623a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800623c:	f7fb fe7e 	bl	8001f3c <HAL_GetTick>
 8006240:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006242:	e009      	b.n	8006258 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006244:	f7fb fe7a 	bl	8001f3c <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006252:	d901      	bls.n	8006258 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e007      	b.n	8006268 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006262:	2b00      	cmp	r3, #0
 8006264:	d0ee      	beq.n	8006244 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006270:	b480      	push	{r7}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	4603      	mov	r3, r0
 8006278:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800627a:	2300      	movs	r3, #0
 800627c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800627e:	e005      	b.n	800628c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	3301      	adds	r3, #1
 8006284:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8006286:	79fb      	ldrb	r3, [r7, #7]
 8006288:	3b0a      	subs	r3, #10
 800628a:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 800628c:	79fb      	ldrb	r3, [r7, #7]
 800628e:	2b09      	cmp	r3, #9
 8006290:	d8f6      	bhi.n	8006280 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	b2db      	uxtb	r3, r3
 8006296:	011b      	lsls	r3, r3, #4
 8006298:	b2da      	uxtb	r2, r3
 800629a:	79fb      	ldrb	r3, [r7, #7]
 800629c:	4313      	orrs	r3, r2
 800629e:	b2db      	uxtb	r3, r3
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3714      	adds	r7, #20
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e09d      	b.n	800640e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d108      	bne.n	80062ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062e2:	d009      	beq.n	80062f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	61da      	str	r2, [r3, #28]
 80062ea:	e005      	b.n	80062f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d106      	bne.n	8006318 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f7fb fa64 	bl	80017e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2202      	movs	r2, #2
 800631c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800632e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006338:	d902      	bls.n	8006340 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800633a:	2300      	movs	r3, #0
 800633c:	60fb      	str	r3, [r7, #12]
 800633e:	e002      	b.n	8006346 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006344:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800634e:	d007      	beq.n	8006360 <HAL_SPI_Init+0xa0>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006358:	d002      	beq.n	8006360 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006370:	431a      	orrs	r2, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	f003 0302 	and.w	r3, r3, #2
 800637a:	431a      	orrs	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	695b      	ldr	r3, [r3, #20]
 8006380:	f003 0301 	and.w	r3, r3, #1
 8006384:	431a      	orrs	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800638e:	431a      	orrs	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	69db      	ldr	r3, [r3, #28]
 8006394:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006398:	431a      	orrs	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063a2:	ea42 0103 	orr.w	r1, r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063aa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	430a      	orrs	r2, r1
 80063b4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	0c1b      	lsrs	r3, r3, #16
 80063bc:	f003 0204 	and.w	r2, r3, #4
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c4:	f003 0310 	and.w	r3, r3, #16
 80063c8:	431a      	orrs	r2, r3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ce:	f003 0308 	and.w	r3, r3, #8
 80063d2:	431a      	orrs	r2, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80063dc:	ea42 0103 	orr.w	r1, r2, r3
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	430a      	orrs	r2, r1
 80063ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	69da      	ldr	r2, [r3, #28]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b088      	sub	sp, #32
 800641a:	af00      	add	r7, sp, #0
 800641c:	60f8      	str	r0, [r7, #12]
 800641e:	60b9      	str	r1, [r7, #8]
 8006420:	603b      	str	r3, [r7, #0]
 8006422:	4613      	mov	r3, r2
 8006424:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006426:	2300      	movs	r3, #0
 8006428:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006430:	2b01      	cmp	r3, #1
 8006432:	d101      	bne.n	8006438 <HAL_SPI_Transmit+0x22>
 8006434:	2302      	movs	r3, #2
 8006436:	e158      	b.n	80066ea <HAL_SPI_Transmit+0x2d4>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006440:	f7fb fd7c 	bl	8001f3c <HAL_GetTick>
 8006444:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006446:	88fb      	ldrh	r3, [r7, #6]
 8006448:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b01      	cmp	r3, #1
 8006454:	d002      	beq.n	800645c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006456:	2302      	movs	r3, #2
 8006458:	77fb      	strb	r3, [r7, #31]
    goto error;
 800645a:	e13d      	b.n	80066d8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d002      	beq.n	8006468 <HAL_SPI_Transmit+0x52>
 8006462:	88fb      	ldrh	r3, [r7, #6]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d102      	bne.n	800646e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800646c:	e134      	b.n	80066d8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2203      	movs	r2, #3
 8006472:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	88fa      	ldrh	r2, [r7, #6]
 8006486:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	88fa      	ldrh	r2, [r7, #6]
 800648c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2200      	movs	r2, #0
 8006492:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2200      	movs	r2, #0
 80064a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064b8:	d10f      	bne.n	80064da <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e4:	2b40      	cmp	r3, #64	; 0x40
 80064e6:	d007      	beq.n	80064f8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006500:	d94b      	bls.n	800659a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d002      	beq.n	8006510 <HAL_SPI_Transmit+0xfa>
 800650a:	8afb      	ldrh	r3, [r7, #22]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d13e      	bne.n	800658e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006514:	881a      	ldrh	r2, [r3, #0]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006520:	1c9a      	adds	r2, r3, #2
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800652a:	b29b      	uxth	r3, r3
 800652c:	3b01      	subs	r3, #1
 800652e:	b29a      	uxth	r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006534:	e02b      	b.n	800658e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f003 0302 	and.w	r3, r3, #2
 8006540:	2b02      	cmp	r3, #2
 8006542:	d112      	bne.n	800656a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006548:	881a      	ldrh	r2, [r3, #0]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006554:	1c9a      	adds	r2, r3, #2
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800655e:	b29b      	uxth	r3, r3
 8006560:	3b01      	subs	r3, #1
 8006562:	b29a      	uxth	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006568:	e011      	b.n	800658e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800656a:	f7fb fce7 	bl	8001f3c <HAL_GetTick>
 800656e:	4602      	mov	r2, r0
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	683a      	ldr	r2, [r7, #0]
 8006576:	429a      	cmp	r2, r3
 8006578:	d803      	bhi.n	8006582 <HAL_SPI_Transmit+0x16c>
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006580:	d102      	bne.n	8006588 <HAL_SPI_Transmit+0x172>
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d102      	bne.n	800658e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800658c:	e0a4      	b.n	80066d8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006592:	b29b      	uxth	r3, r3
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1ce      	bne.n	8006536 <HAL_SPI_Transmit+0x120>
 8006598:	e07c      	b.n	8006694 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d002      	beq.n	80065a8 <HAL_SPI_Transmit+0x192>
 80065a2:	8afb      	ldrh	r3, [r7, #22]
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d170      	bne.n	800668a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d912      	bls.n	80065d8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b6:	881a      	ldrh	r2, [r3, #0]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c2:	1c9a      	adds	r2, r3, #2
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	3b02      	subs	r3, #2
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065d6:	e058      	b.n	800668a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	330c      	adds	r3, #12
 80065e2:	7812      	ldrb	r2, [r2, #0]
 80065e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ea:	1c5a      	adds	r2, r3, #1
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	3b01      	subs	r3, #1
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80065fe:	e044      	b.n	800668a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	f003 0302 	and.w	r3, r3, #2
 800660a:	2b02      	cmp	r3, #2
 800660c:	d12b      	bne.n	8006666 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006612:	b29b      	uxth	r3, r3
 8006614:	2b01      	cmp	r3, #1
 8006616:	d912      	bls.n	800663e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661c:	881a      	ldrh	r2, [r3, #0]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006628:	1c9a      	adds	r2, r3, #2
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006632:	b29b      	uxth	r3, r3
 8006634:	3b02      	subs	r3, #2
 8006636:	b29a      	uxth	r2, r3
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800663c:	e025      	b.n	800668a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	330c      	adds	r3, #12
 8006648:	7812      	ldrb	r2, [r2, #0]
 800664a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006650:	1c5a      	adds	r2, r3, #1
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800665a:	b29b      	uxth	r3, r3
 800665c:	3b01      	subs	r3, #1
 800665e:	b29a      	uxth	r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006664:	e011      	b.n	800668a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006666:	f7fb fc69 	bl	8001f3c <HAL_GetTick>
 800666a:	4602      	mov	r2, r0
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	683a      	ldr	r2, [r7, #0]
 8006672:	429a      	cmp	r2, r3
 8006674:	d803      	bhi.n	800667e <HAL_SPI_Transmit+0x268>
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800667c:	d102      	bne.n	8006684 <HAL_SPI_Transmit+0x26e>
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d102      	bne.n	800668a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006688:	e026      	b.n	80066d8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800668e:	b29b      	uxth	r3, r3
 8006690:	2b00      	cmp	r3, #0
 8006692:	d1b5      	bne.n	8006600 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006694:	69ba      	ldr	r2, [r7, #24]
 8006696:	6839      	ldr	r1, [r7, #0]
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f000 fb5b 	bl	8006d54 <SPI_EndRxTxTransaction>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d002      	beq.n	80066aa <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2220      	movs	r2, #32
 80066a8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d10a      	bne.n	80066c8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066b2:	2300      	movs	r3, #0
 80066b4:	613b      	str	r3, [r7, #16]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	613b      	str	r3, [r7, #16]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	613b      	str	r3, [r7, #16]
 80066c6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d002      	beq.n	80066d6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	77fb      	strb	r3, [r7, #31]
 80066d4:	e000      	b.n	80066d8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80066d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80066e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3720      	adds	r7, #32
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b08a      	sub	sp, #40	; 0x28
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	60f8      	str	r0, [r7, #12]
 80066fa:	60b9      	str	r1, [r7, #8]
 80066fc:	607a      	str	r2, [r7, #4]
 80066fe:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006700:	2301      	movs	r3, #1
 8006702:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006704:	2300      	movs	r3, #0
 8006706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006710:	2b01      	cmp	r3, #1
 8006712:	d101      	bne.n	8006718 <HAL_SPI_TransmitReceive+0x26>
 8006714:	2302      	movs	r3, #2
 8006716:	e1fb      	b.n	8006b10 <HAL_SPI_TransmitReceive+0x41e>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006720:	f7fb fc0c 	bl	8001f3c <HAL_GetTick>
 8006724:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800672c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006734:	887b      	ldrh	r3, [r7, #2]
 8006736:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006738:	887b      	ldrh	r3, [r7, #2]
 800673a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800673c:	7efb      	ldrb	r3, [r7, #27]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d00e      	beq.n	8006760 <HAL_SPI_TransmitReceive+0x6e>
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006748:	d106      	bne.n	8006758 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d102      	bne.n	8006758 <HAL_SPI_TransmitReceive+0x66>
 8006752:	7efb      	ldrb	r3, [r7, #27]
 8006754:	2b04      	cmp	r3, #4
 8006756:	d003      	beq.n	8006760 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006758:	2302      	movs	r3, #2
 800675a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800675e:	e1cd      	b.n	8006afc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d005      	beq.n	8006772 <HAL_SPI_TransmitReceive+0x80>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d002      	beq.n	8006772 <HAL_SPI_TransmitReceive+0x80>
 800676c:	887b      	ldrh	r3, [r7, #2]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d103      	bne.n	800677a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006778:	e1c0      	b.n	8006afc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b04      	cmp	r3, #4
 8006784:	d003      	beq.n	800678e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2205      	movs	r2, #5
 800678a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	887a      	ldrh	r2, [r7, #2]
 800679e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	887a      	ldrh	r2, [r7, #2]
 80067a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	887a      	ldrh	r2, [r7, #2]
 80067b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	887a      	ldrh	r2, [r7, #2]
 80067ba:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80067d0:	d802      	bhi.n	80067d8 <HAL_SPI_TransmitReceive+0xe6>
 80067d2:	8a3b      	ldrh	r3, [r7, #16]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d908      	bls.n	80067ea <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	685a      	ldr	r2, [r3, #4]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80067e6:	605a      	str	r2, [r3, #4]
 80067e8:	e007      	b.n	80067fa <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	685a      	ldr	r2, [r3, #4]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80067f8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006804:	2b40      	cmp	r3, #64	; 0x40
 8006806:	d007      	beq.n	8006818 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006816:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006820:	d97c      	bls.n	800691c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d002      	beq.n	8006830 <HAL_SPI_TransmitReceive+0x13e>
 800682a:	8a7b      	ldrh	r3, [r7, #18]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d169      	bne.n	8006904 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006834:	881a      	ldrh	r2, [r3, #0]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006840:	1c9a      	adds	r2, r3, #2
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800684a:	b29b      	uxth	r3, r3
 800684c:	3b01      	subs	r3, #1
 800684e:	b29a      	uxth	r2, r3
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006854:	e056      	b.n	8006904 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f003 0302 	and.w	r3, r3, #2
 8006860:	2b02      	cmp	r3, #2
 8006862:	d11b      	bne.n	800689c <HAL_SPI_TransmitReceive+0x1aa>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006868:	b29b      	uxth	r3, r3
 800686a:	2b00      	cmp	r3, #0
 800686c:	d016      	beq.n	800689c <HAL_SPI_TransmitReceive+0x1aa>
 800686e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006870:	2b01      	cmp	r3, #1
 8006872:	d113      	bne.n	800689c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006878:	881a      	ldrh	r2, [r3, #0]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006884:	1c9a      	adds	r2, r3, #2
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800688e:	b29b      	uxth	r3, r3
 8006890:	3b01      	subs	r3, #1
 8006892:	b29a      	uxth	r2, r3
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006898:	2300      	movs	r3, #0
 800689a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	f003 0301 	and.w	r3, r3, #1
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d11c      	bne.n	80068e4 <HAL_SPI_TransmitReceive+0x1f2>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d016      	beq.n	80068e4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68da      	ldr	r2, [r3, #12]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c0:	b292      	uxth	r2, r2
 80068c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c8:	1c9a      	adds	r2, r3, #2
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	3b01      	subs	r3, #1
 80068d8:	b29a      	uxth	r2, r3
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80068e0:	2301      	movs	r3, #1
 80068e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80068e4:	f7fb fb2a 	bl	8001f3c <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d807      	bhi.n	8006904 <HAL_SPI_TransmitReceive+0x212>
 80068f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068fa:	d003      	beq.n	8006904 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80068fc:	2303      	movs	r3, #3
 80068fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006902:	e0fb      	b.n	8006afc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006908:	b29b      	uxth	r3, r3
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1a3      	bne.n	8006856 <HAL_SPI_TransmitReceive+0x164>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006914:	b29b      	uxth	r3, r3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d19d      	bne.n	8006856 <HAL_SPI_TransmitReceive+0x164>
 800691a:	e0df      	b.n	8006adc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d003      	beq.n	800692c <HAL_SPI_TransmitReceive+0x23a>
 8006924:	8a7b      	ldrh	r3, [r7, #18]
 8006926:	2b01      	cmp	r3, #1
 8006928:	f040 80cb 	bne.w	8006ac2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006930:	b29b      	uxth	r3, r3
 8006932:	2b01      	cmp	r3, #1
 8006934:	d912      	bls.n	800695c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693a:	881a      	ldrh	r2, [r3, #0]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006946:	1c9a      	adds	r2, r3, #2
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006950:	b29b      	uxth	r3, r3
 8006952:	3b02      	subs	r3, #2
 8006954:	b29a      	uxth	r2, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	87da      	strh	r2, [r3, #62]	; 0x3e
 800695a:	e0b2      	b.n	8006ac2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	330c      	adds	r3, #12
 8006966:	7812      	ldrb	r2, [r2, #0]
 8006968:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696e:	1c5a      	adds	r2, r3, #1
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006978:	b29b      	uxth	r3, r3
 800697a:	3b01      	subs	r3, #1
 800697c:	b29a      	uxth	r2, r3
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006982:	e09e      	b.n	8006ac2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	f003 0302 	and.w	r3, r3, #2
 800698e:	2b02      	cmp	r3, #2
 8006990:	d134      	bne.n	80069fc <HAL_SPI_TransmitReceive+0x30a>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006996:	b29b      	uxth	r3, r3
 8006998:	2b00      	cmp	r3, #0
 800699a:	d02f      	beq.n	80069fc <HAL_SPI_TransmitReceive+0x30a>
 800699c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d12c      	bne.n	80069fc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d912      	bls.n	80069d2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b0:	881a      	ldrh	r2, [r3, #0]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069bc:	1c9a      	adds	r2, r3, #2
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	3b02      	subs	r3, #2
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069d0:	e012      	b.n	80069f8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	330c      	adds	r3, #12
 80069dc:	7812      	ldrb	r2, [r2, #0]
 80069de:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e4:	1c5a      	adds	r2, r3, #1
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	3b01      	subs	r3, #1
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80069f8:	2300      	movs	r3, #0
 80069fa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f003 0301 	and.w	r3, r3, #1
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d148      	bne.n	8006a9c <HAL_SPI_TransmitReceive+0x3aa>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d042      	beq.n	8006a9c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d923      	bls.n	8006a6a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68da      	ldr	r2, [r3, #12]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2c:	b292      	uxth	r2, r2
 8006a2e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a34:	1c9a      	adds	r2, r3, #2
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	3b02      	subs	r3, #2
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d81f      	bhi.n	8006a98 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	685a      	ldr	r2, [r3, #4]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a66:	605a      	str	r2, [r3, #4]
 8006a68:	e016      	b.n	8006a98 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f103 020c 	add.w	r2, r3, #12
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a76:	7812      	ldrb	r2, [r2, #0]
 8006a78:	b2d2      	uxtb	r2, r2
 8006a7a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a80:	1c5a      	adds	r2, r3, #1
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	b29a      	uxth	r2, r3
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006a9c:	f7fb fa4e 	bl	8001f3c <HAL_GetTick>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d803      	bhi.n	8006ab4 <HAL_SPI_TransmitReceive+0x3c2>
 8006aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab2:	d102      	bne.n	8006aba <HAL_SPI_TransmitReceive+0x3c8>
 8006ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d103      	bne.n	8006ac2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006ac0:	e01c      	b.n	8006afc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	f47f af5b 	bne.w	8006984 <HAL_SPI_TransmitReceive+0x292>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f47f af54 	bne.w	8006984 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006adc:	69fa      	ldr	r2, [r7, #28]
 8006ade:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f000 f937 	bl	8006d54 <SPI_EndRxTxTransaction>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d006      	beq.n	8006afa <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2220      	movs	r2, #32
 8006af6:	661a      	str	r2, [r3, #96]	; 0x60
 8006af8:	e000      	b.n	8006afc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006afa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006b0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3728      	adds	r7, #40	; 0x28
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b088      	sub	sp, #32
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	603b      	str	r3, [r7, #0]
 8006b24:	4613      	mov	r3, r2
 8006b26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b28:	f7fb fa08 	bl	8001f3c <HAL_GetTick>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b30:	1a9b      	subs	r3, r3, r2
 8006b32:	683a      	ldr	r2, [r7, #0]
 8006b34:	4413      	add	r3, r2
 8006b36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006b38:	f7fb fa00 	bl	8001f3c <HAL_GetTick>
 8006b3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b3e:	4b39      	ldr	r3, [pc, #228]	; (8006c24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	015b      	lsls	r3, r3, #5
 8006b44:	0d1b      	lsrs	r3, r3, #20
 8006b46:	69fa      	ldr	r2, [r7, #28]
 8006b48:	fb02 f303 	mul.w	r3, r2, r3
 8006b4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b4e:	e054      	b.n	8006bfa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b56:	d050      	beq.n	8006bfa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b58:	f7fb f9f0 	bl	8001f3c <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	69fa      	ldr	r2, [r7, #28]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d902      	bls.n	8006b6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d13d      	bne.n	8006bea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	685a      	ldr	r2, [r3, #4]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b86:	d111      	bne.n	8006bac <SPI_WaitFlagStateUntilTimeout+0x94>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b90:	d004      	beq.n	8006b9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b9a:	d107      	bne.n	8006bac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006baa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bb4:	d10f      	bne.n	8006bd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006bc4:	601a      	str	r2, [r3, #0]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006be6:	2303      	movs	r3, #3
 8006be8:	e017      	b.n	8006c1a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d101      	bne.n	8006bf4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	689a      	ldr	r2, [r3, #8]
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	4013      	ands	r3, r2
 8006c04:	68ba      	ldr	r2, [r7, #8]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	bf0c      	ite	eq
 8006c0a:	2301      	moveq	r3, #1
 8006c0c:	2300      	movne	r3, #0
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	461a      	mov	r2, r3
 8006c12:	79fb      	ldrb	r3, [r7, #7]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d19b      	bne.n	8006b50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3720      	adds	r7, #32
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	20000004 	.word	0x20000004

08006c28 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b08a      	sub	sp, #40	; 0x28
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	607a      	str	r2, [r7, #4]
 8006c34:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006c36:	2300      	movs	r3, #0
 8006c38:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006c3a:	f7fb f97f 	bl	8001f3c <HAL_GetTick>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c42:	1a9b      	subs	r3, r3, r2
 8006c44:	683a      	ldr	r2, [r7, #0]
 8006c46:	4413      	add	r3, r2
 8006c48:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006c4a:	f7fb f977 	bl	8001f3c <HAL_GetTick>
 8006c4e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	330c      	adds	r3, #12
 8006c56:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006c58:	4b3d      	ldr	r3, [pc, #244]	; (8006d50 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	4413      	add	r3, r2
 8006c62:	00da      	lsls	r2, r3, #3
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	0d1b      	lsrs	r3, r3, #20
 8006c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c6a:	fb02 f303 	mul.w	r3, r2, r3
 8006c6e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006c70:	e060      	b.n	8006d34 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006c78:	d107      	bne.n	8006c8a <SPI_WaitFifoStateUntilTimeout+0x62>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d104      	bne.n	8006c8a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006c88:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c90:	d050      	beq.n	8006d34 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c92:	f7fb f953 	bl	8001f3c <HAL_GetTick>
 8006c96:	4602      	mov	r2, r0
 8006c98:	6a3b      	ldr	r3, [r7, #32]
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d902      	bls.n	8006ca8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d13d      	bne.n	8006d24 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	685a      	ldr	r2, [r3, #4]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006cb6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cc0:	d111      	bne.n	8006ce6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cca:	d004      	beq.n	8006cd6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cd4:	d107      	bne.n	8006ce6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ce4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cee:	d10f      	bne.n	8006d10 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006cfe:	601a      	str	r2, [r3, #0]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d0e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e010      	b.n	8006d46 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d101      	bne.n	8006d2e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	3b01      	subs	r3, #1
 8006d32:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	689a      	ldr	r2, [r3, #8]
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d196      	bne.n	8006c72 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3728      	adds	r7, #40	; 0x28
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	20000004 	.word	0x20000004

08006d54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b086      	sub	sp, #24
 8006d58:	af02      	add	r7, sp, #8
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	9300      	str	r3, [sp, #0]
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f7ff ff5b 	bl	8006c28 <SPI_WaitFifoStateUntilTimeout>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d007      	beq.n	8006d88 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d7c:	f043 0220 	orr.w	r2, r3, #32
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006d84:	2303      	movs	r3, #3
 8006d86:	e027      	b.n	8006dd8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	9300      	str	r3, [sp, #0]
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	2180      	movs	r1, #128	; 0x80
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	f7ff fec0 	bl	8006b18 <SPI_WaitFlagStateUntilTimeout>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d007      	beq.n	8006dae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006da2:	f043 0220 	orr.w	r2, r3, #32
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e014      	b.n	8006dd8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	9300      	str	r3, [sp, #0]
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f7ff ff34 	bl	8006c28 <SPI_WaitFifoStateUntilTimeout>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d007      	beq.n	8006dd6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dca:	f043 0220 	orr.w	r2, r3, #32
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	e000      	b.n	8006dd8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3710      	adds	r7, #16
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d101      	bne.n	8006df2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e049      	b.n	8006e86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d106      	bne.n	8006e0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f7fa fd2c 	bl	8001864 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2202      	movs	r2, #2
 8006e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	3304      	adds	r3, #4
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	4610      	mov	r0, r2
 8006e20:	f000 f8c6 	bl	8006fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3708      	adds	r7, #8
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
	...

08006e90 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d001      	beq.n	8006ea8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e047      	b.n	8006f38 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2202      	movs	r2, #2
 8006eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a23      	ldr	r2, [pc, #140]	; (8006f44 <HAL_TIM_Base_Start+0xb4>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d01d      	beq.n	8006ef6 <HAL_TIM_Base_Start+0x66>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ec2:	d018      	beq.n	8006ef6 <HAL_TIM_Base_Start+0x66>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a1f      	ldr	r2, [pc, #124]	; (8006f48 <HAL_TIM_Base_Start+0xb8>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d013      	beq.n	8006ef6 <HAL_TIM_Base_Start+0x66>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a1e      	ldr	r2, [pc, #120]	; (8006f4c <HAL_TIM_Base_Start+0xbc>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d00e      	beq.n	8006ef6 <HAL_TIM_Base_Start+0x66>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a1c      	ldr	r2, [pc, #112]	; (8006f50 <HAL_TIM_Base_Start+0xc0>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d009      	beq.n	8006ef6 <HAL_TIM_Base_Start+0x66>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a1b      	ldr	r2, [pc, #108]	; (8006f54 <HAL_TIM_Base_Start+0xc4>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d004      	beq.n	8006ef6 <HAL_TIM_Base_Start+0x66>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a19      	ldr	r2, [pc, #100]	; (8006f58 <HAL_TIM_Base_Start+0xc8>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d115      	bne.n	8006f22 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	689a      	ldr	r2, [r3, #8]
 8006efc:	4b17      	ldr	r3, [pc, #92]	; (8006f5c <HAL_TIM_Base_Start+0xcc>)
 8006efe:	4013      	ands	r3, r2
 8006f00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2b06      	cmp	r3, #6
 8006f06:	d015      	beq.n	8006f34 <HAL_TIM_Base_Start+0xa4>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f0e:	d011      	beq.n	8006f34 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f042 0201 	orr.w	r2, r2, #1
 8006f1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f20:	e008      	b.n	8006f34 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f042 0201 	orr.w	r2, r2, #1
 8006f30:	601a      	str	r2, [r3, #0]
 8006f32:	e000      	b.n	8006f36 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f34:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3714      	adds	r7, #20
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr
 8006f44:	40012c00 	.word	0x40012c00
 8006f48:	40000400 	.word	0x40000400
 8006f4c:	40000800 	.word	0x40000800
 8006f50:	40013400 	.word	0x40013400
 8006f54:	40014000 	.word	0x40014000
 8006f58:	40015000 	.word	0x40015000
 8006f5c:	00010007 	.word	0x00010007

08006f60 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	6a1a      	ldr	r2, [r3, #32]
 8006f6e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006f72:	4013      	ands	r3, r2
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d10f      	bne.n	8006f98 <HAL_TIM_Base_Stop+0x38>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	6a1a      	ldr	r2, [r3, #32]
 8006f7e:	f240 4344 	movw	r3, #1092	; 0x444
 8006f82:	4013      	ands	r3, r2
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d107      	bne.n	8006f98 <HAL_TIM_Base_Stop+0x38>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f022 0201 	bic.w	r2, r2, #1
 8006f96:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	370c      	adds	r7, #12
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
	...

08006fb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a42      	ldr	r2, [pc, #264]	; (80070cc <TIM_Base_SetConfig+0x11c>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d013      	beq.n	8006ff0 <TIM_Base_SetConfig+0x40>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fce:	d00f      	beq.n	8006ff0 <TIM_Base_SetConfig+0x40>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a3f      	ldr	r2, [pc, #252]	; (80070d0 <TIM_Base_SetConfig+0x120>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d00b      	beq.n	8006ff0 <TIM_Base_SetConfig+0x40>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a3e      	ldr	r2, [pc, #248]	; (80070d4 <TIM_Base_SetConfig+0x124>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d007      	beq.n	8006ff0 <TIM_Base_SetConfig+0x40>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a3d      	ldr	r2, [pc, #244]	; (80070d8 <TIM_Base_SetConfig+0x128>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d003      	beq.n	8006ff0 <TIM_Base_SetConfig+0x40>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a3c      	ldr	r2, [pc, #240]	; (80070dc <TIM_Base_SetConfig+0x12c>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d108      	bne.n	8007002 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a31      	ldr	r2, [pc, #196]	; (80070cc <TIM_Base_SetConfig+0x11c>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d01f      	beq.n	800704a <TIM_Base_SetConfig+0x9a>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007010:	d01b      	beq.n	800704a <TIM_Base_SetConfig+0x9a>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a2e      	ldr	r2, [pc, #184]	; (80070d0 <TIM_Base_SetConfig+0x120>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d017      	beq.n	800704a <TIM_Base_SetConfig+0x9a>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a2d      	ldr	r2, [pc, #180]	; (80070d4 <TIM_Base_SetConfig+0x124>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d013      	beq.n	800704a <TIM_Base_SetConfig+0x9a>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a2c      	ldr	r2, [pc, #176]	; (80070d8 <TIM_Base_SetConfig+0x128>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d00f      	beq.n	800704a <TIM_Base_SetConfig+0x9a>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a2c      	ldr	r2, [pc, #176]	; (80070e0 <TIM_Base_SetConfig+0x130>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d00b      	beq.n	800704a <TIM_Base_SetConfig+0x9a>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a2b      	ldr	r2, [pc, #172]	; (80070e4 <TIM_Base_SetConfig+0x134>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d007      	beq.n	800704a <TIM_Base_SetConfig+0x9a>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a2a      	ldr	r2, [pc, #168]	; (80070e8 <TIM_Base_SetConfig+0x138>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d003      	beq.n	800704a <TIM_Base_SetConfig+0x9a>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a25      	ldr	r2, [pc, #148]	; (80070dc <TIM_Base_SetConfig+0x12c>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d108      	bne.n	800705c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007050:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	4313      	orrs	r3, r2
 800705a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	4313      	orrs	r3, r2
 8007068:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	689a      	ldr	r2, [r3, #8]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4a12      	ldr	r2, [pc, #72]	; (80070cc <TIM_Base_SetConfig+0x11c>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d013      	beq.n	80070b0 <TIM_Base_SetConfig+0x100>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4a13      	ldr	r2, [pc, #76]	; (80070d8 <TIM_Base_SetConfig+0x128>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d00f      	beq.n	80070b0 <TIM_Base_SetConfig+0x100>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4a13      	ldr	r2, [pc, #76]	; (80070e0 <TIM_Base_SetConfig+0x130>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d00b      	beq.n	80070b0 <TIM_Base_SetConfig+0x100>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4a12      	ldr	r2, [pc, #72]	; (80070e4 <TIM_Base_SetConfig+0x134>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d007      	beq.n	80070b0 <TIM_Base_SetConfig+0x100>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4a11      	ldr	r2, [pc, #68]	; (80070e8 <TIM_Base_SetConfig+0x138>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d003      	beq.n	80070b0 <TIM_Base_SetConfig+0x100>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	4a0c      	ldr	r2, [pc, #48]	; (80070dc <TIM_Base_SetConfig+0x12c>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d103      	bne.n	80070b8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	691a      	ldr	r2, [r3, #16]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	615a      	str	r2, [r3, #20]
}
 80070be:	bf00      	nop
 80070c0:	3714      	adds	r7, #20
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	40012c00 	.word	0x40012c00
 80070d0:	40000400 	.word	0x40000400
 80070d4:	40000800 	.word	0x40000800
 80070d8:	40013400 	.word	0x40013400
 80070dc:	40015000 	.word	0x40015000
 80070e0:	40014000 	.word	0x40014000
 80070e4:	40014400 	.word	0x40014400
 80070e8:	40014800 	.word	0x40014800

080070ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b085      	sub	sp, #20
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d101      	bne.n	8007104 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007100:	2302      	movs	r3, #2
 8007102:	e06d      	b.n	80071e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2202      	movs	r2, #2
 8007110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a30      	ldr	r2, [pc, #192]	; (80071ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d009      	beq.n	8007142 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a2f      	ldr	r2, [pc, #188]	; (80071f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d004      	beq.n	8007142 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a2d      	ldr	r2, [pc, #180]	; (80071f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d108      	bne.n	8007154 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007148:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	68fa      	ldr	r2, [r7, #12]
 8007150:	4313      	orrs	r3, r2
 8007152:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800715a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	4313      	orrs	r3, r2
 8007164:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a1e      	ldr	r2, [pc, #120]	; (80071ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d01d      	beq.n	80071b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007180:	d018      	beq.n	80071b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a1c      	ldr	r2, [pc, #112]	; (80071f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d013      	beq.n	80071b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a1a      	ldr	r2, [pc, #104]	; (80071fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d00e      	beq.n	80071b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a15      	ldr	r2, [pc, #84]	; (80071f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d009      	beq.n	80071b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a16      	ldr	r2, [pc, #88]	; (8007200 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d004      	beq.n	80071b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a11      	ldr	r2, [pc, #68]	; (80071f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d10c      	bne.n	80071ce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	68ba      	ldr	r2, [r7, #8]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68ba      	ldr	r2, [r7, #8]
 80071cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2201      	movs	r2, #1
 80071d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3714      	adds	r7, #20
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr
 80071ec:	40012c00 	.word	0x40012c00
 80071f0:	40013400 	.word	0x40013400
 80071f4:	40015000 	.word	0x40015000
 80071f8:	40000400 	.word	0x40000400
 80071fc:	40000800 	.word	0x40000800
 8007200:	40014000 	.word	0x40014000

08007204 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d101      	bne.n	8007216 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	e040      	b.n	8007298 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800721a:	2b00      	cmp	r3, #0
 800721c:	d106      	bne.n	800722c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f7fa fb3c 	bl	80018a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2224      	movs	r2, #36	; 0x24
 8007230:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f022 0201 	bic.w	r2, r2, #1
 8007240:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 fbbe 	bl	80079c4 <UART_SetConfig>
 8007248:	4603      	mov	r3, r0
 800724a:	2b01      	cmp	r3, #1
 800724c:	d101      	bne.n	8007252 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e022      	b.n	8007298 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007256:	2b00      	cmp	r3, #0
 8007258:	d002      	beq.n	8007260 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 fd88 	bl	8007d70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	685a      	ldr	r2, [r3, #4]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800726e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	689a      	ldr	r2, [r3, #8]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800727e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f042 0201 	orr.w	r2, r2, #1
 800728e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 fe0f 	bl	8007eb4 <UART_CheckIdleState>
 8007296:	4603      	mov	r3, r0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3708      	adds	r7, #8
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b08a      	sub	sp, #40	; 0x28
 80072a4:	af02      	add	r7, sp, #8
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	603b      	str	r3, [r7, #0]
 80072ac:	4613      	mov	r3, r2
 80072ae:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072b4:	2b20      	cmp	r3, #32
 80072b6:	f040 8082 	bne.w	80073be <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d002      	beq.n	80072c6 <HAL_UART_Transmit+0x26>
 80072c0:	88fb      	ldrh	r3, [r7, #6]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d101      	bne.n	80072ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e07a      	b.n	80073c0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d101      	bne.n	80072d8 <HAL_UART_Transmit+0x38>
 80072d4:	2302      	movs	r3, #2
 80072d6:	e073      	b.n	80073c0 <HAL_UART_Transmit+0x120>
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2221      	movs	r2, #33	; 0x21
 80072ec:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80072ee:	f7fa fe25 	bl	8001f3c <HAL_GetTick>
 80072f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	88fa      	ldrh	r2, [r7, #6]
 80072f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	88fa      	ldrh	r2, [r7, #6]
 8007300:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800730c:	d108      	bne.n	8007320 <HAL_UART_Transmit+0x80>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d104      	bne.n	8007320 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007316:	2300      	movs	r3, #0
 8007318:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	61bb      	str	r3, [r7, #24]
 800731e:	e003      	b.n	8007328 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007324:	2300      	movs	r3, #0
 8007326:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2200      	movs	r2, #0
 800732c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007330:	e02d      	b.n	800738e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	2200      	movs	r2, #0
 800733a:	2180      	movs	r1, #128	; 0x80
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f000 fe02 	bl	8007f46 <UART_WaitOnFlagUntilTimeout>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d001      	beq.n	800734c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007348:	2303      	movs	r3, #3
 800734a:	e039      	b.n	80073c0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d10b      	bne.n	800736a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	881a      	ldrh	r2, [r3, #0]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800735e:	b292      	uxth	r2, r2
 8007360:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	3302      	adds	r3, #2
 8007366:	61bb      	str	r3, [r7, #24]
 8007368:	e008      	b.n	800737c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	781a      	ldrb	r2, [r3, #0]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	b292      	uxth	r2, r2
 8007374:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	3301      	adds	r3, #1
 800737a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007382:	b29b      	uxth	r3, r3
 8007384:	3b01      	subs	r3, #1
 8007386:	b29a      	uxth	r2, r3
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007394:	b29b      	uxth	r3, r3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d1cb      	bne.n	8007332 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	9300      	str	r3, [sp, #0]
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	2200      	movs	r2, #0
 80073a2:	2140      	movs	r1, #64	; 0x40
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f000 fdce 	bl	8007f46 <UART_WaitOnFlagUntilTimeout>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d001      	beq.n	80073b4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80073b0:	2303      	movs	r3, #3
 80073b2:	e005      	b.n	80073c0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2220      	movs	r2, #32
 80073b8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80073ba:	2300      	movs	r3, #0
 80073bc:	e000      	b.n	80073c0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80073be:	2302      	movs	r3, #2
  }
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3720      	adds	r7, #32
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b0ba      	sub	sp, #232	; 0xe8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	69db      	ldr	r3, [r3, #28]
 80073d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80073ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80073f2:	f640 030f 	movw	r3, #2063	; 0x80f
 80073f6:	4013      	ands	r3, r2
 80073f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80073fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007400:	2b00      	cmp	r3, #0
 8007402:	d115      	bne.n	8007430 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007408:	f003 0320 	and.w	r3, r3, #32
 800740c:	2b00      	cmp	r3, #0
 800740e:	d00f      	beq.n	8007430 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007414:	f003 0320 	and.w	r3, r3, #32
 8007418:	2b00      	cmp	r3, #0
 800741a:	d009      	beq.n	8007430 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007420:	2b00      	cmp	r3, #0
 8007422:	f000 82a3 	beq.w	800796c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	4798      	blx	r3
      }
      return;
 800742e:	e29d      	b.n	800796c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007430:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007434:	2b00      	cmp	r3, #0
 8007436:	f000 8117 	beq.w	8007668 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800743a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800743e:	f003 0301 	and.w	r3, r3, #1
 8007442:	2b00      	cmp	r3, #0
 8007444:	d106      	bne.n	8007454 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007446:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800744a:	4b85      	ldr	r3, [pc, #532]	; (8007660 <HAL_UART_IRQHandler+0x298>)
 800744c:	4013      	ands	r3, r2
 800744e:	2b00      	cmp	r3, #0
 8007450:	f000 810a 	beq.w	8007668 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007458:	f003 0301 	and.w	r3, r3, #1
 800745c:	2b00      	cmp	r3, #0
 800745e:	d011      	beq.n	8007484 <HAL_UART_IRQHandler+0xbc>
 8007460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00b      	beq.n	8007484 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2201      	movs	r2, #1
 8007472:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800747a:	f043 0201 	orr.w	r2, r3, #1
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007488:	f003 0302 	and.w	r3, r3, #2
 800748c:	2b00      	cmp	r3, #0
 800748e:	d011      	beq.n	80074b4 <HAL_UART_IRQHandler+0xec>
 8007490:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007494:	f003 0301 	and.w	r3, r3, #1
 8007498:	2b00      	cmp	r3, #0
 800749a:	d00b      	beq.n	80074b4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2202      	movs	r2, #2
 80074a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074aa:	f043 0204 	orr.w	r2, r3, #4
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074b8:	f003 0304 	and.w	r3, r3, #4
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d011      	beq.n	80074e4 <HAL_UART_IRQHandler+0x11c>
 80074c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074c4:	f003 0301 	and.w	r3, r3, #1
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d00b      	beq.n	80074e4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2204      	movs	r2, #4
 80074d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074da:	f043 0202 	orr.w	r2, r3, #2
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80074e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074e8:	f003 0308 	and.w	r3, r3, #8
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d017      	beq.n	8007520 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80074f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074f4:	f003 0320 	and.w	r3, r3, #32
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d105      	bne.n	8007508 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80074fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007500:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007504:	2b00      	cmp	r3, #0
 8007506:	d00b      	beq.n	8007520 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2208      	movs	r2, #8
 800750e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007516:	f043 0208 	orr.w	r2, r3, #8
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007524:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007528:	2b00      	cmp	r3, #0
 800752a:	d012      	beq.n	8007552 <HAL_UART_IRQHandler+0x18a>
 800752c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007530:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007534:	2b00      	cmp	r3, #0
 8007536:	d00c      	beq.n	8007552 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007540:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007548:	f043 0220 	orr.w	r2, r3, #32
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007558:	2b00      	cmp	r3, #0
 800755a:	f000 8209 	beq.w	8007970 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800755e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007562:	f003 0320 	and.w	r3, r3, #32
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00d      	beq.n	8007586 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800756a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800756e:	f003 0320 	and.w	r3, r3, #32
 8007572:	2b00      	cmp	r3, #0
 8007574:	d007      	beq.n	8007586 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800757a:	2b00      	cmp	r3, #0
 800757c:	d003      	beq.n	8007586 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800758c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800759a:	2b40      	cmp	r3, #64	; 0x40
 800759c:	d005      	beq.n	80075aa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800759e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80075a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d04f      	beq.n	800764a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 fd8f 	bl	80080ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ba:	2b40      	cmp	r3, #64	; 0x40
 80075bc:	d141      	bne.n	8007642 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	3308      	adds	r3, #8
 80075c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075cc:	e853 3f00 	ldrex	r3, [r3]
 80075d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80075d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	3308      	adds	r3, #8
 80075e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80075ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80075ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80075f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80075fa:	e841 2300 	strex	r3, r2, [r1]
 80075fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007602:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007606:	2b00      	cmp	r3, #0
 8007608:	d1d9      	bne.n	80075be <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800760e:	2b00      	cmp	r3, #0
 8007610:	d013      	beq.n	800763a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007616:	4a13      	ldr	r2, [pc, #76]	; (8007664 <HAL_UART_IRQHandler+0x29c>)
 8007618:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800761e:	4618      	mov	r0, r3
 8007620:	f7fc fa7e 	bl	8003b20 <HAL_DMA_Abort_IT>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d017      	beq.n	800765a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800762e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007634:	4610      	mov	r0, r2
 8007636:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007638:	e00f      	b.n	800765a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 f9ac 	bl	8007998 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007640:	e00b      	b.n	800765a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 f9a8 	bl	8007998 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007648:	e007      	b.n	800765a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f9a4 	bl	8007998 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007658:	e18a      	b.n	8007970 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800765a:	bf00      	nop
    return;
 800765c:	e188      	b.n	8007970 <HAL_UART_IRQHandler+0x5a8>
 800765e:	bf00      	nop
 8007660:	04000120 	.word	0x04000120
 8007664:	08008195 	.word	0x08008195

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800766c:	2b01      	cmp	r3, #1
 800766e:	f040 8143 	bne.w	80078f8 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007676:	f003 0310 	and.w	r3, r3, #16
 800767a:	2b00      	cmp	r3, #0
 800767c:	f000 813c 	beq.w	80078f8 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007684:	f003 0310 	and.w	r3, r3, #16
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 8135 	beq.w	80078f8 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2210      	movs	r2, #16
 8007694:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a0:	2b40      	cmp	r3, #64	; 0x40
 80076a2:	f040 80b1 	bne.w	8007808 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80076b2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f000 815c 	beq.w	8007974 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80076c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80076c6:	429a      	cmp	r2, r3
 80076c8:	f080 8154 	bcs.w	8007974 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80076d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076da:	699b      	ldr	r3, [r3, #24]
 80076dc:	2b20      	cmp	r3, #32
 80076de:	f000 8085 	beq.w	80077ec <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80076ee:	e853 3f00 	ldrex	r3, [r3]
 80076f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80076f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	461a      	mov	r2, r3
 8007708:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800770c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007710:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007714:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007718:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800771c:	e841 2300 	strex	r3, r2, [r1]
 8007720:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007724:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1da      	bne.n	80076e2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	3308      	adds	r3, #8
 8007732:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007734:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007736:	e853 3f00 	ldrex	r3, [r3]
 800773a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800773c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800773e:	f023 0301 	bic.w	r3, r3, #1
 8007742:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	3308      	adds	r3, #8
 800774c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007750:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007754:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007756:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007758:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800775c:	e841 2300 	strex	r3, r2, [r1]
 8007760:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007762:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007764:	2b00      	cmp	r3, #0
 8007766:	d1e1      	bne.n	800772c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	3308      	adds	r3, #8
 800776e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007770:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007772:	e853 3f00 	ldrex	r3, [r3]
 8007776:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007778:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800777a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800777e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	3308      	adds	r3, #8
 8007788:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800778c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800778e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007790:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007792:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007794:	e841 2300 	strex	r3, r2, [r1]
 8007798:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800779a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800779c:	2b00      	cmp	r3, #0
 800779e:	d1e3      	bne.n	8007768 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2220      	movs	r2, #32
 80077a4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077b4:	e853 3f00 	ldrex	r3, [r3]
 80077b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80077ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077bc:	f023 0310 	bic.w	r3, r3, #16
 80077c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	461a      	mov	r2, r3
 80077ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80077d0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80077d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80077d6:	e841 2300 	strex	r3, r2, [r1]
 80077da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80077dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d1e4      	bne.n	80077ac <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7fc f961 	bl	8003aae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	1ad3      	subs	r3, r2, r3
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	4619      	mov	r1, r3
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 f8d3 	bl	80079ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007806:	e0b5      	b.n	8007974 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007814:	b29b      	uxth	r3, r3
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007822:	b29b      	uxth	r3, r3
 8007824:	2b00      	cmp	r3, #0
 8007826:	f000 80a7 	beq.w	8007978 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800782a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800782e:	2b00      	cmp	r3, #0
 8007830:	f000 80a2 	beq.w	8007978 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800783c:	e853 3f00 	ldrex	r3, [r3]
 8007840:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007844:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007848:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	461a      	mov	r2, r3
 8007852:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007856:	647b      	str	r3, [r7, #68]	; 0x44
 8007858:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800785c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800785e:	e841 2300 	strex	r3, r2, [r1]
 8007862:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007866:	2b00      	cmp	r3, #0
 8007868:	d1e4      	bne.n	8007834 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	3308      	adds	r3, #8
 8007870:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007874:	e853 3f00 	ldrex	r3, [r3]
 8007878:	623b      	str	r3, [r7, #32]
   return(result);
 800787a:	6a3b      	ldr	r3, [r7, #32]
 800787c:	f023 0301 	bic.w	r3, r3, #1
 8007880:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	3308      	adds	r3, #8
 800788a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800788e:	633a      	str	r2, [r7, #48]	; 0x30
 8007890:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007892:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007896:	e841 2300 	strex	r3, r2, [r1]
 800789a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800789c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d1e3      	bne.n	800786a <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2220      	movs	r2, #32
 80078a6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	e853 3f00 	ldrex	r3, [r3]
 80078c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f023 0310 	bic.w	r3, r3, #16
 80078c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	461a      	mov	r2, r3
 80078d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80078d6:	61fb      	str	r3, [r7, #28]
 80078d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078da:	69b9      	ldr	r1, [r7, #24]
 80078dc:	69fa      	ldr	r2, [r7, #28]
 80078de:	e841 2300 	strex	r3, r2, [r1]
 80078e2:	617b      	str	r3, [r7, #20]
   return(result);
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d1e4      	bne.n	80078b4 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80078ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80078ee:	4619      	mov	r1, r3
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 f85b 	bl	80079ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80078f6:	e03f      	b.n	8007978 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80078f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00e      	beq.n	8007922 <HAL_UART_IRQHandler+0x55a>
 8007904:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007908:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800790c:	2b00      	cmp	r3, #0
 800790e:	d008      	beq.n	8007922 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007918:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 fc7a 	bl	8008214 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007920:	e02d      	b.n	800797e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00e      	beq.n	800794c <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800792e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007936:	2b00      	cmp	r3, #0
 8007938:	d008      	beq.n	800794c <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800793e:	2b00      	cmp	r3, #0
 8007940:	d01c      	beq.n	800797c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	4798      	blx	r3
    }
    return;
 800794a:	e017      	b.n	800797c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800794c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007954:	2b00      	cmp	r3, #0
 8007956:	d012      	beq.n	800797e <HAL_UART_IRQHandler+0x5b6>
 8007958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800795c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007960:	2b00      	cmp	r3, #0
 8007962:	d00c      	beq.n	800797e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 fc2b 	bl	80081c0 <UART_EndTransmit_IT>
    return;
 800796a:	e008      	b.n	800797e <HAL_UART_IRQHandler+0x5b6>
      return;
 800796c:	bf00      	nop
 800796e:	e006      	b.n	800797e <HAL_UART_IRQHandler+0x5b6>
    return;
 8007970:	bf00      	nop
 8007972:	e004      	b.n	800797e <HAL_UART_IRQHandler+0x5b6>
      return;
 8007974:	bf00      	nop
 8007976:	e002      	b.n	800797e <HAL_UART_IRQHandler+0x5b6>
      return;
 8007978:	bf00      	nop
 800797a:	e000      	b.n	800797e <HAL_UART_IRQHandler+0x5b6>
    return;
 800797c:	bf00      	nop
  }

}
 800797e:	37e8      	adds	r7, #232	; 0xe8
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800798c:	bf00      	nop
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80079a0:	bf00      	nop
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	460b      	mov	r3, r1
 80079b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80079b8:	bf00      	nop
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b088      	sub	sp, #32
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80079cc:	2300      	movs	r3, #0
 80079ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	689a      	ldr	r2, [r3, #8]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	691b      	ldr	r3, [r3, #16]
 80079d8:	431a      	orrs	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	695b      	ldr	r3, [r3, #20]
 80079de:	431a      	orrs	r2, r3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	69db      	ldr	r3, [r3, #28]
 80079e4:	4313      	orrs	r3, r2
 80079e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	4b92      	ldr	r3, [pc, #584]	; (8007c38 <UART_SetConfig+0x274>)
 80079f0:	4013      	ands	r3, r2
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	6812      	ldr	r2, [r2, #0]
 80079f6:	6979      	ldr	r1, [r7, #20]
 80079f8:	430b      	orrs	r3, r1
 80079fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	68da      	ldr	r2, [r3, #12]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	430a      	orrs	r2, r1
 8007a10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6a1b      	ldr	r3, [r3, #32]
 8007a1c:	697a      	ldr	r2, [r7, #20]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	697a      	ldr	r2, [r7, #20]
 8007a32:	430a      	orrs	r2, r1
 8007a34:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a80      	ldr	r2, [pc, #512]	; (8007c3c <UART_SetConfig+0x278>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d120      	bne.n	8007a82 <UART_SetConfig+0xbe>
 8007a40:	4b7f      	ldr	r3, [pc, #508]	; (8007c40 <UART_SetConfig+0x27c>)
 8007a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a44:	f003 0303 	and.w	r3, r3, #3
 8007a48:	2b03      	cmp	r3, #3
 8007a4a:	d817      	bhi.n	8007a7c <UART_SetConfig+0xb8>
 8007a4c:	a201      	add	r2, pc, #4	; (adr r2, 8007a54 <UART_SetConfig+0x90>)
 8007a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a52:	bf00      	nop
 8007a54:	08007a65 	.word	0x08007a65
 8007a58:	08007a71 	.word	0x08007a71
 8007a5c:	08007a77 	.word	0x08007a77
 8007a60:	08007a6b 	.word	0x08007a6b
 8007a64:	2301      	movs	r3, #1
 8007a66:	77fb      	strb	r3, [r7, #31]
 8007a68:	e0b5      	b.n	8007bd6 <UART_SetConfig+0x212>
 8007a6a:	2302      	movs	r3, #2
 8007a6c:	77fb      	strb	r3, [r7, #31]
 8007a6e:	e0b2      	b.n	8007bd6 <UART_SetConfig+0x212>
 8007a70:	2304      	movs	r3, #4
 8007a72:	77fb      	strb	r3, [r7, #31]
 8007a74:	e0af      	b.n	8007bd6 <UART_SetConfig+0x212>
 8007a76:	2308      	movs	r3, #8
 8007a78:	77fb      	strb	r3, [r7, #31]
 8007a7a:	e0ac      	b.n	8007bd6 <UART_SetConfig+0x212>
 8007a7c:	2310      	movs	r3, #16
 8007a7e:	77fb      	strb	r3, [r7, #31]
 8007a80:	e0a9      	b.n	8007bd6 <UART_SetConfig+0x212>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a6f      	ldr	r2, [pc, #444]	; (8007c44 <UART_SetConfig+0x280>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d124      	bne.n	8007ad6 <UART_SetConfig+0x112>
 8007a8c:	4b6c      	ldr	r3, [pc, #432]	; (8007c40 <UART_SetConfig+0x27c>)
 8007a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007a94:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007a98:	d011      	beq.n	8007abe <UART_SetConfig+0xfa>
 8007a9a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007a9e:	d817      	bhi.n	8007ad0 <UART_SetConfig+0x10c>
 8007aa0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007aa4:	d011      	beq.n	8007aca <UART_SetConfig+0x106>
 8007aa6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007aaa:	d811      	bhi.n	8007ad0 <UART_SetConfig+0x10c>
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d003      	beq.n	8007ab8 <UART_SetConfig+0xf4>
 8007ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ab4:	d006      	beq.n	8007ac4 <UART_SetConfig+0x100>
 8007ab6:	e00b      	b.n	8007ad0 <UART_SetConfig+0x10c>
 8007ab8:	2300      	movs	r3, #0
 8007aba:	77fb      	strb	r3, [r7, #31]
 8007abc:	e08b      	b.n	8007bd6 <UART_SetConfig+0x212>
 8007abe:	2302      	movs	r3, #2
 8007ac0:	77fb      	strb	r3, [r7, #31]
 8007ac2:	e088      	b.n	8007bd6 <UART_SetConfig+0x212>
 8007ac4:	2304      	movs	r3, #4
 8007ac6:	77fb      	strb	r3, [r7, #31]
 8007ac8:	e085      	b.n	8007bd6 <UART_SetConfig+0x212>
 8007aca:	2308      	movs	r3, #8
 8007acc:	77fb      	strb	r3, [r7, #31]
 8007ace:	e082      	b.n	8007bd6 <UART_SetConfig+0x212>
 8007ad0:	2310      	movs	r3, #16
 8007ad2:	77fb      	strb	r3, [r7, #31]
 8007ad4:	e07f      	b.n	8007bd6 <UART_SetConfig+0x212>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a5b      	ldr	r2, [pc, #364]	; (8007c48 <UART_SetConfig+0x284>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d124      	bne.n	8007b2a <UART_SetConfig+0x166>
 8007ae0:	4b57      	ldr	r3, [pc, #348]	; (8007c40 <UART_SetConfig+0x27c>)
 8007ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007ae8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007aec:	d011      	beq.n	8007b12 <UART_SetConfig+0x14e>
 8007aee:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007af2:	d817      	bhi.n	8007b24 <UART_SetConfig+0x160>
 8007af4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007af8:	d011      	beq.n	8007b1e <UART_SetConfig+0x15a>
 8007afa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007afe:	d811      	bhi.n	8007b24 <UART_SetConfig+0x160>
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d003      	beq.n	8007b0c <UART_SetConfig+0x148>
 8007b04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007b08:	d006      	beq.n	8007b18 <UART_SetConfig+0x154>
 8007b0a:	e00b      	b.n	8007b24 <UART_SetConfig+0x160>
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	77fb      	strb	r3, [r7, #31]
 8007b10:	e061      	b.n	8007bd6 <UART_SetConfig+0x212>
 8007b12:	2302      	movs	r3, #2
 8007b14:	77fb      	strb	r3, [r7, #31]
 8007b16:	e05e      	b.n	8007bd6 <UART_SetConfig+0x212>
 8007b18:	2304      	movs	r3, #4
 8007b1a:	77fb      	strb	r3, [r7, #31]
 8007b1c:	e05b      	b.n	8007bd6 <UART_SetConfig+0x212>
 8007b1e:	2308      	movs	r3, #8
 8007b20:	77fb      	strb	r3, [r7, #31]
 8007b22:	e058      	b.n	8007bd6 <UART_SetConfig+0x212>
 8007b24:	2310      	movs	r3, #16
 8007b26:	77fb      	strb	r3, [r7, #31]
 8007b28:	e055      	b.n	8007bd6 <UART_SetConfig+0x212>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a47      	ldr	r2, [pc, #284]	; (8007c4c <UART_SetConfig+0x288>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d124      	bne.n	8007b7e <UART_SetConfig+0x1ba>
 8007b34:	4b42      	ldr	r3, [pc, #264]	; (8007c40 <UART_SetConfig+0x27c>)
 8007b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b38:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007b3c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b40:	d011      	beq.n	8007b66 <UART_SetConfig+0x1a2>
 8007b42:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b46:	d817      	bhi.n	8007b78 <UART_SetConfig+0x1b4>
 8007b48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b4c:	d011      	beq.n	8007b72 <UART_SetConfig+0x1ae>
 8007b4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b52:	d811      	bhi.n	8007b78 <UART_SetConfig+0x1b4>
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d003      	beq.n	8007b60 <UART_SetConfig+0x19c>
 8007b58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b5c:	d006      	beq.n	8007b6c <UART_SetConfig+0x1a8>
 8007b5e:	e00b      	b.n	8007b78 <UART_SetConfig+0x1b4>
 8007b60:	2300      	movs	r3, #0
 8007b62:	77fb      	strb	r3, [r7, #31]
 8007b64:	e037      	b.n	8007bd6 <UART_SetConfig+0x212>
 8007b66:	2302      	movs	r3, #2
 8007b68:	77fb      	strb	r3, [r7, #31]
 8007b6a:	e034      	b.n	8007bd6 <UART_SetConfig+0x212>
 8007b6c:	2304      	movs	r3, #4
 8007b6e:	77fb      	strb	r3, [r7, #31]
 8007b70:	e031      	b.n	8007bd6 <UART_SetConfig+0x212>
 8007b72:	2308      	movs	r3, #8
 8007b74:	77fb      	strb	r3, [r7, #31]
 8007b76:	e02e      	b.n	8007bd6 <UART_SetConfig+0x212>
 8007b78:	2310      	movs	r3, #16
 8007b7a:	77fb      	strb	r3, [r7, #31]
 8007b7c:	e02b      	b.n	8007bd6 <UART_SetConfig+0x212>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a33      	ldr	r2, [pc, #204]	; (8007c50 <UART_SetConfig+0x28c>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d124      	bne.n	8007bd2 <UART_SetConfig+0x20e>
 8007b88:	4b2d      	ldr	r3, [pc, #180]	; (8007c40 <UART_SetConfig+0x27c>)
 8007b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b8c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007b90:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007b94:	d011      	beq.n	8007bba <UART_SetConfig+0x1f6>
 8007b96:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007b9a:	d817      	bhi.n	8007bcc <UART_SetConfig+0x208>
 8007b9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ba0:	d011      	beq.n	8007bc6 <UART_SetConfig+0x202>
 8007ba2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ba6:	d811      	bhi.n	8007bcc <UART_SetConfig+0x208>
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d003      	beq.n	8007bb4 <UART_SetConfig+0x1f0>
 8007bac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bb0:	d006      	beq.n	8007bc0 <UART_SetConfig+0x1fc>
 8007bb2:	e00b      	b.n	8007bcc <UART_SetConfig+0x208>
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	77fb      	strb	r3, [r7, #31]
 8007bb8:	e00d      	b.n	8007bd6 <UART_SetConfig+0x212>
 8007bba:	2302      	movs	r3, #2
 8007bbc:	77fb      	strb	r3, [r7, #31]
 8007bbe:	e00a      	b.n	8007bd6 <UART_SetConfig+0x212>
 8007bc0:	2304      	movs	r3, #4
 8007bc2:	77fb      	strb	r3, [r7, #31]
 8007bc4:	e007      	b.n	8007bd6 <UART_SetConfig+0x212>
 8007bc6:	2308      	movs	r3, #8
 8007bc8:	77fb      	strb	r3, [r7, #31]
 8007bca:	e004      	b.n	8007bd6 <UART_SetConfig+0x212>
 8007bcc:	2310      	movs	r3, #16
 8007bce:	77fb      	strb	r3, [r7, #31]
 8007bd0:	e001      	b.n	8007bd6 <UART_SetConfig+0x212>
 8007bd2:	2310      	movs	r3, #16
 8007bd4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	69db      	ldr	r3, [r3, #28]
 8007bda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bde:	d16c      	bne.n	8007cba <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8007be0:	7ffb      	ldrb	r3, [r7, #31]
 8007be2:	2b08      	cmp	r3, #8
 8007be4:	d838      	bhi.n	8007c58 <UART_SetConfig+0x294>
 8007be6:	a201      	add	r2, pc, #4	; (adr r2, 8007bec <UART_SetConfig+0x228>)
 8007be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bec:	08007c11 	.word	0x08007c11
 8007bf0:	08007c19 	.word	0x08007c19
 8007bf4:	08007c21 	.word	0x08007c21
 8007bf8:	08007c59 	.word	0x08007c59
 8007bfc:	08007c27 	.word	0x08007c27
 8007c00:	08007c59 	.word	0x08007c59
 8007c04:	08007c59 	.word	0x08007c59
 8007c08:	08007c59 	.word	0x08007c59
 8007c0c:	08007c2f 	.word	0x08007c2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c10:	f7fd fcfa 	bl	8005608 <HAL_RCC_GetPCLK1Freq>
 8007c14:	61b8      	str	r0, [r7, #24]
        break;
 8007c16:	e024      	b.n	8007c62 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c18:	f7fd fd18 	bl	800564c <HAL_RCC_GetPCLK2Freq>
 8007c1c:	61b8      	str	r0, [r7, #24]
        break;
 8007c1e:	e020      	b.n	8007c62 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c20:	4b0c      	ldr	r3, [pc, #48]	; (8007c54 <UART_SetConfig+0x290>)
 8007c22:	61bb      	str	r3, [r7, #24]
        break;
 8007c24:	e01d      	b.n	8007c62 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c26:	f7fd fc79 	bl	800551c <HAL_RCC_GetSysClockFreq>
 8007c2a:	61b8      	str	r0, [r7, #24]
        break;
 8007c2c:	e019      	b.n	8007c62 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c32:	61bb      	str	r3, [r7, #24]
        break;
 8007c34:	e015      	b.n	8007c62 <UART_SetConfig+0x29e>
 8007c36:	bf00      	nop
 8007c38:	efff69f3 	.word	0xefff69f3
 8007c3c:	40013800 	.word	0x40013800
 8007c40:	40021000 	.word	0x40021000
 8007c44:	40004400 	.word	0x40004400
 8007c48:	40004800 	.word	0x40004800
 8007c4c:	40004c00 	.word	0x40004c00
 8007c50:	40005000 	.word	0x40005000
 8007c54:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	77bb      	strb	r3, [r7, #30]
        break;
 8007c60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d075      	beq.n	8007d54 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	005a      	lsls	r2, r3, #1
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	085b      	lsrs	r3, r3, #1
 8007c72:	441a      	add	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	2b0f      	cmp	r3, #15
 8007c84:	d916      	bls.n	8007cb4 <UART_SetConfig+0x2f0>
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c8c:	d212      	bcs.n	8007cb4 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	f023 030f 	bic.w	r3, r3, #15
 8007c96:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	085b      	lsrs	r3, r3, #1
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	f003 0307 	and.w	r3, r3, #7
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	89fb      	ldrh	r3, [r7, #14]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	89fa      	ldrh	r2, [r7, #14]
 8007cb0:	60da      	str	r2, [r3, #12]
 8007cb2:	e04f      	b.n	8007d54 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	77bb      	strb	r3, [r7, #30]
 8007cb8:	e04c      	b.n	8007d54 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007cba:	7ffb      	ldrb	r3, [r7, #31]
 8007cbc:	2b08      	cmp	r3, #8
 8007cbe:	d828      	bhi.n	8007d12 <UART_SetConfig+0x34e>
 8007cc0:	a201      	add	r2, pc, #4	; (adr r2, 8007cc8 <UART_SetConfig+0x304>)
 8007cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc6:	bf00      	nop
 8007cc8:	08007ced 	.word	0x08007ced
 8007ccc:	08007cf5 	.word	0x08007cf5
 8007cd0:	08007cfd 	.word	0x08007cfd
 8007cd4:	08007d13 	.word	0x08007d13
 8007cd8:	08007d03 	.word	0x08007d03
 8007cdc:	08007d13 	.word	0x08007d13
 8007ce0:	08007d13 	.word	0x08007d13
 8007ce4:	08007d13 	.word	0x08007d13
 8007ce8:	08007d0b 	.word	0x08007d0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cec:	f7fd fc8c 	bl	8005608 <HAL_RCC_GetPCLK1Freq>
 8007cf0:	61b8      	str	r0, [r7, #24]
        break;
 8007cf2:	e013      	b.n	8007d1c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cf4:	f7fd fcaa 	bl	800564c <HAL_RCC_GetPCLK2Freq>
 8007cf8:	61b8      	str	r0, [r7, #24]
        break;
 8007cfa:	e00f      	b.n	8007d1c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cfc:	4b1b      	ldr	r3, [pc, #108]	; (8007d6c <UART_SetConfig+0x3a8>)
 8007cfe:	61bb      	str	r3, [r7, #24]
        break;
 8007d00:	e00c      	b.n	8007d1c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d02:	f7fd fc0b 	bl	800551c <HAL_RCC_GetSysClockFreq>
 8007d06:	61b8      	str	r0, [r7, #24]
        break;
 8007d08:	e008      	b.n	8007d1c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d0e:	61bb      	str	r3, [r7, #24]
        break;
 8007d10:	e004      	b.n	8007d1c <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8007d12:	2300      	movs	r3, #0
 8007d14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	77bb      	strb	r3, [r7, #30]
        break;
 8007d1a:	bf00      	nop
    }

    if (pclk != 0U)
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d018      	beq.n	8007d54 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	085a      	lsrs	r2, r3, #1
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	441a      	add	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	2b0f      	cmp	r3, #15
 8007d3c:	d908      	bls.n	8007d50 <UART_SetConfig+0x38c>
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d44:	d204      	bcs.n	8007d50 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	693a      	ldr	r2, [r7, #16]
 8007d4c:	60da      	str	r2, [r3, #12]
 8007d4e:	e001      	b.n	8007d54 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007d60:	7fbb      	ldrb	r3, [r7, #30]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3720      	adds	r7, #32
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	007a1200 	.word	0x007a1200

08007d70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7c:	f003 0301 	and.w	r3, r3, #1
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00a      	beq.n	8007d9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	430a      	orrs	r2, r1
 8007d98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9e:	f003 0302 	and.w	r3, r3, #2
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d00a      	beq.n	8007dbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	430a      	orrs	r2, r1
 8007dba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc0:	f003 0304 	and.w	r3, r3, #4
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00a      	beq.n	8007dde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	430a      	orrs	r2, r1
 8007ddc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de2:	f003 0308 	and.w	r3, r3, #8
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00a      	beq.n	8007e00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	430a      	orrs	r2, r1
 8007dfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e04:	f003 0310 	and.w	r3, r3, #16
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d00a      	beq.n	8007e22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	430a      	orrs	r2, r1
 8007e20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e26:	f003 0320 	and.w	r3, r3, #32
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00a      	beq.n	8007e44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	430a      	orrs	r2, r1
 8007e42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d01a      	beq.n	8007e86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	430a      	orrs	r2, r1
 8007e64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e6e:	d10a      	bne.n	8007e86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	430a      	orrs	r2, r1
 8007e84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00a      	beq.n	8007ea8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	430a      	orrs	r2, r1
 8007ea6:	605a      	str	r2, [r3, #4]
  }
}
 8007ea8:	bf00      	nop
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b086      	sub	sp, #24
 8007eb8:	af02      	add	r7, sp, #8
 8007eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ec4:	f7fa f83a 	bl	8001f3c <HAL_GetTick>
 8007ec8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f003 0308 	and.w	r3, r3, #8
 8007ed4:	2b08      	cmp	r3, #8
 8007ed6:	d10e      	bne.n	8007ef6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ed8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007edc:	9300      	str	r3, [sp, #0]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 f82d 	bl	8007f46 <UART_WaitOnFlagUntilTimeout>
 8007eec:	4603      	mov	r3, r0
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d001      	beq.n	8007ef6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ef2:	2303      	movs	r3, #3
 8007ef4:	e023      	b.n	8007f3e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f003 0304 	and.w	r3, r3, #4
 8007f00:	2b04      	cmp	r3, #4
 8007f02:	d10e      	bne.n	8007f22 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f08:	9300      	str	r3, [sp, #0]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 f817 	bl	8007f46 <UART_WaitOnFlagUntilTimeout>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d001      	beq.n	8007f22 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f1e:	2303      	movs	r3, #3
 8007f20:	e00d      	b.n	8007f3e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2220      	movs	r2, #32
 8007f26:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2220      	movs	r2, #32
 8007f2c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3710      	adds	r7, #16
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b09c      	sub	sp, #112	; 0x70
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	60f8      	str	r0, [r7, #12]
 8007f4e:	60b9      	str	r1, [r7, #8]
 8007f50:	603b      	str	r3, [r7, #0]
 8007f52:	4613      	mov	r3, r2
 8007f54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f56:	e0a5      	b.n	80080a4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f5e:	f000 80a1 	beq.w	80080a4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f62:	f7f9 ffeb 	bl	8001f3c <HAL_GetTick>
 8007f66:	4602      	mov	r2, r0
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	1ad3      	subs	r3, r2, r3
 8007f6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d302      	bcc.n	8007f78 <UART_WaitOnFlagUntilTimeout+0x32>
 8007f72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d13e      	bne.n	8007ff6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f80:	e853 3f00 	ldrex	r3, [r3]
 8007f84:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f8c:	667b      	str	r3, [r7, #100]	; 0x64
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	461a      	mov	r2, r3
 8007f94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f98:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f9e:	e841 2300 	strex	r3, r2, [r1]
 8007fa2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007fa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d1e6      	bne.n	8007f78 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	3308      	adds	r3, #8
 8007fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fb4:	e853 3f00 	ldrex	r3, [r3]
 8007fb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fbc:	f023 0301 	bic.w	r3, r3, #1
 8007fc0:	663b      	str	r3, [r7, #96]	; 0x60
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	3308      	adds	r3, #8
 8007fc8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007fca:	64ba      	str	r2, [r7, #72]	; 0x48
 8007fcc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007fd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fd2:	e841 2300 	strex	r3, r2, [r1]
 8007fd6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007fd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d1e5      	bne.n	8007faa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2220      	movs	r2, #32
 8007fe2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2220      	movs	r2, #32
 8007fe8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	e067      	b.n	80080c6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f003 0304 	and.w	r3, r3, #4
 8008000:	2b00      	cmp	r3, #0
 8008002:	d04f      	beq.n	80080a4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	69db      	ldr	r3, [r3, #28]
 800800a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800800e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008012:	d147      	bne.n	80080a4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800801c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008026:	e853 3f00 	ldrex	r3, [r3]
 800802a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800802c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008032:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	461a      	mov	r2, r3
 800803a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800803c:	637b      	str	r3, [r7, #52]	; 0x34
 800803e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008040:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008042:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008044:	e841 2300 	strex	r3, r2, [r1]
 8008048:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800804a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800804c:	2b00      	cmp	r3, #0
 800804e:	d1e6      	bne.n	800801e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	3308      	adds	r3, #8
 8008056:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	e853 3f00 	ldrex	r3, [r3]
 800805e:	613b      	str	r3, [r7, #16]
   return(result);
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	f023 0301 	bic.w	r3, r3, #1
 8008066:	66bb      	str	r3, [r7, #104]	; 0x68
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	3308      	adds	r3, #8
 800806e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008070:	623a      	str	r2, [r7, #32]
 8008072:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008074:	69f9      	ldr	r1, [r7, #28]
 8008076:	6a3a      	ldr	r2, [r7, #32]
 8008078:	e841 2300 	strex	r3, r2, [r1]
 800807c:	61bb      	str	r3, [r7, #24]
   return(result);
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d1e5      	bne.n	8008050 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2220      	movs	r2, #32
 8008088:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2220      	movs	r2, #32
 800808e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2220      	movs	r2, #32
 8008094:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2200      	movs	r2, #0
 800809c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80080a0:	2303      	movs	r3, #3
 80080a2:	e010      	b.n	80080c6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	69da      	ldr	r2, [r3, #28]
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	4013      	ands	r3, r2
 80080ae:	68ba      	ldr	r2, [r7, #8]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	bf0c      	ite	eq
 80080b4:	2301      	moveq	r3, #1
 80080b6:	2300      	movne	r3, #0
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	461a      	mov	r2, r3
 80080bc:	79fb      	ldrb	r3, [r7, #7]
 80080be:	429a      	cmp	r2, r3
 80080c0:	f43f af4a 	beq.w	8007f58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3770      	adds	r7, #112	; 0x70
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80080ce:	b480      	push	{r7}
 80080d0:	b095      	sub	sp, #84	; 0x54
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080de:	e853 3f00 	ldrex	r3, [r3]
 80080e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80080e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	461a      	mov	r2, r3
 80080f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080f4:	643b      	str	r3, [r7, #64]	; 0x40
 80080f6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80080fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080fc:	e841 2300 	strex	r3, r2, [r1]
 8008100:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008104:	2b00      	cmp	r3, #0
 8008106:	d1e6      	bne.n	80080d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	3308      	adds	r3, #8
 800810e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008110:	6a3b      	ldr	r3, [r7, #32]
 8008112:	e853 3f00 	ldrex	r3, [r3]
 8008116:	61fb      	str	r3, [r7, #28]
   return(result);
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	f023 0301 	bic.w	r3, r3, #1
 800811e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	3308      	adds	r3, #8
 8008126:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008128:	62fa      	str	r2, [r7, #44]	; 0x2c
 800812a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800812e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008130:	e841 2300 	strex	r3, r2, [r1]
 8008134:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008138:	2b00      	cmp	r3, #0
 800813a:	d1e5      	bne.n	8008108 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008140:	2b01      	cmp	r3, #1
 8008142:	d118      	bne.n	8008176 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	e853 3f00 	ldrex	r3, [r3]
 8008150:	60bb      	str	r3, [r7, #8]
   return(result);
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	f023 0310 	bic.w	r3, r3, #16
 8008158:	647b      	str	r3, [r7, #68]	; 0x44
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	461a      	mov	r2, r3
 8008160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008162:	61bb      	str	r3, [r7, #24]
 8008164:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008166:	6979      	ldr	r1, [r7, #20]
 8008168:	69ba      	ldr	r2, [r7, #24]
 800816a:	e841 2300 	strex	r3, r2, [r1]
 800816e:	613b      	str	r3, [r7, #16]
   return(result);
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1e6      	bne.n	8008144 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2220      	movs	r2, #32
 800817a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008188:	bf00      	nop
 800818a:	3754      	adds	r7, #84	; 0x54
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2200      	movs	r2, #0
 80081ae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80081b2:	68f8      	ldr	r0, [r7, #12]
 80081b4:	f7ff fbf0 	bl	8007998 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081b8:	bf00      	nop
 80081ba:	3710      	adds	r7, #16
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b088      	sub	sp, #32
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	e853 3f00 	ldrex	r3, [r3]
 80081d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081dc:	61fb      	str	r3, [r7, #28]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	461a      	mov	r2, r3
 80081e4:	69fb      	ldr	r3, [r7, #28]
 80081e6:	61bb      	str	r3, [r7, #24]
 80081e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ea:	6979      	ldr	r1, [r7, #20]
 80081ec:	69ba      	ldr	r2, [r7, #24]
 80081ee:	e841 2300 	strex	r3, r2, [r1]
 80081f2:	613b      	str	r3, [r7, #16]
   return(result);
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d1e6      	bne.n	80081c8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2220      	movs	r2, #32
 80081fe:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f7ff fbbc 	bl	8007984 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800820c:	bf00      	nop
 800820e:	3720      	adds	r7, #32
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800821c:	bf00      	nop
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800822c:	4904      	ldr	r1, [pc, #16]	; (8008240 <MX_FATFS_Init+0x18>)
 800822e:	4805      	ldr	r0, [pc, #20]	; (8008244 <MX_FATFS_Init+0x1c>)
 8008230:	f003 ffa4 	bl	800c17c <FATFS_LinkDriver>
 8008234:	4603      	mov	r3, r0
 8008236:	461a      	mov	r2, r3
 8008238:	4b03      	ldr	r3, [pc, #12]	; (8008248 <MX_FATFS_Init+0x20>)
 800823a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800823c:	bf00      	nop
 800823e:	bd80      	pop	{r7, pc}
 8008240:	20004074 	.word	0x20004074
 8008244:	20000010 	.word	0x20000010
 8008248:	20004070 	.word	0x20004070

0800824c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800824c:	b480      	push	{r7}
 800824e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008250:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008252:	4618      	mov	r0, r3
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	4603      	mov	r3, r0
 8008264:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8008266:	79fb      	ldrb	r3, [r7, #7]
 8008268:	4618      	mov	r0, r3
 800826a:	f7f8 f9c5 	bl	80005f8 <SD_disk_initialize>
 800826e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008270:	4618      	mov	r0, r3
 8008272:	3708      	adds	r7, #8
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
 800827e:	4603      	mov	r3, r0
 8008280:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8008282:	79fb      	ldrb	r3, [r7, #7]
 8008284:	4618      	mov	r0, r3
 8008286:	f7f8 fa9d 	bl	80007c4 <SD_disk_status>
 800828a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800828c:	4618      	mov	r0, r3
 800828e:	3708      	adds	r7, #8
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	60b9      	str	r1, [r7, #8]
 800829c:	607a      	str	r2, [r7, #4]
 800829e:	603b      	str	r3, [r7, #0]
 80082a0:	4603      	mov	r3, r0
 80082a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 80082a4:	7bf8      	ldrb	r0, [r7, #15]
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	68b9      	ldr	r1, [r7, #8]
 80082ac:	f7f8 faa0 	bl	80007f0 <SD_disk_read>
 80082b0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b084      	sub	sp, #16
 80082be:	af00      	add	r7, sp, #0
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	607a      	str	r2, [r7, #4]
 80082c4:	603b      	str	r3, [r7, #0]
 80082c6:	4603      	mov	r3, r0
 80082c8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 80082ca:	7bf8      	ldrb	r0, [r7, #15]
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	68b9      	ldr	r1, [r7, #8]
 80082d2:	f7f8 faf7 	bl	80008c4 <SD_disk_write>
 80082d6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	4603      	mov	r3, r0
 80082e8:	603a      	str	r2, [r7, #0]
 80082ea:	71fb      	strb	r3, [r7, #7]
 80082ec:	460b      	mov	r3, r1
 80082ee:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 80082f0:	79b9      	ldrb	r1, [r7, #6]
 80082f2:	79fb      	ldrb	r3, [r7, #7]
 80082f4:	683a      	ldr	r2, [r7, #0]
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7f8 fb68 	bl	80009cc <SD_disk_ioctl>
 80082fc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3708      	adds	r7, #8
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
	...

08008308 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	4603      	mov	r3, r0
 8008310:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008312:	79fb      	ldrb	r3, [r7, #7]
 8008314:	4a08      	ldr	r2, [pc, #32]	; (8008338 <disk_status+0x30>)
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	4413      	add	r3, r2
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	79fa      	ldrb	r2, [r7, #7]
 8008320:	4905      	ldr	r1, [pc, #20]	; (8008338 <disk_status+0x30>)
 8008322:	440a      	add	r2, r1
 8008324:	7a12      	ldrb	r2, [r2, #8]
 8008326:	4610      	mov	r0, r2
 8008328:	4798      	blx	r3
 800832a:	4603      	mov	r3, r0
 800832c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800832e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008330:	4618      	mov	r0, r3
 8008332:	3710      	adds	r7, #16
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	20004298 	.word	0x20004298

0800833c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	4603      	mov	r3, r0
 8008344:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008346:	2300      	movs	r3, #0
 8008348:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800834a:	79fb      	ldrb	r3, [r7, #7]
 800834c:	4a0d      	ldr	r2, [pc, #52]	; (8008384 <disk_initialize+0x48>)
 800834e:	5cd3      	ldrb	r3, [r2, r3]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d111      	bne.n	8008378 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8008354:	79fb      	ldrb	r3, [r7, #7]
 8008356:	4a0b      	ldr	r2, [pc, #44]	; (8008384 <disk_initialize+0x48>)
 8008358:	2101      	movs	r1, #1
 800835a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800835c:	79fb      	ldrb	r3, [r7, #7]
 800835e:	4a09      	ldr	r2, [pc, #36]	; (8008384 <disk_initialize+0x48>)
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	4413      	add	r3, r2
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	79fa      	ldrb	r2, [r7, #7]
 800836a:	4906      	ldr	r1, [pc, #24]	; (8008384 <disk_initialize+0x48>)
 800836c:	440a      	add	r2, r1
 800836e:	7a12      	ldrb	r2, [r2, #8]
 8008370:	4610      	mov	r0, r2
 8008372:	4798      	blx	r3
 8008374:	4603      	mov	r3, r0
 8008376:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008378:	7bfb      	ldrb	r3, [r7, #15]
}
 800837a:	4618      	mov	r0, r3
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	20004298 	.word	0x20004298

08008388 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008388:	b590      	push	{r4, r7, lr}
 800838a:	b087      	sub	sp, #28
 800838c:	af00      	add	r7, sp, #0
 800838e:	60b9      	str	r1, [r7, #8]
 8008390:	607a      	str	r2, [r7, #4]
 8008392:	603b      	str	r3, [r7, #0]
 8008394:	4603      	mov	r3, r0
 8008396:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008398:	7bfb      	ldrb	r3, [r7, #15]
 800839a:	4a0a      	ldr	r2, [pc, #40]	; (80083c4 <disk_read+0x3c>)
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	4413      	add	r3, r2
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	689c      	ldr	r4, [r3, #8]
 80083a4:	7bfb      	ldrb	r3, [r7, #15]
 80083a6:	4a07      	ldr	r2, [pc, #28]	; (80083c4 <disk_read+0x3c>)
 80083a8:	4413      	add	r3, r2
 80083aa:	7a18      	ldrb	r0, [r3, #8]
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	68b9      	ldr	r1, [r7, #8]
 80083b2:	47a0      	blx	r4
 80083b4:	4603      	mov	r3, r0
 80083b6:	75fb      	strb	r3, [r7, #23]
  return res;
 80083b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	371c      	adds	r7, #28
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd90      	pop	{r4, r7, pc}
 80083c2:	bf00      	nop
 80083c4:	20004298 	.word	0x20004298

080083c8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80083c8:	b590      	push	{r4, r7, lr}
 80083ca:	b087      	sub	sp, #28
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60b9      	str	r1, [r7, #8]
 80083d0:	607a      	str	r2, [r7, #4]
 80083d2:	603b      	str	r3, [r7, #0]
 80083d4:	4603      	mov	r3, r0
 80083d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80083d8:	7bfb      	ldrb	r3, [r7, #15]
 80083da:	4a0a      	ldr	r2, [pc, #40]	; (8008404 <disk_write+0x3c>)
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	4413      	add	r3, r2
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	68dc      	ldr	r4, [r3, #12]
 80083e4:	7bfb      	ldrb	r3, [r7, #15]
 80083e6:	4a07      	ldr	r2, [pc, #28]	; (8008404 <disk_write+0x3c>)
 80083e8:	4413      	add	r3, r2
 80083ea:	7a18      	ldrb	r0, [r3, #8]
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	68b9      	ldr	r1, [r7, #8]
 80083f2:	47a0      	blx	r4
 80083f4:	4603      	mov	r3, r0
 80083f6:	75fb      	strb	r3, [r7, #23]
  return res;
 80083f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	371c      	adds	r7, #28
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd90      	pop	{r4, r7, pc}
 8008402:	bf00      	nop
 8008404:	20004298 	.word	0x20004298

08008408 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	4603      	mov	r3, r0
 8008410:	603a      	str	r2, [r7, #0]
 8008412:	71fb      	strb	r3, [r7, #7]
 8008414:	460b      	mov	r3, r1
 8008416:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008418:	79fb      	ldrb	r3, [r7, #7]
 800841a:	4a09      	ldr	r2, [pc, #36]	; (8008440 <disk_ioctl+0x38>)
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	4413      	add	r3, r2
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	691b      	ldr	r3, [r3, #16]
 8008424:	79fa      	ldrb	r2, [r7, #7]
 8008426:	4906      	ldr	r1, [pc, #24]	; (8008440 <disk_ioctl+0x38>)
 8008428:	440a      	add	r2, r1
 800842a:	7a10      	ldrb	r0, [r2, #8]
 800842c:	79b9      	ldrb	r1, [r7, #6]
 800842e:	683a      	ldr	r2, [r7, #0]
 8008430:	4798      	blx	r3
 8008432:	4603      	mov	r3, r0
 8008434:	73fb      	strb	r3, [r7, #15]
  return res;
 8008436:	7bfb      	ldrb	r3, [r7, #15]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}
 8008440:	20004298 	.word	0x20004298

08008444 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008444:	b480      	push	{r7}
 8008446:	b087      	sub	sp, #28
 8008448:	af00      	add	r7, sp, #0
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8008458:	e007      	b.n	800846a <mem_cpy+0x26>
		*d++ = *s++;
 800845a:	693a      	ldr	r2, [r7, #16]
 800845c:	1c53      	adds	r3, r2, #1
 800845e:	613b      	str	r3, [r7, #16]
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	1c59      	adds	r1, r3, #1
 8008464:	6179      	str	r1, [r7, #20]
 8008466:	7812      	ldrb	r2, [r2, #0]
 8008468:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	1e5a      	subs	r2, r3, #1
 800846e:	607a      	str	r2, [r7, #4]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d1f2      	bne.n	800845a <mem_cpy+0x16>
}
 8008474:	bf00      	nop
 8008476:	bf00      	nop
 8008478:	371c      	adds	r7, #28
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008482:	b480      	push	{r7}
 8008484:	b087      	sub	sp, #28
 8008486:	af00      	add	r7, sp, #0
 8008488:	60f8      	str	r0, [r7, #12]
 800848a:	60b9      	str	r1, [r7, #8]
 800848c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8008492:	e005      	b.n	80084a0 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	1c5a      	adds	r2, r3, #1
 8008498:	617a      	str	r2, [r7, #20]
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	b2d2      	uxtb	r2, r2
 800849e:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	1e5a      	subs	r2, r3, #1
 80084a4:	607a      	str	r2, [r7, #4]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d1f4      	bne.n	8008494 <mem_set+0x12>
}
 80084aa:	bf00      	nop
 80084ac:	bf00      	nop
 80084ae:	371c      	adds	r7, #28
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80084b8:	b480      	push	{r7}
 80084ba:	b089      	sub	sp, #36	; 0x24
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	61fb      	str	r3, [r7, #28]
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80084cc:	2300      	movs	r3, #0
 80084ce:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80084d0:	bf00      	nop
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	1e5a      	subs	r2, r3, #1
 80084d6:	607a      	str	r2, [r7, #4]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00d      	beq.n	80084f8 <mem_cmp+0x40>
 80084dc:	69fb      	ldr	r3, [r7, #28]
 80084de:	1c5a      	adds	r2, r3, #1
 80084e0:	61fa      	str	r2, [r7, #28]
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	4619      	mov	r1, r3
 80084e6:	69bb      	ldr	r3, [r7, #24]
 80084e8:	1c5a      	adds	r2, r3, #1
 80084ea:	61ba      	str	r2, [r7, #24]
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	1acb      	subs	r3, r1, r3
 80084f0:	617b      	str	r3, [r7, #20]
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d0ec      	beq.n	80084d2 <mem_cmp+0x1a>
	return r;
 80084f8:	697b      	ldr	r3, [r7, #20]
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3724      	adds	r7, #36	; 0x24
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr

08008506 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8008506:	b480      	push	{r7}
 8008508:	b083      	sub	sp, #12
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
 800850e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008510:	e002      	b.n	8008518 <chk_chr+0x12>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	3301      	adds	r3, #1
 8008516:	607b      	str	r3, [r7, #4]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d005      	beq.n	800852c <chk_chr+0x26>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	461a      	mov	r2, r3
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	4293      	cmp	r3, r2
 800852a:	d1f2      	bne.n	8008512 <chk_chr+0xc>
	return *str;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	781b      	ldrb	r3, [r3, #0]
}
 8008530:	4618      	mov	r0, r3
 8008532:	370c      	adds	r7, #12
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr

0800853c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800853c:	b480      	push	{r7}
 800853e:	b085      	sub	sp, #20
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008546:	2300      	movs	r3, #0
 8008548:	60bb      	str	r3, [r7, #8]
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	60fb      	str	r3, [r7, #12]
 800854e:	e03b      	b.n	80085c8 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 8008550:	4931      	ldr	r1, [pc, #196]	; (8008618 <chk_lock+0xdc>)
 8008552:	68fa      	ldr	r2, [r7, #12]
 8008554:	4613      	mov	r3, r2
 8008556:	005b      	lsls	r3, r3, #1
 8008558:	4413      	add	r3, r2
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	440b      	add	r3, r1
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d02c      	beq.n	80085be <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8008564:	492c      	ldr	r1, [pc, #176]	; (8008618 <chk_lock+0xdc>)
 8008566:	68fa      	ldr	r2, [r7, #12]
 8008568:	4613      	mov	r3, r2
 800856a:	005b      	lsls	r3, r3, #1
 800856c:	4413      	add	r3, r2
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	440b      	add	r3, r1
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	429a      	cmp	r2, r3
 800857e:	d120      	bne.n	80085c2 <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8008580:	4925      	ldr	r1, [pc, #148]	; (8008618 <chk_lock+0xdc>)
 8008582:	68fa      	ldr	r2, [r7, #12]
 8008584:	4613      	mov	r3, r2
 8008586:	005b      	lsls	r3, r3, #1
 8008588:	4413      	add	r3, r2
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	440b      	add	r3, r1
 800858e:	3304      	adds	r3, #4
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008598:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800859a:	429a      	cmp	r2, r3
 800859c:	d111      	bne.n	80085c2 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 800859e:	491e      	ldr	r1, [pc, #120]	; (8008618 <chk_lock+0xdc>)
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	4613      	mov	r3, r2
 80085a4:	005b      	lsls	r3, r3, #1
 80085a6:	4413      	add	r3, r2
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	440b      	add	r3, r1
 80085ac:	3308      	adds	r3, #8
 80085ae:	881a      	ldrh	r2, [r3, #0]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085b6:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d102      	bne.n	80085c2 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 80085bc:	e007      	b.n	80085ce <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 80085be:	2301      	movs	r3, #1
 80085c0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	3301      	adds	r3, #1
 80085c6:	60fb      	str	r3, [r7, #12]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d9c0      	bls.n	8008550 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2b02      	cmp	r3, #2
 80085d2:	d109      	bne.n	80085e8 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d102      	bne.n	80085e0 <chk_lock+0xa4>
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	2b02      	cmp	r3, #2
 80085de:	d101      	bne.n	80085e4 <chk_lock+0xa8>
 80085e0:	2300      	movs	r3, #0
 80085e2:	e013      	b.n	800860c <chk_lock+0xd0>
 80085e4:	2312      	movs	r3, #18
 80085e6:	e011      	b.n	800860c <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d10b      	bne.n	8008606 <chk_lock+0xca>
 80085ee:	490a      	ldr	r1, [pc, #40]	; (8008618 <chk_lock+0xdc>)
 80085f0:	68fa      	ldr	r2, [r7, #12]
 80085f2:	4613      	mov	r3, r2
 80085f4:	005b      	lsls	r3, r3, #1
 80085f6:	4413      	add	r3, r2
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	440b      	add	r3, r1
 80085fc:	330a      	adds	r3, #10
 80085fe:	881b      	ldrh	r3, [r3, #0]
 8008600:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008604:	d101      	bne.n	800860a <chk_lock+0xce>
 8008606:	2310      	movs	r3, #16
 8008608:	e000      	b.n	800860c <chk_lock+0xd0>
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	3714      	adds	r7, #20
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr
 8008618:	20004080 	.word	0x20004080

0800861c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008622:	2300      	movs	r3, #0
 8008624:	607b      	str	r3, [r7, #4]
 8008626:	e002      	b.n	800862e <enq_lock+0x12>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	3301      	adds	r3, #1
 800862c:	607b      	str	r3, [r7, #4]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2b01      	cmp	r3, #1
 8008632:	d809      	bhi.n	8008648 <enq_lock+0x2c>
 8008634:	490a      	ldr	r1, [pc, #40]	; (8008660 <enq_lock+0x44>)
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	4613      	mov	r3, r2
 800863a:	005b      	lsls	r3, r3, #1
 800863c:	4413      	add	r3, r2
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	440b      	add	r3, r1
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d1ef      	bne.n	8008628 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2b02      	cmp	r3, #2
 800864c:	bf14      	ite	ne
 800864e:	2301      	movne	r3, #1
 8008650:	2300      	moveq	r3, #0
 8008652:	b2db      	uxtb	r3, r3
}
 8008654:	4618      	mov	r0, r3
 8008656:	370c      	adds	r7, #12
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr
 8008660:	20004080 	.word	0x20004080

08008664 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008664:	b480      	push	{r7}
 8008666:	b085      	sub	sp, #20
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800866e:	2300      	movs	r3, #0
 8008670:	60fb      	str	r3, [r7, #12]
 8008672:	e02e      	b.n	80086d2 <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 8008674:	4959      	ldr	r1, [pc, #356]	; (80087dc <inc_lock+0x178>)
 8008676:	68fa      	ldr	r2, [r7, #12]
 8008678:	4613      	mov	r3, r2
 800867a:	005b      	lsls	r3, r3, #1
 800867c:	4413      	add	r3, r2
 800867e:	009b      	lsls	r3, r3, #2
 8008680:	440b      	add	r3, r1
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	429a      	cmp	r2, r3
 800868e:	d11d      	bne.n	80086cc <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8008690:	4952      	ldr	r1, [pc, #328]	; (80087dc <inc_lock+0x178>)
 8008692:	68fa      	ldr	r2, [r7, #12]
 8008694:	4613      	mov	r3, r2
 8008696:	005b      	lsls	r3, r3, #1
 8008698:	4413      	add	r3, r2
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	440b      	add	r3, r1
 800869e:	3304      	adds	r3, #4
 80086a0:	681a      	ldr	r2, [r3, #0]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086a8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d10e      	bne.n	80086cc <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 80086ae:	494b      	ldr	r1, [pc, #300]	; (80087dc <inc_lock+0x178>)
 80086b0:	68fa      	ldr	r2, [r7, #12]
 80086b2:	4613      	mov	r3, r2
 80086b4:	005b      	lsls	r3, r3, #1
 80086b6:	4413      	add	r3, r2
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	440b      	add	r3, r1
 80086bc:	3308      	adds	r3, #8
 80086be:	881a      	ldrh	r2, [r3, #0]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086c6:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d006      	beq.n	80086da <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	3301      	adds	r3, #1
 80086d0:	60fb      	str	r3, [r7, #12]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d9cd      	bls.n	8008674 <inc_lock+0x10>
 80086d8:	e000      	b.n	80086dc <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 80086da:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2b02      	cmp	r3, #2
 80086e0:	d148      	bne.n	8008774 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80086e2:	2300      	movs	r3, #0
 80086e4:	60fb      	str	r3, [r7, #12]
 80086e6:	e002      	b.n	80086ee <inc_lock+0x8a>
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	3301      	adds	r3, #1
 80086ec:	60fb      	str	r3, [r7, #12]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d809      	bhi.n	8008708 <inc_lock+0xa4>
 80086f4:	4939      	ldr	r1, [pc, #228]	; (80087dc <inc_lock+0x178>)
 80086f6:	68fa      	ldr	r2, [r7, #12]
 80086f8:	4613      	mov	r3, r2
 80086fa:	005b      	lsls	r3, r3, #1
 80086fc:	4413      	add	r3, r2
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	440b      	add	r3, r1
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d1ef      	bne.n	80086e8 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2b02      	cmp	r3, #2
 800870c:	d101      	bne.n	8008712 <inc_lock+0xae>
 800870e:	2300      	movs	r3, #0
 8008710:	e05d      	b.n	80087ce <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008718:	6819      	ldr	r1, [r3, #0]
 800871a:	4830      	ldr	r0, [pc, #192]	; (80087dc <inc_lock+0x178>)
 800871c:	68fa      	ldr	r2, [r7, #12]
 800871e:	4613      	mov	r3, r2
 8008720:	005b      	lsls	r3, r3, #1
 8008722:	4413      	add	r3, r2
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	4403      	add	r3, r0
 8008728:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008730:	6899      	ldr	r1, [r3, #8]
 8008732:	482a      	ldr	r0, [pc, #168]	; (80087dc <inc_lock+0x178>)
 8008734:	68fa      	ldr	r2, [r7, #12]
 8008736:	4613      	mov	r3, r2
 8008738:	005b      	lsls	r3, r3, #1
 800873a:	4413      	add	r3, r2
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	4403      	add	r3, r0
 8008740:	3304      	adds	r3, #4
 8008742:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800874a:	88d8      	ldrh	r0, [r3, #6]
 800874c:	4923      	ldr	r1, [pc, #140]	; (80087dc <inc_lock+0x178>)
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	4613      	mov	r3, r2
 8008752:	005b      	lsls	r3, r3, #1
 8008754:	4413      	add	r3, r2
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	440b      	add	r3, r1
 800875a:	3308      	adds	r3, #8
 800875c:	4602      	mov	r2, r0
 800875e:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8008760:	491e      	ldr	r1, [pc, #120]	; (80087dc <inc_lock+0x178>)
 8008762:	68fa      	ldr	r2, [r7, #12]
 8008764:	4613      	mov	r3, r2
 8008766:	005b      	lsls	r3, r3, #1
 8008768:	4413      	add	r3, r2
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	440b      	add	r3, r1
 800876e:	330a      	adds	r3, #10
 8008770:	2200      	movs	r2, #0
 8008772:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d00c      	beq.n	8008794 <inc_lock+0x130>
 800877a:	4918      	ldr	r1, [pc, #96]	; (80087dc <inc_lock+0x178>)
 800877c:	68fa      	ldr	r2, [r7, #12]
 800877e:	4613      	mov	r3, r2
 8008780:	005b      	lsls	r3, r3, #1
 8008782:	4413      	add	r3, r2
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	440b      	add	r3, r1
 8008788:	330a      	adds	r3, #10
 800878a:	881b      	ldrh	r3, [r3, #0]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d001      	beq.n	8008794 <inc_lock+0x130>
 8008790:	2300      	movs	r3, #0
 8008792:	e01c      	b.n	80087ce <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d10b      	bne.n	80087b2 <inc_lock+0x14e>
 800879a:	4910      	ldr	r1, [pc, #64]	; (80087dc <inc_lock+0x178>)
 800879c:	68fa      	ldr	r2, [r7, #12]
 800879e:	4613      	mov	r3, r2
 80087a0:	005b      	lsls	r3, r3, #1
 80087a2:	4413      	add	r3, r2
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	440b      	add	r3, r1
 80087a8:	330a      	adds	r3, #10
 80087aa:	881b      	ldrh	r3, [r3, #0]
 80087ac:	3301      	adds	r3, #1
 80087ae:	b299      	uxth	r1, r3
 80087b0:	e001      	b.n	80087b6 <inc_lock+0x152>
 80087b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80087b6:	4809      	ldr	r0, [pc, #36]	; (80087dc <inc_lock+0x178>)
 80087b8:	68fa      	ldr	r2, [r7, #12]
 80087ba:	4613      	mov	r3, r2
 80087bc:	005b      	lsls	r3, r3, #1
 80087be:	4413      	add	r3, r2
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	4403      	add	r3, r0
 80087c4:	330a      	adds	r3, #10
 80087c6:	460a      	mov	r2, r1
 80087c8:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	3301      	adds	r3, #1
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3714      	adds	r7, #20
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop
 80087dc:	20004080 	.word	0x20004080

080087e0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b085      	sub	sp, #20
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	3b01      	subs	r3, #1
 80087ec:	607b      	str	r3, [r7, #4]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d82e      	bhi.n	8008852 <dec_lock+0x72>
		n = Files[i].ctr;
 80087f4:	491b      	ldr	r1, [pc, #108]	; (8008864 <dec_lock+0x84>)
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	4613      	mov	r3, r2
 80087fa:	005b      	lsls	r3, r3, #1
 80087fc:	4413      	add	r3, r2
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	440b      	add	r3, r1
 8008802:	330a      	adds	r3, #10
 8008804:	881b      	ldrh	r3, [r3, #0]
 8008806:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008808:	89fb      	ldrh	r3, [r7, #14]
 800880a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800880e:	d101      	bne.n	8008814 <dec_lock+0x34>
 8008810:	2300      	movs	r3, #0
 8008812:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8008814:	89fb      	ldrh	r3, [r7, #14]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d002      	beq.n	8008820 <dec_lock+0x40>
 800881a:	89fb      	ldrh	r3, [r7, #14]
 800881c:	3b01      	subs	r3, #1
 800881e:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008820:	4910      	ldr	r1, [pc, #64]	; (8008864 <dec_lock+0x84>)
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	4613      	mov	r3, r2
 8008826:	005b      	lsls	r3, r3, #1
 8008828:	4413      	add	r3, r2
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	440b      	add	r3, r1
 800882e:	330a      	adds	r3, #10
 8008830:	89fa      	ldrh	r2, [r7, #14]
 8008832:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008834:	89fb      	ldrh	r3, [r7, #14]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d108      	bne.n	800884c <dec_lock+0x6c>
 800883a:	490a      	ldr	r1, [pc, #40]	; (8008864 <dec_lock+0x84>)
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	4613      	mov	r3, r2
 8008840:	005b      	lsls	r3, r3, #1
 8008842:	4413      	add	r3, r2
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	440b      	add	r3, r1
 8008848:	2200      	movs	r2, #0
 800884a:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800884c:	2300      	movs	r3, #0
 800884e:	737b      	strb	r3, [r7, #13]
 8008850:	e001      	b.n	8008856 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008852:	2302      	movs	r3, #2
 8008854:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008856:	7b7b      	ldrb	r3, [r7, #13]
}
 8008858:	4618      	mov	r0, r3
 800885a:	3714      	adds	r7, #20
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr
 8008864:	20004080 	.word	0x20004080

08008868 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008868:	b480      	push	{r7}
 800886a:	b085      	sub	sp, #20
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008870:	2300      	movs	r3, #0
 8008872:	60fb      	str	r3, [r7, #12]
 8008874:	e016      	b.n	80088a4 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008876:	4910      	ldr	r1, [pc, #64]	; (80088b8 <clear_lock+0x50>)
 8008878:	68fa      	ldr	r2, [r7, #12]
 800887a:	4613      	mov	r3, r2
 800887c:	005b      	lsls	r3, r3, #1
 800887e:	4413      	add	r3, r2
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	440b      	add	r3, r1
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	429a      	cmp	r2, r3
 800888a:	d108      	bne.n	800889e <clear_lock+0x36>
 800888c:	490a      	ldr	r1, [pc, #40]	; (80088b8 <clear_lock+0x50>)
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	4613      	mov	r3, r2
 8008892:	005b      	lsls	r3, r3, #1
 8008894:	4413      	add	r3, r2
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	440b      	add	r3, r1
 800889a:	2200      	movs	r2, #0
 800889c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	3301      	adds	r3, #1
 80088a2:	60fb      	str	r3, [r7, #12]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d9e5      	bls.n	8008876 <clear_lock+0xe>
	}
}
 80088aa:	bf00      	nop
 80088ac:	bf00      	nop
 80088ae:	3714      	adds	r7, #20
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr
 80088b8:	20004080 	.word	0x20004080

080088bc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b086      	sub	sp, #24
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80088c4:	2300      	movs	r3, #0
 80088c6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088ce:	791b      	ldrb	r3, [r3, #4]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d040      	beq.n	8008956 <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088dc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088e4:	7858      	ldrb	r0, [r3, #1]
 80088e6:	6879      	ldr	r1, [r7, #4]
 80088e8:	2301      	movs	r3, #1
 80088ea:	697a      	ldr	r2, [r7, #20]
 80088ec:	f7ff fd6c 	bl	80083c8 <disk_write>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d002      	beq.n	80088fc <sync_window+0x40>
			res = FR_DISK_ERR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	73fb      	strb	r3, [r7, #15]
 80088fa:	e02c      	b.n	8008956 <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008902:	2200      	movs	r2, #0
 8008904:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800890c:	6a1b      	ldr	r3, [r3, #32]
 800890e:	697a      	ldr	r2, [r7, #20]
 8008910:	1ad2      	subs	r2, r2, r3
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008918:	699b      	ldr	r3, [r3, #24]
 800891a:	429a      	cmp	r2, r3
 800891c:	d21b      	bcs.n	8008956 <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008924:	78db      	ldrb	r3, [r3, #3]
 8008926:	613b      	str	r3, [r7, #16]
 8008928:	e012      	b.n	8008950 <sync_window+0x94>
					wsect += fs->fsize;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008930:	699b      	ldr	r3, [r3, #24]
 8008932:	697a      	ldr	r2, [r7, #20]
 8008934:	4413      	add	r3, r2
 8008936:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800893e:	7858      	ldrb	r0, [r3, #1]
 8008940:	6879      	ldr	r1, [r7, #4]
 8008942:	2301      	movs	r3, #1
 8008944:	697a      	ldr	r2, [r7, #20]
 8008946:	f7ff fd3f 	bl	80083c8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	3b01      	subs	r3, #1
 800894e:	613b      	str	r3, [r7, #16]
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	2b01      	cmp	r3, #1
 8008954:	d8e9      	bhi.n	800892a <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 8008956:	7bfb      	ldrb	r3, [r7, #15]
}
 8008958:	4618      	mov	r0, r3
 800895a:	3718      	adds	r7, #24
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800896a:	2300      	movs	r3, #0
 800896c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008976:	683a      	ldr	r2, [r7, #0]
 8008978:	429a      	cmp	r2, r3
 800897a:	d01e      	beq.n	80089ba <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f7ff ff9d 	bl	80088bc <sync_window>
 8008982:	4603      	mov	r3, r0
 8008984:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008986:	7bfb      	ldrb	r3, [r7, #15]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d116      	bne.n	80089ba <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008992:	7858      	ldrb	r0, [r3, #1]
 8008994:	6879      	ldr	r1, [r7, #4]
 8008996:	2301      	movs	r3, #1
 8008998:	683a      	ldr	r2, [r7, #0]
 800899a:	f7ff fcf5 	bl	8008388 <disk_read>
 800899e:	4603      	mov	r3, r0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d004      	beq.n	80089ae <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80089a4:	f04f 33ff 	mov.w	r3, #4294967295
 80089a8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80089aa:	2301      	movs	r3, #1
 80089ac:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089b4:	461a      	mov	r2, r3
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 80089ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3710      	adds	r7, #16
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f7ff ff75 	bl	80088bc <sync_window>
 80089d2:	4603      	mov	r3, r0
 80089d4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80089d6:	7bfb      	ldrb	r3, [r7, #15]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	f040 80ad 	bne.w	8008b38 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	2b03      	cmp	r3, #3
 80089e8:	f040 8098 	bne.w	8008b1c <sync_fs+0x158>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089f2:	795b      	ldrb	r3, [r3, #5]
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	f040 8091 	bne.w	8008b1c <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a02:	895b      	ldrh	r3, [r3, #10]
 8008a04:	461a      	mov	r2, r3
 8008a06:	2100      	movs	r1, #0
 8008a08:	f7ff fd3b 	bl	8008482 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2255      	movs	r2, #85	; 0x55
 8008a10:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	22aa      	movs	r2, #170	; 0xaa
 8008a18:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2252      	movs	r2, #82	; 0x52
 8008a20:	701a      	strb	r2, [r3, #0]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2252      	movs	r2, #82	; 0x52
 8008a26:	705a      	strb	r2, [r3, #1]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2261      	movs	r2, #97	; 0x61
 8008a2c:	709a      	strb	r2, [r3, #2]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2241      	movs	r2, #65	; 0x41
 8008a32:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2272      	movs	r2, #114	; 0x72
 8008a38:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2272      	movs	r2, #114	; 0x72
 8008a40:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2241      	movs	r2, #65	; 0x41
 8008a48:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2261      	movs	r2, #97	; 0x61
 8008a50:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	b2da      	uxtb	r2, r3
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a6a:	691b      	ldr	r3, [r3, #16]
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	0a1b      	lsrs	r3, r3, #8
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	b2da      	uxtb	r2, r3
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a80:	691b      	ldr	r3, [r3, #16]
 8008a82:	0c1b      	lsrs	r3, r3, #16
 8008a84:	b2da      	uxtb	r2, r3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a92:	691b      	ldr	r3, [r3, #16]
 8008a94:	0e1b      	lsrs	r3, r3, #24
 8008a96:	b2da      	uxtb	r2, r3
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	b2da      	uxtb	r2, r3
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ab4:	68db      	ldr	r3, [r3, #12]
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	0a1b      	lsrs	r3, r3, #8
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	b2da      	uxtb	r2, r3
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aca:	68db      	ldr	r3, [r3, #12]
 8008acc:	0c1b      	lsrs	r3, r3, #16
 8008ace:	b2da      	uxtb	r2, r3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	0e1b      	lsrs	r3, r3, #24
 8008ae0:	b2da      	uxtb	r2, r3
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aee:	69db      	ldr	r3, [r3, #28]
 8008af0:	3301      	adds	r3, #1
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008af8:	62d3      	str	r3, [r2, #44]	; 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b00:	7858      	ldrb	r0, [r3, #1]
 8008b02:	6879      	ldr	r1, [r7, #4]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	f7ff fc5b 	bl	80083c8 <disk_write>
			fs->fsi_flag = 0;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b18:	2200      	movs	r2, #0
 8008b1a:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b22:	785b      	ldrb	r3, [r3, #1]
 8008b24:	2200      	movs	r2, #0
 8008b26:	2100      	movs	r1, #0
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f7ff fc6d 	bl	8008408 <disk_ioctl>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d001      	beq.n	8008b38 <sync_fs+0x174>
			res = FR_DISK_ERR;
 8008b34:	2301      	movs	r3, #1
 8008b36:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008b42:	b480      	push	{r7}
 8008b44:	b083      	sub	sp, #12
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
 8008b4a:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	3b02      	subs	r3, #2
 8008b50:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b58:	695b      	ldr	r3, [r3, #20]
 8008b5a:	3b02      	subs	r3, #2
 8008b5c:	683a      	ldr	r2, [r7, #0]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d301      	bcc.n	8008b66 <clust2sect+0x24>
 8008b62:	2300      	movs	r3, #0
 8008b64:	e00c      	b.n	8008b80 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b6c:	789b      	ldrb	r3, [r3, #2]
 8008b6e:	461a      	mov	r2, r3
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	fb03 f202 	mul.w	r2, r3, r2
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b7e:	4413      	add	r3, r2
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	370c      	adds	r7, #12
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b086      	sub	sp, #24
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d906      	bls.n	8008baa <get_fat+0x1e>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ba2:	695b      	ldr	r3, [r3, #20]
 8008ba4:	683a      	ldr	r2, [r7, #0]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d302      	bcc.n	8008bb0 <get_fat+0x24>
		val = 1;	/* Internal error */
 8008baa:	2301      	movs	r3, #1
 8008bac:	617b      	str	r3, [r7, #20]
 8008bae:	e0e4      	b.n	8008d7a <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8008bb4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	2b03      	cmp	r3, #3
 8008bc0:	f000 8098 	beq.w	8008cf4 <get_fat+0x168>
 8008bc4:	2b03      	cmp	r3, #3
 8008bc6:	f300 80ce 	bgt.w	8008d66 <get_fat+0x1da>
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d002      	beq.n	8008bd4 <get_fat+0x48>
 8008bce:	2b02      	cmp	r3, #2
 8008bd0:	d05f      	beq.n	8008c92 <get_fat+0x106>
 8008bd2:	e0c8      	b.n	8008d66 <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	60fb      	str	r3, [r7, #12]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	085b      	lsrs	r3, r3, #1
 8008bdc:	68fa      	ldr	r2, [r7, #12]
 8008bde:	4413      	add	r3, r2
 8008be0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008be8:	6a1a      	ldr	r2, [r3, #32]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bf0:	895b      	ldrh	r3, [r3, #10]
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8008bfa:	4413      	add	r3, r2
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f7ff feae 	bl	8008960 <move_window>
 8008c04:	4603      	mov	r3, r0
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	f040 80b0 	bne.w	8008d6c <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	1c5a      	adds	r2, r3, #1
 8008c10:	60fa      	str	r2, [r7, #12]
 8008c12:	687a      	ldr	r2, [r7, #4]
 8008c14:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008c18:	8952      	ldrh	r2, [r2, #10]
 8008c1a:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c1e:	fb01 f202 	mul.w	r2, r1, r2
 8008c22:	1a9b      	subs	r3, r3, r2
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	5cd3      	ldrb	r3, [r2, r3]
 8008c28:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c30:	6a1a      	ldr	r2, [r3, #32]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c38:	895b      	ldrh	r3, [r3, #10]
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c42:	4413      	add	r3, r2
 8008c44:	4619      	mov	r1, r3
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f7ff fe8a 	bl	8008960 <move_window>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	f040 808e 	bne.w	8008d70 <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c5a:	895b      	ldrh	r3, [r3, #10]
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c64:	fb01 f202 	mul.w	r2, r1, r2
 8008c68:	1a9b      	subs	r3, r3, r2
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	5cd3      	ldrb	r3, [r2, r3]
 8008c6e:	021b      	lsls	r3, r3, #8
 8008c70:	461a      	mov	r2, r3
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	4313      	orrs	r3, r2
 8008c76:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	f003 0301 	and.w	r3, r3, #1
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d002      	beq.n	8008c88 <get_fat+0xfc>
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	091b      	lsrs	r3, r3, #4
 8008c86:	e002      	b.n	8008c8e <get_fat+0x102>
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c8e:	617b      	str	r3, [r7, #20]
			break;
 8008c90:	e073      	b.n	8008d7a <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c98:	6a1a      	ldr	r2, [r3, #32]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ca0:	895b      	ldrh	r3, [r3, #10]
 8008ca2:	085b      	lsrs	r3, r3, #1
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	fbb3 f3f1 	udiv	r3, r3, r1
 8008cae:	4413      	add	r3, r2
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f7ff fe54 	bl	8008960 <move_window>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d15a      	bne.n	8008d74 <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	005b      	lsls	r3, r3, #1
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008cc8:	8952      	ldrh	r2, [r2, #10]
 8008cca:	fbb3 f1f2 	udiv	r1, r3, r2
 8008cce:	fb01 f202 	mul.w	r2, r1, r2
 8008cd2:	1a9b      	subs	r3, r3, r2
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	4413      	add	r3, r2
 8008cd8:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	3301      	adds	r3, #1
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	021b      	lsls	r3, r3, #8
 8008ce2:	b21a      	sxth	r2, r3
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	b21b      	sxth	r3, r3
 8008cea:	4313      	orrs	r3, r2
 8008cec:	b21b      	sxth	r3, r3
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	617b      	str	r3, [r7, #20]
			break;
 8008cf2:	e042      	b.n	8008d7a <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cfa:	6a1a      	ldr	r2, [r3, #32]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d02:	895b      	ldrh	r3, [r3, #10]
 8008d04:	089b      	lsrs	r3, r3, #2
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	4619      	mov	r1, r3
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d10:	4413      	add	r3, r2
 8008d12:	4619      	mov	r1, r3
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f7ff fe23 	bl	8008960 <move_window>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d12b      	bne.n	8008d78 <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008d2a:	8952      	ldrh	r2, [r2, #10]
 8008d2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d30:	fb01 f202 	mul.w	r2, r1, r2
 8008d34:	1a9b      	subs	r3, r3, r2
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	4413      	add	r3, r2
 8008d3a:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	3303      	adds	r3, #3
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	061a      	lsls	r2, r3, #24
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	3302      	adds	r3, #2
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	041b      	lsls	r3, r3, #16
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	693a      	ldr	r2, [r7, #16]
 8008d50:	3201      	adds	r2, #1
 8008d52:	7812      	ldrb	r2, [r2, #0]
 8008d54:	0212      	lsls	r2, r2, #8
 8008d56:	4313      	orrs	r3, r2
 8008d58:	693a      	ldr	r2, [r7, #16]
 8008d5a:	7812      	ldrb	r2, [r2, #0]
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008d62:	617b      	str	r3, [r7, #20]
			break;
 8008d64:	e009      	b.n	8008d7a <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 8008d66:	2301      	movs	r3, #1
 8008d68:	617b      	str	r3, [r7, #20]
 8008d6a:	e006      	b.n	8008d7a <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008d6c:	bf00      	nop
 8008d6e:	e004      	b.n	8008d7a <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008d70:	bf00      	nop
 8008d72:	e002      	b.n	8008d7a <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008d74:	bf00      	nop
 8008d76:	e000      	b.n	8008d7a <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008d78:	bf00      	nop
		}
	}

	return val;
 8008d7a:	697b      	ldr	r3, [r7, #20]
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3718      	adds	r7, #24
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b088      	sub	sp, #32
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	60f8      	str	r0, [r7, #12]
 8008d8c:	60b9      	str	r1, [r7, #8]
 8008d8e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	d906      	bls.n	8008da4 <put_fat+0x20>
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d9c:	695b      	ldr	r3, [r3, #20]
 8008d9e:	68ba      	ldr	r2, [r7, #8]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d302      	bcc.n	8008daa <put_fat+0x26>
		res = FR_INT_ERR;
 8008da4:	2302      	movs	r3, #2
 8008da6:	77fb      	strb	r3, [r7, #31]
 8008da8:	e13a      	b.n	8009020 <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	2b03      	cmp	r3, #3
 8008db4:	f000 80d0 	beq.w	8008f58 <put_fat+0x1d4>
 8008db8:	2b03      	cmp	r3, #3
 8008dba:	f300 8127 	bgt.w	800900c <put_fat+0x288>
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d003      	beq.n	8008dca <put_fat+0x46>
 8008dc2:	2b02      	cmp	r3, #2
 8008dc4:	f000 808f 	beq.w	8008ee6 <put_fat+0x162>
 8008dc8:	e120      	b.n	800900c <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	617b      	str	r3, [r7, #20]
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	085b      	lsrs	r3, r3, #1
 8008dd2:	697a      	ldr	r2, [r7, #20]
 8008dd4:	4413      	add	r3, r2
 8008dd6:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dde:	6a1a      	ldr	r2, [r3, #32]
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008de6:	895b      	ldrh	r3, [r3, #10]
 8008de8:	4619      	mov	r1, r3
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	fbb3 f3f1 	udiv	r3, r3, r1
 8008df0:	4413      	add	r3, r2
 8008df2:	4619      	mov	r1, r3
 8008df4:	68f8      	ldr	r0, [r7, #12]
 8008df6:	f7ff fdb3 	bl	8008960 <move_window>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008dfe:	7ffb      	ldrb	r3, [r7, #31]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f040 8106 	bne.w	8009012 <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	1c5a      	adds	r2, r3, #1
 8008e0a:	617a      	str	r2, [r7, #20]
 8008e0c:	68fa      	ldr	r2, [r7, #12]
 8008e0e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008e12:	8952      	ldrh	r2, [r2, #10]
 8008e14:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e18:	fb01 f202 	mul.w	r2, r1, r2
 8008e1c:	1a9b      	subs	r3, r3, r2
 8008e1e:	68fa      	ldr	r2, [r7, #12]
 8008e20:	4413      	add	r3, r2
 8008e22:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	f003 0301 	and.w	r3, r3, #1
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00d      	beq.n	8008e4a <put_fat+0xc6>
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	b25b      	sxtb	r3, r3
 8008e34:	f003 030f 	and.w	r3, r3, #15
 8008e38:	b25a      	sxtb	r2, r3
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	011b      	lsls	r3, r3, #4
 8008e40:	b25b      	sxtb	r3, r3
 8008e42:	4313      	orrs	r3, r2
 8008e44:	b25b      	sxtb	r3, r3
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	e001      	b.n	8008e4e <put_fat+0xca>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	69ba      	ldr	r2, [r7, #24]
 8008e50:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e58:	2201      	movs	r2, #1
 8008e5a:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e62:	6a1a      	ldr	r2, [r3, #32]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e6a:	895b      	ldrh	r3, [r3, #10]
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e74:	4413      	add	r3, r2
 8008e76:	4619      	mov	r1, r3
 8008e78:	68f8      	ldr	r0, [r7, #12]
 8008e7a:	f7ff fd71 	bl	8008960 <move_window>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008e82:	7ffb      	ldrb	r3, [r7, #31]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	f040 80c6 	bne.w	8009016 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e90:	895b      	ldrh	r3, [r3, #10]
 8008e92:	461a      	mov	r2, r3
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e9a:	fb01 f202 	mul.w	r2, r1, r2
 8008e9e:	1a9b      	subs	r3, r3, r2
 8008ea0:	68fa      	ldr	r2, [r7, #12]
 8008ea2:	4413      	add	r3, r2
 8008ea4:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	f003 0301 	and.w	r3, r3, #1
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d003      	beq.n	8008eb8 <put_fat+0x134>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	091b      	lsrs	r3, r3, #4
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	e00e      	b.n	8008ed6 <put_fat+0x152>
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	b25b      	sxtb	r3, r3
 8008ebe:	f023 030f 	bic.w	r3, r3, #15
 8008ec2:	b25a      	sxtb	r2, r3
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	0a1b      	lsrs	r3, r3, #8
 8008ec8:	b25b      	sxtb	r3, r3
 8008eca:	f003 030f 	and.w	r3, r3, #15
 8008ece:	b25b      	sxtb	r3, r3
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	b25b      	sxtb	r3, r3
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	69ba      	ldr	r2, [r7, #24]
 8008ed8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	711a      	strb	r2, [r3, #4]
			break;
 8008ee4:	e09c      	b.n	8009020 <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008eec:	6a1a      	ldr	r2, [r3, #32]
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ef4:	895b      	ldrh	r3, [r3, #10]
 8008ef6:	085b      	lsrs	r3, r3, #1
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	4619      	mov	r1, r3
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f02:	4413      	add	r3, r2
 8008f04:	4619      	mov	r1, r3
 8008f06:	68f8      	ldr	r0, [r7, #12]
 8008f08:	f7ff fd2a 	bl	8008960 <move_window>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008f10:	7ffb      	ldrb	r3, [r7, #31]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	f040 8081 	bne.w	800901a <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	005b      	lsls	r3, r3, #1
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008f22:	8952      	ldrh	r2, [r2, #10]
 8008f24:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f28:	fb01 f202 	mul.w	r2, r1, r2
 8008f2c:	1a9b      	subs	r3, r3, r2
 8008f2e:	68fa      	ldr	r2, [r7, #12]
 8008f30:	4413      	add	r3, r2
 8008f32:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	b2da      	uxtb	r2, r3
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	701a      	strb	r2, [r3, #0]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	0a1b      	lsrs	r3, r3, #8
 8008f42:	b29a      	uxth	r2, r3
 8008f44:	69bb      	ldr	r3, [r7, #24]
 8008f46:	3301      	adds	r3, #1
 8008f48:	b2d2      	uxtb	r2, r2
 8008f4a:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f52:	2201      	movs	r2, #1
 8008f54:	711a      	strb	r2, [r3, #4]
			break;
 8008f56:	e063      	b.n	8009020 <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f5e:	6a1a      	ldr	r2, [r3, #32]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f66:	895b      	ldrh	r3, [r3, #10]
 8008f68:	089b      	lsrs	r3, r3, #2
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f74:	4413      	add	r3, r2
 8008f76:	4619      	mov	r1, r3
 8008f78:	68f8      	ldr	r0, [r7, #12]
 8008f7a:	f7ff fcf1 	bl	8008960 <move_window>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008f82:	7ffb      	ldrb	r3, [r7, #31]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d14a      	bne.n	800901e <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	68fa      	ldr	r2, [r7, #12]
 8008f8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008f92:	8952      	ldrh	r2, [r2, #10]
 8008f94:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f98:	fb01 f202 	mul.w	r2, r1, r2
 8008f9c:	1a9b      	subs	r3, r3, r2
 8008f9e:	68fa      	ldr	r2, [r7, #12]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8008fa4:	69bb      	ldr	r3, [r7, #24]
 8008fa6:	3303      	adds	r3, #3
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	061a      	lsls	r2, r3, #24
 8008fac:	69bb      	ldr	r3, [r7, #24]
 8008fae:	3302      	adds	r3, #2
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	041b      	lsls	r3, r3, #16
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	69ba      	ldr	r2, [r7, #24]
 8008fb8:	3201      	adds	r2, #1
 8008fba:	7812      	ldrb	r2, [r2, #0]
 8008fbc:	0212      	lsls	r2, r2, #8
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	69ba      	ldr	r2, [r7, #24]
 8008fc2:	7812      	ldrb	r2, [r2, #0]
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	b2da      	uxtb	r2, r3
 8008fd4:	69bb      	ldr	r3, [r7, #24]
 8008fd6:	701a      	strb	r2, [r3, #0]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	0a1b      	lsrs	r3, r3, #8
 8008fde:	b29a      	uxth	r2, r3
 8008fe0:	69bb      	ldr	r3, [r7, #24]
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	b2d2      	uxtb	r2, r2
 8008fe6:	701a      	strb	r2, [r3, #0]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	0c1a      	lsrs	r2, r3, #16
 8008fec:	69bb      	ldr	r3, [r7, #24]
 8008fee:	3302      	adds	r3, #2
 8008ff0:	b2d2      	uxtb	r2, r2
 8008ff2:	701a      	strb	r2, [r3, #0]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	0e1a      	lsrs	r2, r3, #24
 8008ff8:	69bb      	ldr	r3, [r7, #24]
 8008ffa:	3303      	adds	r3, #3
 8008ffc:	b2d2      	uxtb	r2, r2
 8008ffe:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009006:	2201      	movs	r2, #1
 8009008:	711a      	strb	r2, [r3, #4]
			break;
 800900a:	e009      	b.n	8009020 <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 800900c:	2302      	movs	r3, #2
 800900e:	77fb      	strb	r3, [r7, #31]
 8009010:	e006      	b.n	8009020 <put_fat+0x29c>
			if (res != FR_OK) break;
 8009012:	bf00      	nop
 8009014:	e004      	b.n	8009020 <put_fat+0x29c>
			if (res != FR_OK) break;
 8009016:	bf00      	nop
 8009018:	e002      	b.n	8009020 <put_fat+0x29c>
			if (res != FR_OK) break;
 800901a:	bf00      	nop
 800901c:	e000      	b.n	8009020 <put_fat+0x29c>
			if (res != FR_OK) break;
 800901e:	bf00      	nop
		}
	}

	return res;
 8009020:	7ffb      	ldrb	r3, [r7, #31]
}
 8009022:	4618      	mov	r0, r3
 8009024:	3720      	adds	r7, #32
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b084      	sub	sp, #16
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
 8009032:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	2b01      	cmp	r3, #1
 8009038:	d906      	bls.n	8009048 <remove_chain+0x1e>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009040:	695b      	ldr	r3, [r3, #20]
 8009042:	683a      	ldr	r2, [r7, #0]
 8009044:	429a      	cmp	r2, r3
 8009046:	d302      	bcc.n	800904e <remove_chain+0x24>
		res = FR_INT_ERR;
 8009048:	2302      	movs	r3, #2
 800904a:	73fb      	strb	r3, [r7, #15]
 800904c:	e049      	b.n	80090e2 <remove_chain+0xb8>

	} else {
		res = FR_OK;
 800904e:	2300      	movs	r3, #0
 8009050:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8009052:	e03b      	b.n	80090cc <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8009054:	6839      	ldr	r1, [r7, #0]
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f7ff fd98 	bl	8008b8c <get_fat>
 800905c:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d03b      	beq.n	80090dc <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	2b01      	cmp	r3, #1
 8009068:	d102      	bne.n	8009070 <remove_chain+0x46>
 800906a:	2302      	movs	r3, #2
 800906c:	73fb      	strb	r3, [r7, #15]
 800906e:	e038      	b.n	80090e2 <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009076:	d102      	bne.n	800907e <remove_chain+0x54>
 8009078:	2301      	movs	r3, #1
 800907a:	73fb      	strb	r3, [r7, #15]
 800907c:	e031      	b.n	80090e2 <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800907e:	2200      	movs	r2, #0
 8009080:	6839      	ldr	r1, [r7, #0]
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f7ff fe7e 	bl	8008d84 <put_fat>
 8009088:	4603      	mov	r3, r0
 800908a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800908c:	7bfb      	ldrb	r3, [r7, #15]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d126      	bne.n	80090e0 <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009098:	691b      	ldr	r3, [r3, #16]
 800909a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800909e:	d013      	beq.n	80090c8 <remove_chain+0x9e>
				fs->free_clust++;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090a6:	691b      	ldr	r3, [r3, #16]
 80090a8:	3301      	adds	r3, #1
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80090b0:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090b8:	795b      	ldrb	r3, [r3, #5]
 80090ba:	f043 0301 	orr.w	r3, r3, #1
 80090be:	b2da      	uxtb	r2, r3
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090c6:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090d2:	695b      	ldr	r3, [r3, #20]
 80090d4:	683a      	ldr	r2, [r7, #0]
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d3bc      	bcc.n	8009054 <remove_chain+0x2a>
 80090da:	e002      	b.n	80090e2 <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 80090dc:	bf00      	nop
 80090de:	e000      	b.n	80090e2 <remove_chain+0xb8>
			if (res != FR_OK) break;
 80090e0:	bf00      	nop
		}
	}

	return res;
 80090e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3710      	adds	r7, #16
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b086      	sub	sp, #24
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d111      	bne.n	8009120 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009102:	68db      	ldr	r3, [r3, #12]
 8009104:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d006      	beq.n	800911a <create_chain+0x2e>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009112:	695b      	ldr	r3, [r3, #20]
 8009114:	693a      	ldr	r2, [r7, #16]
 8009116:	429a      	cmp	r2, r3
 8009118:	d31d      	bcc.n	8009156 <create_chain+0x6a>
 800911a:	2301      	movs	r3, #1
 800911c:	613b      	str	r3, [r7, #16]
 800911e:	e01a      	b.n	8009156 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8009120:	6839      	ldr	r1, [r7, #0]
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f7ff fd32 	bl	8008b8c <get_fat>
 8009128:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	2b01      	cmp	r3, #1
 800912e:	d801      	bhi.n	8009134 <create_chain+0x48>
 8009130:	2301      	movs	r3, #1
 8009132:	e07f      	b.n	8009234 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800913a:	d101      	bne.n	8009140 <create_chain+0x54>
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	e079      	b.n	8009234 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009146:	695b      	ldr	r3, [r3, #20]
 8009148:	68ba      	ldr	r2, [r7, #8]
 800914a:	429a      	cmp	r2, r3
 800914c:	d201      	bcs.n	8009152 <create_chain+0x66>
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	e070      	b.n	8009234 <create_chain+0x148>
		scl = clst;
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	3301      	adds	r3, #1
 800915e:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009166:	695b      	ldr	r3, [r3, #20]
 8009168:	697a      	ldr	r2, [r7, #20]
 800916a:	429a      	cmp	r2, r3
 800916c:	d307      	bcc.n	800917e <create_chain+0x92>
			ncl = 2;
 800916e:	2302      	movs	r3, #2
 8009170:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8009172:	697a      	ldr	r2, [r7, #20]
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	429a      	cmp	r2, r3
 8009178:	d901      	bls.n	800917e <create_chain+0x92>
 800917a:	2300      	movs	r3, #0
 800917c:	e05a      	b.n	8009234 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800917e:	6979      	ldr	r1, [r7, #20]
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f7ff fd03 	bl	8008b8c <get_fat>
 8009186:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d00e      	beq.n	80091ac <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009194:	d002      	beq.n	800919c <create_chain+0xb0>
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	2b01      	cmp	r3, #1
 800919a:	d101      	bne.n	80091a0 <create_chain+0xb4>
			return cs;
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	e049      	b.n	8009234 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 80091a0:	697a      	ldr	r2, [r7, #20]
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d1d8      	bne.n	800915a <create_chain+0x6e>
 80091a8:	2300      	movs	r3, #0
 80091aa:	e043      	b.n	8009234 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 80091ac:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80091ae:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80091b2:	6979      	ldr	r1, [r7, #20]
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f7ff fde5 	bl	8008d84 <put_fat>
 80091ba:	4603      	mov	r3, r0
 80091bc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 80091be:	7bfb      	ldrb	r3, [r7, #15]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d109      	bne.n	80091d8 <create_chain+0xec>
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d006      	beq.n	80091d8 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80091ca:	697a      	ldr	r2, [r7, #20]
 80091cc:	6839      	ldr	r1, [r7, #0]
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f7ff fdd8 	bl	8008d84 <put_fat>
 80091d4:	4603      	mov	r3, r0
 80091d6:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 80091d8:	7bfb      	ldrb	r3, [r7, #15]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d121      	bne.n	8009222 <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091e4:	461a      	mov	r2, r3
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091f0:	691b      	ldr	r3, [r3, #16]
 80091f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091f6:	d01c      	beq.n	8009232 <create_chain+0x146>
			fs->free_clust--;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091fe:	691b      	ldr	r3, [r3, #16]
 8009200:	3b01      	subs	r3, #1
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009208:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009210:	795b      	ldrb	r3, [r3, #5]
 8009212:	f043 0301 	orr.w	r3, r3, #1
 8009216:	b2da      	uxtb	r2, r3
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800921e:	715a      	strb	r2, [r3, #5]
 8009220:	e007      	b.n	8009232 <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8009222:	7bfb      	ldrb	r3, [r7, #15]
 8009224:	2b01      	cmp	r3, #1
 8009226:	d102      	bne.n	800922e <create_chain+0x142>
 8009228:	f04f 33ff 	mov.w	r3, #4294967295
 800922c:	e000      	b.n	8009230 <create_chain+0x144>
 800922e:	2301      	movs	r3, #1
 8009230:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8009232:	697b      	ldr	r3, [r7, #20]
}
 8009234:	4618      	mov	r0, r3
 8009236:	3718      	adds	r7, #24
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800923c:	b480      	push	{r7}
 800923e:	b087      	sub	sp, #28
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800924c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800924e:	3304      	adds	r3, #4
 8009250:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800925e:	895b      	ldrh	r3, [r3, #10]
 8009260:	461a      	mov	r2, r3
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	fbb3 f3f2 	udiv	r3, r3, r2
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800926e:	6812      	ldr	r2, [r2, #0]
 8009270:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009274:	7892      	ldrb	r2, [r2, #2]
 8009276:	fbb3 f3f2 	udiv	r3, r3, r2
 800927a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	1d1a      	adds	r2, r3, #4
 8009280:	613a      	str	r2, [r7, #16]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d101      	bne.n	8009290 <clmt_clust+0x54>
 800928c:	2300      	movs	r3, #0
 800928e:	e010      	b.n	80092b2 <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 8009290:	697a      	ldr	r2, [r7, #20]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	429a      	cmp	r2, r3
 8009296:	d307      	bcc.n	80092a8 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 8009298:	697a      	ldr	r2, [r7, #20]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	1ad3      	subs	r3, r2, r3
 800929e:	617b      	str	r3, [r7, #20]
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	3304      	adds	r3, #4
 80092a4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80092a6:	e7e9      	b.n	800927c <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 80092a8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	4413      	add	r3, r2
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	371c      	adds	r7, #28
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr

080092be <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 80092be:	b580      	push	{r7, lr}
 80092c0:	b086      	sub	sp, #24
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
 80092c6:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	b29a      	uxth	r2, r3
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092d2:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092da:	689b      	ldr	r3, [r3, #8]
 80092dc:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d009      	beq.n	80092f8 <dir_sdi+0x3a>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092f0:	695b      	ldr	r3, [r3, #20]
 80092f2:	697a      	ldr	r2, [r7, #20]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d301      	bcc.n	80092fc <dir_sdi+0x3e>
		return FR_INT_ERR;
 80092f8:	2302      	movs	r3, #2
 80092fa:	e0aa      	b.n	8009452 <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d110      	bne.n	8009324 <dir_sdi+0x66>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800930e:	781b      	ldrb	r3, [r3, #0]
 8009310:	2b03      	cmp	r3, #3
 8009312:	d107      	bne.n	8009324 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009322:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d115      	bne.n	8009356 <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009336:	891b      	ldrh	r3, [r3, #8]
 8009338:	461a      	mov	r2, r3
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	4293      	cmp	r3, r2
 800933e:	d301      	bcc.n	8009344 <dir_sdi+0x86>
			return FR_INT_ERR;
 8009340:	2302      	movs	r3, #2
 8009342:	e086      	b.n	8009452 <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009352:	613b      	str	r3, [r7, #16]
 8009354:	e043      	b.n	80093de <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009362:	895b      	ldrh	r3, [r3, #10]
 8009364:	095b      	lsrs	r3, r3, #5
 8009366:	b29b      	uxth	r3, r3
 8009368:	461a      	mov	r2, r3
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009376:	789b      	ldrb	r3, [r3, #2]
 8009378:	fb02 f303 	mul.w	r3, r2, r3
 800937c:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800937e:	e021      	b.n	80093c4 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	6979      	ldr	r1, [r7, #20]
 800938a:	4618      	mov	r0, r3
 800938c:	f7ff fbfe 	bl	8008b8c <get_fat>
 8009390:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009398:	d101      	bne.n	800939e <dir_sdi+0xe0>
 800939a:	2301      	movs	r3, #1
 800939c:	e059      	b.n	8009452 <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d909      	bls.n	80093b8 <dir_sdi+0xfa>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093b0:	695b      	ldr	r3, [r3, #20]
 80093b2:	697a      	ldr	r2, [r7, #20]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d301      	bcc.n	80093bc <dir_sdi+0xfe>
				return FR_INT_ERR;
 80093b8:	2302      	movs	r3, #2
 80093ba:	e04a      	b.n	8009452 <dir_sdi+0x194>
			idx -= ic;
 80093bc:	683a      	ldr	r2, [r7, #0]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	1ad3      	subs	r3, r2, r3
 80093c2:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80093c4:	683a      	ldr	r2, [r7, #0]
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d2d9      	bcs.n	8009380 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	6979      	ldr	r1, [r7, #20]
 80093d6:	4618      	mov	r0, r3
 80093d8:	f7ff fbb3 	bl	8008b42 <clust2sect>
 80093dc:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093e4:	461a      	mov	r2, r3
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d101      	bne.n	80093f4 <dir_sdi+0x136>
 80093f0:	2302      	movs	r3, #2
 80093f2:	e02e      	b.n	8009452 <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009400:	895b      	ldrh	r3, [r3, #10]
 8009402:	095b      	lsrs	r3, r3, #5
 8009404:	b29b      	uxth	r3, r3
 8009406:	461a      	mov	r2, r3
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	fbb3 f2f2 	udiv	r2, r3, r2
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	4413      	add	r3, r2
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009418:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4618      	mov	r0, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009430:	895b      	ldrh	r3, [r3, #10]
 8009432:	095b      	lsrs	r3, r3, #5
 8009434:	b29b      	uxth	r3, r3
 8009436:	461a      	mov	r2, r3
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	fbb3 f1f2 	udiv	r1, r3, r2
 800943e:	fb01 f202 	mul.w	r2, r1, r2
 8009442:	1a9b      	subs	r3, r3, r2
 8009444:	015b      	lsls	r3, r3, #5
 8009446:	4403      	add	r3, r0
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800944e:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8009450:	2300      	movs	r3, #0
}
 8009452:	4618      	mov	r0, r3
 8009454:	3718      	adds	r7, #24
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}

0800945a <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800945a:	b590      	push	{r4, r7, lr}
 800945c:	b087      	sub	sp, #28
 800945e:	af00      	add	r7, sp, #0
 8009460:	6078      	str	r0, [r7, #4]
 8009462:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800946a:	88db      	ldrh	r3, [r3, #6]
 800946c:	3301      	adds	r3, #1
 800946e:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	b29b      	uxth	r3, r3
 8009474:	2b00      	cmp	r3, #0
 8009476:	d005      	beq.n	8009484 <dir_next+0x2a>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800947e:	691b      	ldr	r3, [r3, #16]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d101      	bne.n	8009488 <dir_next+0x2e>
		return FR_NO_FILE;
 8009484:	2304      	movs	r3, #4
 8009486:	e12e      	b.n	80096e6 <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009494:	895b      	ldrh	r3, [r3, #10]
 8009496:	095b      	lsrs	r3, r3, #5
 8009498:	b29b      	uxth	r3, r3
 800949a:	461a      	mov	r2, r3
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	fbb3 f1f2 	udiv	r1, r3, r2
 80094a2:	fb01 f202 	mul.w	r2, r1, r2
 80094a6:	1a9b      	subs	r3, r3, r2
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	f040 80fa 	bne.w	80096a2 <dir_next+0x248>
		dp->sect++;					/* Next sector */
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094b4:	691b      	ldr	r3, [r3, #16]
 80094b6:	3301      	adds	r3, #1
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80094be:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094c6:	68db      	ldr	r3, [r3, #12]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d10d      	bne.n	80094e8 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094d8:	891b      	ldrh	r3, [r3, #8]
 80094da:	461a      	mov	r2, r3
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	4293      	cmp	r3, r2
 80094e0:	f0c0 80df 	bcc.w	80096a2 <dir_next+0x248>
				return FR_NO_FILE;
 80094e4:	2304      	movs	r3, #4
 80094e6:	e0fe      	b.n	80096e6 <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094f4:	895b      	ldrh	r3, [r3, #10]
 80094f6:	095b      	lsrs	r3, r3, #5
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	461a      	mov	r2, r3
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009508:	6812      	ldr	r2, [r2, #0]
 800950a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800950e:	7892      	ldrb	r2, [r2, #2]
 8009510:	3a01      	subs	r2, #1
 8009512:	4013      	ands	r3, r2
 8009514:	2b00      	cmp	r3, #0
 8009516:	f040 80c4 	bne.w	80096a2 <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009520:	681a      	ldr	r2, [r3, #0]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009528:	68db      	ldr	r3, [r3, #12]
 800952a:	4619      	mov	r1, r3
 800952c:	4610      	mov	r0, r2
 800952e:	f7ff fb2d 	bl	8008b8c <get_fat>
 8009532:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	2b01      	cmp	r3, #1
 8009538:	d801      	bhi.n	800953e <dir_next+0xe4>
 800953a:	2302      	movs	r3, #2
 800953c:	e0d3      	b.n	80096e6 <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009544:	d101      	bne.n	800954a <dir_next+0xf0>
 8009546:	2301      	movs	r3, #1
 8009548:	e0cd      	b.n	80096e6 <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009556:	695b      	ldr	r3, [r3, #20]
 8009558:	697a      	ldr	r2, [r7, #20]
 800955a:	429a      	cmp	r2, r3
 800955c:	f0c0 808e 	bcc.w	800967c <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d101      	bne.n	800956a <dir_next+0x110>
 8009566:	2304      	movs	r3, #4
 8009568:	e0bd      	b.n	80096e6 <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	4619      	mov	r1, r3
 800957c:	4610      	mov	r0, r2
 800957e:	f7ff fdb5 	bl	80090ec <create_chain>
 8009582:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d101      	bne.n	800958e <dir_next+0x134>
 800958a:	2307      	movs	r3, #7
 800958c:	e0ab      	b.n	80096e6 <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	2b01      	cmp	r3, #1
 8009592:	d101      	bne.n	8009598 <dir_next+0x13e>
 8009594:	2302      	movs	r3, #2
 8009596:	e0a6      	b.n	80096e6 <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800959e:	d101      	bne.n	80095a4 <dir_next+0x14a>
 80095a0:	2301      	movs	r3, #1
 80095a2:	e0a0      	b.n	80096e6 <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7ff f985 	bl	80088bc <sync_window>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d001      	beq.n	80095bc <dir_next+0x162>
 80095b8:	2301      	movs	r3, #1
 80095ba:	e094      	b.n	80096e6 <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4618      	mov	r0, r3
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095d2:	895b      	ldrh	r3, [r3, #10]
 80095d4:	461a      	mov	r2, r3
 80095d6:	2100      	movs	r1, #0
 80095d8:	f7fe ff53 	bl	8008482 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095ea:	681c      	ldr	r4, [r3, #0]
 80095ec:	6979      	ldr	r1, [r7, #20]
 80095ee:	4610      	mov	r0, r2
 80095f0:	f7ff faa7 	bl	8008b42 <clust2sect>
 80095f4:	4603      	mov	r3, r0
 80095f6:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 80095fa:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80095fc:	2300      	movs	r3, #0
 80095fe:	613b      	str	r3, [r7, #16]
 8009600:	e021      	b.n	8009646 <dir_next+0x1ec>
						dp->fs->wflag = 1;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800960e:	2201      	movs	r2, #1
 8009610:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4618      	mov	r0, r3
 800961c:	f7ff f94e 	bl	80088bc <sync_window>
 8009620:	4603      	mov	r3, r0
 8009622:	2b00      	cmp	r3, #0
 8009624:	d001      	beq.n	800962a <dir_next+0x1d0>
 8009626:	2301      	movs	r3, #1
 8009628:	e05d      	b.n	80096e6 <dir_next+0x28c>
						dp->fs->winsect++;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8009636:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009638:	3201      	adds	r2, #1
 800963a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800963e:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	3301      	adds	r3, #1
 8009644:	613b      	str	r3, [r7, #16]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009652:	789b      	ldrb	r3, [r3, #2]
 8009654:	461a      	mov	r2, r3
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	4293      	cmp	r3, r2
 800965a:	d3d2      	bcc.n	8009602 <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009668:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	1acb      	subs	r3, r1, r3
 8009676:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800967a:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009682:	461a      	mov	r2, r3
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	6979      	ldr	r1, [r7, #20]
 8009692:	4618      	mov	r0, r3
 8009694:	f7ff fa55 	bl	8008b42 <clust2sect>
 8009698:	4602      	mov	r2, r0
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096a0:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	b29a      	uxth	r2, r3
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096ac:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4618      	mov	r0, r3
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096c4:	895b      	ldrh	r3, [r3, #10]
 80096c6:	095b      	lsrs	r3, r3, #5
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	461a      	mov	r2, r3
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80096d2:	fb01 f202 	mul.w	r2, r1, r2
 80096d6:	1a9b      	subs	r3, r3, r2
 80096d8:	015b      	lsls	r3, r3, #5
 80096da:	4403      	add	r3, r0
 80096dc:	687a      	ldr	r2, [r7, #4]
 80096de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80096e2:	6153      	str	r3, [r2, #20]

	return FR_OK;
 80096e4:	2300      	movs	r3, #0
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	371c      	adds	r7, #28
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd90      	pop	{r4, r7, pc}

080096ee <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 80096ee:	b580      	push	{r7, lr}
 80096f0:	b084      	sub	sp, #16
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
 80096f6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 80096f8:	2100      	movs	r1, #0
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f7ff fddf 	bl	80092be <dir_sdi>
 8009700:	4603      	mov	r3, r0
 8009702:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009704:	7bfb      	ldrb	r3, [r7, #15]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d135      	bne.n	8009776 <dir_alloc+0x88>
		n = 0;
 800970a:	2300      	movs	r3, #0
 800970c:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800971c:	691b      	ldr	r3, [r3, #16]
 800971e:	4619      	mov	r1, r3
 8009720:	4610      	mov	r0, r2
 8009722:	f7ff f91d 	bl	8008960 <move_window>
 8009726:	4603      	mov	r3, r0
 8009728:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800972a:	7bfb      	ldrb	r3, [r7, #15]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d121      	bne.n	8009774 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009736:	695b      	ldr	r3, [r3, #20]
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	2be5      	cmp	r3, #229	; 0xe5
 800973c:	d006      	beq.n	800974c <dir_alloc+0x5e>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009744:	695b      	ldr	r3, [r3, #20]
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d107      	bne.n	800975c <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	3301      	adds	r3, #1
 8009750:	60bb      	str	r3, [r7, #8]
 8009752:	68ba      	ldr	r2, [r7, #8]
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	429a      	cmp	r2, r3
 8009758:	d102      	bne.n	8009760 <dir_alloc+0x72>
 800975a:	e00c      	b.n	8009776 <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800975c:	2300      	movs	r3, #0
 800975e:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8009760:	2101      	movs	r1, #1
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f7ff fe79 	bl	800945a <dir_next>
 8009768:	4603      	mov	r3, r0
 800976a:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800976c:	7bfb      	ldrb	r3, [r7, #15]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d0cd      	beq.n	800970e <dir_alloc+0x20>
 8009772:	e000      	b.n	8009776 <dir_alloc+0x88>
			if (res != FR_OK) break;
 8009774:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009776:	7bfb      	ldrb	r3, [r7, #15]
 8009778:	2b04      	cmp	r3, #4
 800977a:	d101      	bne.n	8009780 <dir_alloc+0x92>
 800977c:	2307      	movs	r3, #7
 800977e:	73fb      	strb	r3, [r7, #15]
	return res;
 8009780:	7bfb      	ldrb	r3, [r7, #15]
}
 8009782:	4618      	mov	r0, r3
 8009784:	3710      	adds	r7, #16
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800978a:	b480      	push	{r7}
 800978c:	b085      	sub	sp, #20
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
 8009792:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	331b      	adds	r3, #27
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	021b      	lsls	r3, r3, #8
 800979c:	b21a      	sxth	r2, r3
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	331a      	adds	r3, #26
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	b21b      	sxth	r3, r3
 80097a6:	4313      	orrs	r3, r2
 80097a8:	b21b      	sxth	r3, r3
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	2b03      	cmp	r3, #3
 80097b8:	d10f      	bne.n	80097da <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	3315      	adds	r3, #21
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	021b      	lsls	r3, r3, #8
 80097c2:	b21a      	sxth	r2, r3
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	3314      	adds	r3, #20
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	b21b      	sxth	r3, r3
 80097cc:	4313      	orrs	r3, r2
 80097ce:	b21b      	sxth	r3, r3
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	041b      	lsls	r3, r3, #16
 80097d4:	68fa      	ldr	r2, [r7, #12]
 80097d6:	4313      	orrs	r3, r2
 80097d8:	60fb      	str	r3, [r7, #12]

	return cl;
 80097da:	68fb      	ldr	r3, [r7, #12]
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3714      	adds	r7, #20
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b083      	sub	sp, #12
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	331a      	adds	r3, #26
 80097f6:	683a      	ldr	r2, [r7, #0]
 80097f8:	b2d2      	uxtb	r2, r2
 80097fa:	701a      	strb	r2, [r3, #0]
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	b29b      	uxth	r3, r3
 8009800:	0a1b      	lsrs	r3, r3, #8
 8009802:	b29a      	uxth	r2, r3
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	331b      	adds	r3, #27
 8009808:	b2d2      	uxtb	r2, r2
 800980a:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	0c1a      	lsrs	r2, r3, #16
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	3314      	adds	r3, #20
 8009814:	b2d2      	uxtb	r2, r2
 8009816:	701a      	strb	r2, [r3, #0]
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	0c1b      	lsrs	r3, r3, #16
 800981c:	b29b      	uxth	r3, r3
 800981e:	0a1b      	lsrs	r3, r3, #8
 8009820:	b29a      	uxth	r2, r3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	3315      	adds	r3, #21
 8009826:	b2d2      	uxtb	r2, r2
 8009828:	701a      	strb	r2, [r3, #0]
}
 800982a:	bf00      	nop
 800982c:	370c      	adds	r7, #12
 800982e:	46bd      	mov	sp, r7
 8009830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009834:	4770      	bx	lr
	...

08009838 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b086      	sub	sp, #24
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800984a:	1e5a      	subs	r2, r3, #1
 800984c:	4613      	mov	r3, r2
 800984e:	005b      	lsls	r3, r3, #1
 8009850:	4413      	add	r3, r2
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	4413      	add	r3, r2
 8009856:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8009858:	2300      	movs	r3, #0
 800985a:	613b      	str	r3, [r7, #16]
 800985c:	2301      	movs	r3, #1
 800985e:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8009860:	4a2b      	ldr	r2, [pc, #172]	; (8009910 <cmp_lfn+0xd8>)
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	4413      	add	r3, r2
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	3301      	adds	r3, #1
 800986a:	683a      	ldr	r2, [r7, #0]
 800986c:	4413      	add	r3, r2
 800986e:	781b      	ldrb	r3, [r3, #0]
 8009870:	021b      	lsls	r3, r3, #8
 8009872:	b21a      	sxth	r2, r3
 8009874:	4926      	ldr	r1, [pc, #152]	; (8009910 <cmp_lfn+0xd8>)
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	440b      	add	r3, r1
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	4619      	mov	r1, r3
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	440b      	add	r3, r1
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	b21b      	sxth	r3, r3
 8009886:	4313      	orrs	r3, r2
 8009888:	b21b      	sxth	r3, r3
 800988a:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800988c:	89fb      	ldrh	r3, [r7, #14]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d019      	beq.n	80098c6 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8009892:	89bb      	ldrh	r3, [r7, #12]
 8009894:	4618      	mov	r0, r3
 8009896:	f002 fcbd 	bl	800c214 <ff_wtoupper>
 800989a:	4603      	mov	r3, r0
 800989c:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	2bfe      	cmp	r3, #254	; 0xfe
 80098a2:	d80e      	bhi.n	80098c2 <cmp_lfn+0x8a>
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	1c5a      	adds	r2, r3, #1
 80098a8:	617a      	str	r2, [r7, #20]
 80098aa:	005b      	lsls	r3, r3, #1
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	4413      	add	r3, r2
 80098b0:	881b      	ldrh	r3, [r3, #0]
 80098b2:	4618      	mov	r0, r3
 80098b4:	f002 fcae 	bl	800c214 <ff_wtoupper>
 80098b8:	4603      	mov	r3, r0
 80098ba:	461a      	mov	r2, r3
 80098bc:	89fb      	ldrh	r3, [r7, #14]
 80098be:	4293      	cmp	r3, r2
 80098c0:	d008      	beq.n	80098d4 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 80098c2:	2300      	movs	r3, #0
 80098c4:	e01f      	b.n	8009906 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 80098c6:	89bb      	ldrh	r3, [r7, #12]
 80098c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d001      	beq.n	80098d4 <cmp_lfn+0x9c>
 80098d0:	2300      	movs	r3, #0
 80098d2:	e018      	b.n	8009906 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	3301      	adds	r3, #1
 80098d8:	613b      	str	r3, [r7, #16]
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	2b0c      	cmp	r3, #12
 80098de:	d9bf      	bls.n	8009860 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d00b      	beq.n	8009904 <cmp_lfn+0xcc>
 80098ec:	89fb      	ldrh	r3, [r7, #14]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d008      	beq.n	8009904 <cmp_lfn+0xcc>
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	005b      	lsls	r3, r3, #1
 80098f6:	687a      	ldr	r2, [r7, #4]
 80098f8:	4413      	add	r3, r2
 80098fa:	881b      	ldrh	r3, [r3, #0]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d001      	beq.n	8009904 <cmp_lfn+0xcc>
		return 0;
 8009900:	2300      	movs	r3, #0
 8009902:	e000      	b.n	8009906 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8009904:	2301      	movs	r3, #1
}
 8009906:	4618      	mov	r0, r3
 8009908:	3718      	adds	r7, #24
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	0800d250 	.word	0x0800d250

08009914 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8009914:	b480      	push	{r7}
 8009916:	b089      	sub	sp, #36	; 0x24
 8009918:	af00      	add	r7, sp, #0
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	4611      	mov	r1, r2
 8009920:	461a      	mov	r2, r3
 8009922:	460b      	mov	r3, r1
 8009924:	71fb      	strb	r3, [r7, #7]
 8009926:	4613      	mov	r3, r2
 8009928:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	330d      	adds	r3, #13
 800992e:	79ba      	ldrb	r2, [r7, #6]
 8009930:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	330b      	adds	r3, #11
 8009936:	220f      	movs	r2, #15
 8009938:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	330c      	adds	r3, #12
 800993e:	2200      	movs	r2, #0
 8009940:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	331a      	adds	r3, #26
 8009946:	2200      	movs	r2, #0
 8009948:	701a      	strb	r2, [r3, #0]
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	331b      	adds	r3, #27
 800994e:	2200      	movs	r2, #0
 8009950:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8009952:	79fb      	ldrb	r3, [r7, #7]
 8009954:	1e5a      	subs	r2, r3, #1
 8009956:	4613      	mov	r3, r2
 8009958:	005b      	lsls	r3, r3, #1
 800995a:	4413      	add	r3, r2
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	4413      	add	r3, r2
 8009960:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8009962:	2300      	movs	r3, #0
 8009964:	82fb      	strh	r3, [r7, #22]
 8009966:	2300      	movs	r3, #0
 8009968:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800996a:	8afb      	ldrh	r3, [r7, #22]
 800996c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009970:	4293      	cmp	r3, r2
 8009972:	d007      	beq.n	8009984 <fit_lfn+0x70>
 8009974:	69fb      	ldr	r3, [r7, #28]
 8009976:	1c5a      	adds	r2, r3, #1
 8009978:	61fa      	str	r2, [r7, #28]
 800997a:	005b      	lsls	r3, r3, #1
 800997c:	68fa      	ldr	r2, [r7, #12]
 800997e:	4413      	add	r3, r2
 8009980:	881b      	ldrh	r3, [r3, #0]
 8009982:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8009984:	4a1d      	ldr	r2, [pc, #116]	; (80099fc <fit_lfn+0xe8>)
 8009986:	69bb      	ldr	r3, [r7, #24]
 8009988:	4413      	add	r3, r2
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	461a      	mov	r2, r3
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	4413      	add	r3, r2
 8009992:	8afa      	ldrh	r2, [r7, #22]
 8009994:	b2d2      	uxtb	r2, r2
 8009996:	701a      	strb	r2, [r3, #0]
 8009998:	8afb      	ldrh	r3, [r7, #22]
 800999a:	0a1b      	lsrs	r3, r3, #8
 800999c:	b299      	uxth	r1, r3
 800999e:	4a17      	ldr	r2, [pc, #92]	; (80099fc <fit_lfn+0xe8>)
 80099a0:	69bb      	ldr	r3, [r7, #24]
 80099a2:	4413      	add	r3, r2
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	3301      	adds	r3, #1
 80099a8:	68ba      	ldr	r2, [r7, #8]
 80099aa:	4413      	add	r3, r2
 80099ac:	b2ca      	uxtb	r2, r1
 80099ae:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 80099b0:	8afb      	ldrh	r3, [r7, #22]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d102      	bne.n	80099bc <fit_lfn+0xa8>
 80099b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80099ba:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80099bc:	69bb      	ldr	r3, [r7, #24]
 80099be:	3301      	adds	r3, #1
 80099c0:	61bb      	str	r3, [r7, #24]
 80099c2:	69bb      	ldr	r3, [r7, #24]
 80099c4:	2b0c      	cmp	r3, #12
 80099c6:	d9d0      	bls.n	800996a <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 80099c8:	8afb      	ldrh	r3, [r7, #22]
 80099ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d006      	beq.n	80099e0 <fit_lfn+0xcc>
 80099d2:	69fb      	ldr	r3, [r7, #28]
 80099d4:	005b      	lsls	r3, r3, #1
 80099d6:	68fa      	ldr	r2, [r7, #12]
 80099d8:	4413      	add	r3, r2
 80099da:	881b      	ldrh	r3, [r3, #0]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d103      	bne.n	80099e8 <fit_lfn+0xd4>
 80099e0:	79fb      	ldrb	r3, [r7, #7]
 80099e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099e6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	79fa      	ldrb	r2, [r7, #7]
 80099ec:	701a      	strb	r2, [r3, #0]
}
 80099ee:	bf00      	nop
 80099f0:	3724      	adds	r7, #36	; 0x24
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr
 80099fa:	bf00      	nop
 80099fc:	0800d250 	.word	0x0800d250

08009a00 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b08c      	sub	sp, #48	; 0x30
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	60b9      	str	r1, [r7, #8]
 8009a0a:	607a      	str	r2, [r7, #4]
 8009a0c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8009a0e:	220b      	movs	r2, #11
 8009a10:	68b9      	ldr	r1, [r7, #8]
 8009a12:	68f8      	ldr	r0, [r7, #12]
 8009a14:	f7fe fd16 	bl	8008444 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	2b05      	cmp	r3, #5
 8009a1c:	d92b      	bls.n	8009a76 <gen_numname+0x76>
		sr = seq;
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8009a22:	e022      	b.n	8009a6a <gen_numname+0x6a>
			wc = *lfn++;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	1c9a      	adds	r2, r3, #2
 8009a28:	607a      	str	r2, [r7, #4]
 8009a2a:	881b      	ldrh	r3, [r3, #0]
 8009a2c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8009a2e:	2300      	movs	r3, #0
 8009a30:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a32:	e017      	b.n	8009a64 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8009a34:	69fb      	ldr	r3, [r7, #28]
 8009a36:	005a      	lsls	r2, r3, #1
 8009a38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009a3a:	f003 0301 	and.w	r3, r3, #1
 8009a3e:	4413      	add	r3, r2
 8009a40:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8009a42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009a44:	085b      	lsrs	r3, r3, #1
 8009a46:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8009a48:	69fb      	ldr	r3, [r7, #28]
 8009a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d005      	beq.n	8009a5e <gen_numname+0x5e>
 8009a52:	69fb      	ldr	r3, [r7, #28]
 8009a54:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8009a58:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8009a5c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8009a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a60:	3301      	adds	r3, #1
 8009a62:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a66:	2b0f      	cmp	r3, #15
 8009a68:	d9e4      	bls.n	8009a34 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	881b      	ldrh	r3, [r3, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d1d8      	bne.n	8009a24 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8009a72:	69fb      	ldr	r3, [r7, #28]
 8009a74:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8009a76:	2307      	movs	r3, #7
 8009a78:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	f003 030f 	and.w	r3, r3, #15
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	3330      	adds	r3, #48	; 0x30
 8009a86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8009a8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a8e:	2b39      	cmp	r3, #57	; 0x39
 8009a90:	d904      	bls.n	8009a9c <gen_numname+0x9c>
 8009a92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a96:	3307      	adds	r3, #7
 8009a98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8009a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9e:	1e5a      	subs	r2, r3, #1
 8009aa0:	62ba      	str	r2, [r7, #40]	; 0x28
 8009aa2:	3330      	adds	r3, #48	; 0x30
 8009aa4:	443b      	add	r3, r7
 8009aa6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009aaa:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	091b      	lsrs	r3, r3, #4
 8009ab2:	603b      	str	r3, [r7, #0]
	} while (seq);
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d1df      	bne.n	8009a7a <gen_numname+0x7a>
	ns[i] = '~';
 8009aba:	f107 0214 	add.w	r2, r7, #20
 8009abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac0:	4413      	add	r3, r2
 8009ac2:	227e      	movs	r2, #126	; 0x7e
 8009ac4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8009aca:	e002      	b.n	8009ad2 <gen_numname+0xd2>
 8009acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ace:	3301      	adds	r3, #1
 8009ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8009ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	d205      	bcs.n	8009ae6 <gen_numname+0xe6>
 8009ada:	68fa      	ldr	r2, [r7, #12]
 8009adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ade:	4413      	add	r3, r2
 8009ae0:	781b      	ldrb	r3, [r3, #0]
 8009ae2:	2b20      	cmp	r3, #32
 8009ae4:	d1f2      	bne.n	8009acc <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae8:	2b07      	cmp	r3, #7
 8009aea:	d807      	bhi.n	8009afc <gen_numname+0xfc>
 8009aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aee:	1c5a      	adds	r2, r3, #1
 8009af0:	62ba      	str	r2, [r7, #40]	; 0x28
 8009af2:	3330      	adds	r3, #48	; 0x30
 8009af4:	443b      	add	r3, r7
 8009af6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8009afa:	e000      	b.n	8009afe <gen_numname+0xfe>
 8009afc:	2120      	movs	r1, #32
 8009afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b00:	1c5a      	adds	r2, r3, #1
 8009b02:	627a      	str	r2, [r7, #36]	; 0x24
 8009b04:	68fa      	ldr	r2, [r7, #12]
 8009b06:	4413      	add	r3, r2
 8009b08:	460a      	mov	r2, r1
 8009b0a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8009b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0e:	2b07      	cmp	r3, #7
 8009b10:	d9e9      	bls.n	8009ae6 <gen_numname+0xe6>
}
 8009b12:	bf00      	nop
 8009b14:	bf00      	nop
 8009b16:	3730      	adds	r7, #48	; 0x30
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b085      	sub	sp, #20
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8009b24:	2300      	movs	r3, #0
 8009b26:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009b28:	230b      	movs	r3, #11
 8009b2a:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8009b2c:	7bfb      	ldrb	r3, [r7, #15]
 8009b2e:	b2da      	uxtb	r2, r3
 8009b30:	0852      	lsrs	r2, r2, #1
 8009b32:	01db      	lsls	r3, r3, #7
 8009b34:	4313      	orrs	r3, r2
 8009b36:	b2da      	uxtb	r2, r3
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	1c59      	adds	r1, r3, #1
 8009b3c:	6079      	str	r1, [r7, #4]
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	4413      	add	r3, r2
 8009b42:	73fb      	strb	r3, [r7, #15]
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	3b01      	subs	r3, #1
 8009b48:	60bb      	str	r3, [r7, #8]
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d1ed      	bne.n	8009b2c <sum_sfn+0x10>
	return sum;
 8009b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3714      	adds	r7, #20
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr

08009b5e <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8009b5e:	b580      	push	{r7, lr}
 8009b60:	b086      	sub	sp, #24
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009b66:	2100      	movs	r1, #0
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f7ff fba8 	bl	80092be <dir_sdi>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009b72:	7dfb      	ldrb	r3, [r7, #23]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d001      	beq.n	8009b7c <dir_find+0x1e>
 8009b78:	7dfb      	ldrb	r3, [r7, #23]
 8009b7a:	e0b8      	b.n	8009cee <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8009b7c:	23ff      	movs	r3, #255	; 0xff
 8009b7e:	753b      	strb	r3, [r7, #20]
 8009b80:	7d3b      	ldrb	r3, [r7, #20]
 8009b82:	757b      	strb	r3, [r7, #21]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b8e:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b9e:	691b      	ldr	r3, [r3, #16]
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	4610      	mov	r0, r2
 8009ba4:	f7fe fedc 	bl	8008960 <move_window>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009bac:	7dfb      	ldrb	r3, [r7, #23]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	f040 8097 	bne.w	8009ce2 <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bba:	695b      	ldr	r3, [r3, #20]
 8009bbc:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009bc4:	7dbb      	ldrb	r3, [r7, #22]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d102      	bne.n	8009bd0 <dir_find+0x72>
 8009bca:	2304      	movs	r3, #4
 8009bcc:	75fb      	strb	r3, [r7, #23]
 8009bce:	e08d      	b.n	8009cec <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	330b      	adds	r3, #11
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009bda:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8009bdc:	7dbb      	ldrb	r3, [r7, #22]
 8009bde:	2be5      	cmp	r3, #229	; 0xe5
 8009be0:	d007      	beq.n	8009bf2 <dir_find+0x94>
 8009be2:	7bfb      	ldrb	r3, [r7, #15]
 8009be4:	f003 0308 	and.w	r3, r3, #8
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d00b      	beq.n	8009c04 <dir_find+0xa6>
 8009bec:	7bfb      	ldrb	r3, [r7, #15]
 8009bee:	2b0f      	cmp	r3, #15
 8009bf0:	d008      	beq.n	8009c04 <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8009bf2:	23ff      	movs	r3, #255	; 0xff
 8009bf4:	757b      	strb	r3, [r7, #21]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c00:	849a      	strh	r2, [r3, #36]	; 0x24
 8009c02:	e063      	b.n	8009ccc <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8009c04:	7bfb      	ldrb	r3, [r7, #15]
 8009c06:	2b0f      	cmp	r3, #15
 8009c08:	d137      	bne.n	8009c7a <dir_find+0x11c>
				if (dp->lfn) {
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c10:	6a1b      	ldr	r3, [r3, #32]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d05a      	beq.n	8009ccc <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8009c16:	7dbb      	ldrb	r3, [r7, #22]
 8009c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d010      	beq.n	8009c42 <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	7b5b      	ldrb	r3, [r3, #13]
 8009c24:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8009c26:	7dbb      	ldrb	r3, [r7, #22]
 8009c28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c2c:	75bb      	strb	r3, [r7, #22]
 8009c2e:	7dbb      	ldrb	r3, [r7, #22]
 8009c30:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c38:	88da      	ldrh	r2, [r3, #6]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c40:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8009c42:	7dba      	ldrb	r2, [r7, #22]
 8009c44:	7d7b      	ldrb	r3, [r7, #21]
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d114      	bne.n	8009c74 <dir_find+0x116>
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	330d      	adds	r3, #13
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	7d3a      	ldrb	r2, [r7, #20]
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d10e      	bne.n	8009c74 <dir_find+0x116>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c5c:	6a1b      	ldr	r3, [r3, #32]
 8009c5e:	6939      	ldr	r1, [r7, #16]
 8009c60:	4618      	mov	r0, r3
 8009c62:	f7ff fde9 	bl	8009838 <cmp_lfn>
 8009c66:	4603      	mov	r3, r0
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d003      	beq.n	8009c74 <dir_find+0x116>
 8009c6c:	7d7b      	ldrb	r3, [r7, #21]
 8009c6e:	3b01      	subs	r3, #1
 8009c70:	b2db      	uxtb	r3, r3
 8009c72:	e000      	b.n	8009c76 <dir_find+0x118>
 8009c74:	23ff      	movs	r3, #255	; 0xff
 8009c76:	757b      	strb	r3, [r7, #21]
 8009c78:	e028      	b.n	8009ccc <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8009c7a:	7d7b      	ldrb	r3, [r7, #21]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d107      	bne.n	8009c90 <dir_find+0x132>
 8009c80:	6938      	ldr	r0, [r7, #16]
 8009c82:	f7ff ff4b 	bl	8009b1c <sum_sfn>
 8009c86:	4603      	mov	r3, r0
 8009c88:	461a      	mov	r2, r3
 8009c8a:	7d3b      	ldrb	r3, [r7, #20]
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d02a      	beq.n	8009ce6 <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c96:	699b      	ldr	r3, [r3, #24]
 8009c98:	330b      	adds	r3, #11
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	f003 0301 	and.w	r3, r3, #1
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d10b      	bne.n	8009cbc <dir_find+0x15e>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009caa:	699b      	ldr	r3, [r3, #24]
 8009cac:	220b      	movs	r2, #11
 8009cae:	4619      	mov	r1, r3
 8009cb0:	6938      	ldr	r0, [r7, #16]
 8009cb2:	f7fe fc01 	bl	80084b8 <mem_cmp>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d016      	beq.n	8009cea <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8009cbc:	23ff      	movs	r3, #255	; 0xff
 8009cbe:	757b      	strb	r3, [r7, #21]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009cca:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8009ccc:	2100      	movs	r1, #0
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f7ff fbc3 	bl	800945a <dir_next>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009cd8:	7dfb      	ldrb	r3, [r7, #23]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	f43f af58 	beq.w	8009b90 <dir_find+0x32>
 8009ce0:	e004      	b.n	8009cec <dir_find+0x18e>
		if (res != FR_OK) break;
 8009ce2:	bf00      	nop
 8009ce4:	e002      	b.n	8009cec <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8009ce6:	bf00      	nop
 8009ce8:	e000      	b.n	8009cec <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8009cea:	bf00      	nop

	return res;
 8009cec:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3718      	adds	r7, #24
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
	...

08009cf8 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b08c      	sub	sp, #48	; 0x30
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d06:	699b      	ldr	r3, [r3, #24]
 8009d08:	623b      	str	r3, [r7, #32]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d10:	6a1b      	ldr	r3, [r3, #32]
 8009d12:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8009d14:	f107 030c 	add.w	r3, r7, #12
 8009d18:	220c      	movs	r2, #12
 8009d1a:	6a39      	ldr	r1, [r7, #32]
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f7fe fb91 	bl	8008444 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009d22:	7dfb      	ldrb	r3, [r7, #23]
 8009d24:	f003 0301 	and.w	r3, r3, #1
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d03b      	beq.n	8009da4 <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8009d2c:	6a3b      	ldr	r3, [r7, #32]
 8009d2e:	330b      	adds	r3, #11
 8009d30:	2200      	movs	r2, #0
 8009d32:	701a      	strb	r2, [r3, #0]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 8009d40:	2301      	movs	r3, #1
 8009d42:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d44:	e013      	b.n	8009d6e <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8009d46:	f107 010c 	add.w	r1, r7, #12
 8009d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d4c:	69fa      	ldr	r2, [r7, #28]
 8009d4e:	6a38      	ldr	r0, [r7, #32]
 8009d50:	f7ff fe56 	bl	8009a00 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f7ff ff02 	bl	8009b5e <dir_find>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8009d60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d106      	bne.n	8009d76 <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8009d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d70:	2b63      	cmp	r3, #99	; 0x63
 8009d72:	d9e8      	bls.n	8009d46 <dir_register+0x4e>
 8009d74:	e000      	b.n	8009d78 <dir_register+0x80>
			if (res != FR_OK) break;
 8009d76:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d7a:	2b64      	cmp	r3, #100	; 0x64
 8009d7c:	d101      	bne.n	8009d82 <dir_register+0x8a>
 8009d7e:	2307      	movs	r3, #7
 8009d80:	e0d8      	b.n	8009f34 <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009d82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d86:	2b04      	cmp	r3, #4
 8009d88:	d002      	beq.n	8009d90 <dir_register+0x98>
 8009d8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d8e:	e0d1      	b.n	8009f34 <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8009d90:	6a3b      	ldr	r3, [r7, #32]
 8009d92:	330b      	adds	r3, #11
 8009d94:	7dfa      	ldrb	r2, [r7, #23]
 8009d96:	701a      	strb	r2, [r3, #0]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d9e:	461a      	mov	r2, r3
 8009da0:	69fb      	ldr	r3, [r7, #28]
 8009da2:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8009da4:	7dfb      	ldrb	r3, [r7, #23]
 8009da6:	f003 0302 	and.w	r3, r3, #2
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d014      	beq.n	8009dd8 <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 8009dae:	2300      	movs	r3, #0
 8009db0:	62bb      	str	r3, [r7, #40]	; 0x28
 8009db2:	e002      	b.n	8009dba <dir_register+0xc2>
 8009db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db6:	3301      	adds	r3, #1
 8009db8:	62bb      	str	r3, [r7, #40]	; 0x28
 8009dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dbc:	005b      	lsls	r3, r3, #1
 8009dbe:	69fa      	ldr	r2, [r7, #28]
 8009dc0:	4413      	add	r3, r2
 8009dc2:	881b      	ldrh	r3, [r3, #0]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d1f5      	bne.n	8009db4 <dir_register+0xbc>
		nent = (n + 25) / 13;
 8009dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dca:	3319      	adds	r3, #25
 8009dcc:	4a5b      	ldr	r2, [pc, #364]	; (8009f3c <dir_register+0x244>)
 8009dce:	fba2 2303 	umull	r2, r3, r2, r3
 8009dd2:	089b      	lsrs	r3, r3, #2
 8009dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8009dd6:	e001      	b.n	8009ddc <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8009dd8:	2301      	movs	r3, #1
 8009dda:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009ddc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f7ff fc85 	bl	80096ee <dir_alloc>
 8009de4:	4603      	mov	r3, r0
 8009de6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8009dea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d15b      	bne.n	8009eaa <dir_register+0x1b2>
 8009df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df4:	3b01      	subs	r3, #1
 8009df6:	627b      	str	r3, [r7, #36]	; 0x24
 8009df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d055      	beq.n	8009eaa <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e04:	88db      	ldrh	r3, [r3, #6]
 8009e06:	461a      	mov	r2, r3
 8009e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0a:	1ad3      	subs	r3, r2, r3
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f7ff fa55 	bl	80092be <dir_sdi>
 8009e14:	4603      	mov	r3, r0
 8009e16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009e1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d143      	bne.n	8009eaa <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e28:	699b      	ldr	r3, [r3, #24]
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f7ff fe76 	bl	8009b1c <sum_sfn>
 8009e30:	4603      	mov	r3, r0
 8009e32:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e42:	691b      	ldr	r3, [r3, #16]
 8009e44:	4619      	mov	r1, r3
 8009e46:	4610      	mov	r0, r2
 8009e48:	f7fe fd8a 	bl	8008960 <move_window>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8009e52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d126      	bne.n	8009ea8 <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e60:	6a18      	ldr	r0, [r3, #32]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e68:	6959      	ldr	r1, [r3, #20]
 8009e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6c:	b2da      	uxtb	r2, r3
 8009e6e:	7efb      	ldrb	r3, [r7, #27]
 8009e70:	f7ff fd50 	bl	8009914 <fit_lfn>
				dp->fs->wflag = 1;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e80:	2201      	movs	r2, #1
 8009e82:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8009e84:	2100      	movs	r1, #0
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f7ff fae7 	bl	800945a <dir_next>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8009e92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d107      	bne.n	8009eaa <dir_register+0x1b2>
 8009e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9c:	3b01      	subs	r3, #1
 8009e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8009ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d1c6      	bne.n	8009e34 <dir_register+0x13c>
 8009ea6:	e000      	b.n	8009eaa <dir_register+0x1b2>
				if (res != FR_OK) break;
 8009ea8:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8009eaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d13e      	bne.n	8009f30 <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ec0:	691b      	ldr	r3, [r3, #16]
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	4610      	mov	r0, r2
 8009ec6:	f7fe fd4b 	bl	8008960 <move_window>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009ed0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d12b      	bne.n	8009f30 <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ede:	695b      	ldr	r3, [r3, #20]
 8009ee0:	2220      	movs	r2, #32
 8009ee2:	2100      	movs	r1, #0
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f7fe facc 	bl	8008482 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ef0:	6958      	ldr	r0, [r3, #20]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ef8:	699b      	ldr	r3, [r3, #24]
 8009efa:	220b      	movs	r2, #11
 8009efc:	4619      	mov	r1, r3
 8009efe:	f7fe faa1 	bl	8008444 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f08:	699b      	ldr	r3, [r3, #24]
 8009f0a:	330b      	adds	r3, #11
 8009f0c:	781a      	ldrb	r2, [r3, #0]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f14:	695b      	ldr	r3, [r3, #20]
 8009f16:	330c      	adds	r3, #12
 8009f18:	f002 0218 	and.w	r2, r2, #24
 8009f1c:	b2d2      	uxtb	r2, r2
 8009f1e:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8009f30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3730      	adds	r7, #48	; 0x30
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}
 8009f3c:	4ec4ec4f 	.word	0x4ec4ec4f

08009f40 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b088      	sub	sp, #32
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	3309      	adds	r3, #9
 8009f4e:	61bb      	str	r3, [r7, #24]
	if (dp->sect) {		/* Get SFN */
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f56:	691b      	ldr	r3, [r3, #16]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d071      	beq.n	800a040 <get_fileinfo+0x100>
		dir = dp->dir;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f62:	695b      	ldr	r3, [r3, #20]
 8009f64:	60fb      	str	r3, [r7, #12]
		i = 0;
 8009f66:	2300      	movs	r3, #0
 8009f68:	61fb      	str	r3, [r7, #28]
		while (i < 11) {		/* Copy name body and extension */
 8009f6a:	e032      	b.n	8009fd2 <get_fileinfo+0x92>
			c = (TCHAR)dir[i++];
 8009f6c:	69fb      	ldr	r3, [r7, #28]
 8009f6e:	1c5a      	adds	r2, r3, #1
 8009f70:	61fa      	str	r2, [r7, #28]
 8009f72:	68fa      	ldr	r2, [r7, #12]
 8009f74:	4413      	add	r3, r2
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	75fb      	strb	r3, [r7, #23]
			if (c == ' ') continue;				/* Skip padding spaces */
 8009f7a:	7dfb      	ldrb	r3, [r7, #23]
 8009f7c:	2b20      	cmp	r3, #32
 8009f7e:	d100      	bne.n	8009f82 <get_fileinfo+0x42>
 8009f80:	e027      	b.n	8009fd2 <get_fileinfo+0x92>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8009f82:	7dfb      	ldrb	r3, [r7, #23]
 8009f84:	2b05      	cmp	r3, #5
 8009f86:	d101      	bne.n	8009f8c <get_fileinfo+0x4c>
 8009f88:	23e5      	movs	r3, #229	; 0xe5
 8009f8a:	75fb      	strb	r3, [r7, #23]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8009f8c:	69fb      	ldr	r3, [r7, #28]
 8009f8e:	2b09      	cmp	r3, #9
 8009f90:	d104      	bne.n	8009f9c <get_fileinfo+0x5c>
 8009f92:	69bb      	ldr	r3, [r7, #24]
 8009f94:	1c5a      	adds	r2, r3, #1
 8009f96:	61ba      	str	r2, [r7, #24]
 8009f98:	222e      	movs	r2, #46	; 0x2e
 8009f9a:	701a      	strb	r2, [r3, #0]
#if _USE_LFN
			if (IsUpper(c) && (dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY)))
 8009f9c:	7dfb      	ldrb	r3, [r7, #23]
 8009f9e:	2b40      	cmp	r3, #64	; 0x40
 8009fa0:	d912      	bls.n	8009fc8 <get_fileinfo+0x88>
 8009fa2:	7dfb      	ldrb	r3, [r7, #23]
 8009fa4:	2b5a      	cmp	r3, #90	; 0x5a
 8009fa6:	d80f      	bhi.n	8009fc8 <get_fileinfo+0x88>
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	330c      	adds	r3, #12
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	461a      	mov	r2, r3
 8009fb0:	69fb      	ldr	r3, [r7, #28]
 8009fb2:	2b08      	cmp	r3, #8
 8009fb4:	d901      	bls.n	8009fba <get_fileinfo+0x7a>
 8009fb6:	2310      	movs	r3, #16
 8009fb8:	e000      	b.n	8009fbc <get_fileinfo+0x7c>
 8009fba:	2308      	movs	r3, #8
 8009fbc:	4013      	ands	r3, r2
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d002      	beq.n	8009fc8 <get_fileinfo+0x88>
				c += 0x20;			/* To lower */
 8009fc2:	7dfb      	ldrb	r3, [r7, #23]
 8009fc4:	3320      	adds	r3, #32
 8009fc6:	75fb      	strb	r3, [r7, #23]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 8009fc8:	69bb      	ldr	r3, [r7, #24]
 8009fca:	1c5a      	adds	r2, r3, #1
 8009fcc:	61ba      	str	r2, [r7, #24]
 8009fce:	7dfa      	ldrb	r2, [r7, #23]
 8009fd0:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 8009fd2:	69fb      	ldr	r3, [r7, #28]
 8009fd4:	2b0a      	cmp	r3, #10
 8009fd6:	d9c9      	bls.n	8009f6c <get_fileinfo+0x2c>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	7ada      	ldrb	r2, [r3, #11]
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	331f      	adds	r3, #31
 8009fe4:	781b      	ldrb	r3, [r3, #0]
 8009fe6:	061a      	lsls	r2, r3, #24
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	331e      	adds	r3, #30
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	041b      	lsls	r3, r3, #16
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	68fa      	ldr	r2, [r7, #12]
 8009ff4:	321d      	adds	r2, #29
 8009ff6:	7812      	ldrb	r2, [r2, #0]
 8009ff8:	0212      	lsls	r2, r2, #8
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	68fa      	ldr	r2, [r7, #12]
 8009ffe:	321c      	adds	r2, #28
 800a000:	7812      	ldrb	r2, [r2, #0]
 800a002:	431a      	orrs	r2, r3
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	3319      	adds	r3, #25
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	021b      	lsls	r3, r3, #8
 800a010:	b21a      	sxth	r2, r3
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	3318      	adds	r3, #24
 800a016:	781b      	ldrb	r3, [r3, #0]
 800a018:	b21b      	sxth	r3, r3
 800a01a:	4313      	orrs	r3, r2
 800a01c:	b21b      	sxth	r3, r3
 800a01e:	b29a      	uxth	r2, r3
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	3317      	adds	r3, #23
 800a028:	781b      	ldrb	r3, [r3, #0]
 800a02a:	021b      	lsls	r3, r3, #8
 800a02c:	b21a      	sxth	r2, r3
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	3316      	adds	r3, #22
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	b21b      	sxth	r3, r3
 800a036:	4313      	orrs	r3, r2
 800a038:	b21b      	sxth	r3, r3
 800a03a:	b29a      	uxth	r2, r3
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 800a040:	69bb      	ldr	r3, [r7, #24]
 800a042:	2200      	movs	r2, #0
 800a044:	701a      	strb	r2, [r3, #0]

#if _USE_LFN
	if (fno->lfname) {
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	699b      	ldr	r3, [r3, #24]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d047      	beq.n	800a0de <get_fileinfo+0x19e>
		i = 0; p = fno->lfname;
 800a04e:	2300      	movs	r3, #0
 800a050:	61fb      	str	r3, [r7, #28]
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	699b      	ldr	r3, [r3, #24]
 800a056:	61bb      	str	r3, [r7, #24]
		if (dp->sect && fno->lfsize && dp->lfn_idx != 0xFFFF) {	/* Get LFN if available */
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a05e:	691b      	ldr	r3, [r3, #16]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d037      	beq.n	800a0d4 <get_fileinfo+0x194>
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	69db      	ldr	r3, [r3, #28]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d033      	beq.n	800a0d4 <get_fileinfo+0x194>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a072:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a074:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a078:	4293      	cmp	r3, r2
 800a07a:	d02b      	beq.n	800a0d4 <get_fileinfo+0x194>
			lfn = dp->lfn;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a082:	6a1b      	ldr	r3, [r3, #32]
 800a084:	613b      	str	r3, [r7, #16]
			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 800a086:	e01d      	b.n	800a0c4 <get_fileinfo+0x184>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800a088:	897b      	ldrh	r3, [r7, #10]
 800a08a:	2100      	movs	r1, #0
 800a08c:	4618      	mov	r0, r3
 800a08e:	f002 f885 	bl	800c19c <ff_convert>
 800a092:	4603      	mov	r3, r0
 800a094:	817b      	strh	r3, [r7, #10]
				if (!w) { i = 0; break; }	/* No LFN if it could not be converted */
 800a096:	897b      	ldrh	r3, [r7, #10]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d102      	bne.n	800a0a2 <get_fileinfo+0x162>
 800a09c:	2300      	movs	r3, #0
 800a09e:	61fb      	str	r3, [r7, #28]
 800a0a0:	e018      	b.n	800a0d4 <get_fileinfo+0x194>
				if (_DF1S && w >= 0x100)	/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
					p[i++] = (TCHAR)(w >> 8);
#endif
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* No LFN if buffer overflow */
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	69db      	ldr	r3, [r3, #28]
 800a0a6:	3b01      	subs	r3, #1
 800a0a8:	69fa      	ldr	r2, [r7, #28]
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d302      	bcc.n	800a0b4 <get_fileinfo+0x174>
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	61fb      	str	r3, [r7, #28]
 800a0b2:	e00f      	b.n	800a0d4 <get_fileinfo+0x194>
				p[i++] = (TCHAR)w;
 800a0b4:	69fb      	ldr	r3, [r7, #28]
 800a0b6:	1c5a      	adds	r2, r3, #1
 800a0b8:	61fa      	str	r2, [r7, #28]
 800a0ba:	69ba      	ldr	r2, [r7, #24]
 800a0bc:	4413      	add	r3, r2
 800a0be:	897a      	ldrh	r2, [r7, #10]
 800a0c0:	b2d2      	uxtb	r2, r2
 800a0c2:	701a      	strb	r2, [r3, #0]
			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	1c9a      	adds	r2, r3, #2
 800a0c8:	613a      	str	r2, [r7, #16]
 800a0ca:	881b      	ldrh	r3, [r3, #0]
 800a0cc:	817b      	strh	r3, [r7, #10]
 800a0ce:	897b      	ldrh	r3, [r7, #10]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d1d9      	bne.n	800a088 <get_fileinfo+0x148>
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
 800a0d4:	69ba      	ldr	r2, [r7, #24]
 800a0d6:	69fb      	ldr	r3, [r7, #28]
 800a0d8:	4413      	add	r3, r2
 800a0da:	2200      	movs	r2, #0
 800a0dc:	701a      	strb	r2, [r3, #0]
	}
#endif
}
 800a0de:	bf00      	nop
 800a0e0:	3720      	adds	r7, #32
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
	...

0800a0e8 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b08a      	sub	sp, #40	; 0x28
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	613b      	str	r3, [r7, #16]
 800a0f8:	e002      	b.n	800a100 <create_name+0x18>
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	613b      	str	r3, [r7, #16]
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	781b      	ldrb	r3, [r3, #0]
 800a104:	2b2f      	cmp	r3, #47	; 0x2f
 800a106:	d0f8      	beq.n	800a0fa <create_name+0x12>
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	2b5c      	cmp	r3, #92	; 0x5c
 800a10e:	d0f4      	beq.n	800a0fa <create_name+0x12>
	lfn = dp->lfn;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a116:	6a1b      	ldr	r3, [r3, #32]
 800a118:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800a11a:	2300      	movs	r3, #0
 800a11c:	617b      	str	r3, [r7, #20]
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800a122:	69bb      	ldr	r3, [r7, #24]
 800a124:	1c5a      	adds	r2, r3, #1
 800a126:	61ba      	str	r2, [r7, #24]
 800a128:	693a      	ldr	r2, [r7, #16]
 800a12a:	4413      	add	r3, r2
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800a130:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a132:	2b1f      	cmp	r3, #31
 800a134:	d92f      	bls.n	800a196 <create_name+0xae>
 800a136:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a138:	2b2f      	cmp	r3, #47	; 0x2f
 800a13a:	d02c      	beq.n	800a196 <create_name+0xae>
 800a13c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a13e:	2b5c      	cmp	r3, #92	; 0x5c
 800a140:	d029      	beq.n	800a196 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	2bfe      	cmp	r3, #254	; 0xfe
 800a146:	d901      	bls.n	800a14c <create_name+0x64>
			return FR_INVALID_NAME;
 800a148:	2306      	movs	r3, #6
 800a14a:	e186      	b.n	800a45a <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 800a14c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a14e:	b2db      	uxtb	r3, r3
 800a150:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800a152:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a154:	2101      	movs	r1, #1
 800a156:	4618      	mov	r0, r3
 800a158:	f002 f820 	bl	800c19c <ff_convert>
 800a15c:	4603      	mov	r3, r0
 800a15e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800a160:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a162:	2b00      	cmp	r3, #0
 800a164:	d101      	bne.n	800a16a <create_name+0x82>
 800a166:	2306      	movs	r3, #6
 800a168:	e177      	b.n	800a45a <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800a16a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a16c:	2b7f      	cmp	r3, #127	; 0x7f
 800a16e:	d809      	bhi.n	800a184 <create_name+0x9c>
 800a170:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a172:	4619      	mov	r1, r3
 800a174:	488e      	ldr	r0, [pc, #568]	; (800a3b0 <create_name+0x2c8>)
 800a176:	f7fe f9c6 	bl	8008506 <chk_chr>
 800a17a:	4603      	mov	r3, r0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d001      	beq.n	800a184 <create_name+0x9c>
			return FR_INVALID_NAME;
 800a180:	2306      	movs	r3, #6
 800a182:	e16a      	b.n	800a45a <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	1c5a      	adds	r2, r3, #1
 800a188:	617a      	str	r2, [r7, #20]
 800a18a:	005b      	lsls	r3, r3, #1
 800a18c:	68fa      	ldr	r2, [r7, #12]
 800a18e:	4413      	add	r3, r2
 800a190:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a192:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800a194:	e7c5      	b.n	800a122 <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800a196:	693a      	ldr	r2, [r7, #16]
 800a198:	69bb      	ldr	r3, [r7, #24]
 800a19a:	441a      	add	r2, r3
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800a1a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a1a2:	2b1f      	cmp	r3, #31
 800a1a4:	d801      	bhi.n	800a1aa <create_name+0xc2>
 800a1a6:	2304      	movs	r3, #4
 800a1a8:	e000      	b.n	800a1ac <create_name+0xc4>
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800a1b0:	e011      	b.n	800a1d6 <create_name+0xee>
		w = lfn[di - 1];
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a1b8:	3b01      	subs	r3, #1
 800a1ba:	005b      	lsls	r3, r3, #1
 800a1bc:	68fa      	ldr	r2, [r7, #12]
 800a1be:	4413      	add	r3, r2
 800a1c0:	881b      	ldrh	r3, [r3, #0]
 800a1c2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800a1c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a1c6:	2b20      	cmp	r3, #32
 800a1c8:	d002      	beq.n	800a1d0 <create_name+0xe8>
 800a1ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a1cc:	2b2e      	cmp	r3, #46	; 0x2e
 800a1ce:	d106      	bne.n	800a1de <create_name+0xf6>
		di--;
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	3b01      	subs	r3, #1
 800a1d4:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d1ea      	bne.n	800a1b2 <create_name+0xca>
 800a1dc:	e000      	b.n	800a1e0 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 800a1de:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d101      	bne.n	800a1ea <create_name+0x102>
 800a1e6:	2306      	movs	r3, #6
 800a1e8:	e137      	b.n	800a45a <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	005b      	lsls	r3, r3, #1
 800a1ee:	68fa      	ldr	r2, [r7, #12]
 800a1f0:	4413      	add	r3, r2
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1fc:	699b      	ldr	r3, [r3, #24]
 800a1fe:	220b      	movs	r2, #11
 800a200:	2120      	movs	r1, #32
 800a202:	4618      	mov	r0, r3
 800a204:	f7fe f93d 	bl	8008482 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800a208:	2300      	movs	r3, #0
 800a20a:	61bb      	str	r3, [r7, #24]
 800a20c:	e002      	b.n	800a214 <create_name+0x12c>
 800a20e:	69bb      	ldr	r3, [r7, #24]
 800a210:	3301      	adds	r3, #1
 800a212:	61bb      	str	r3, [r7, #24]
 800a214:	69bb      	ldr	r3, [r7, #24]
 800a216:	005b      	lsls	r3, r3, #1
 800a218:	68fa      	ldr	r2, [r7, #12]
 800a21a:	4413      	add	r3, r2
 800a21c:	881b      	ldrh	r3, [r3, #0]
 800a21e:	2b20      	cmp	r3, #32
 800a220:	d0f5      	beq.n	800a20e <create_name+0x126>
 800a222:	69bb      	ldr	r3, [r7, #24]
 800a224:	005b      	lsls	r3, r3, #1
 800a226:	68fa      	ldr	r2, [r7, #12]
 800a228:	4413      	add	r3, r2
 800a22a:	881b      	ldrh	r3, [r3, #0]
 800a22c:	2b2e      	cmp	r3, #46	; 0x2e
 800a22e:	d0ee      	beq.n	800a20e <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 800a230:	69bb      	ldr	r3, [r7, #24]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d009      	beq.n	800a24a <create_name+0x162>
 800a236:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a23a:	f043 0303 	orr.w	r3, r3, #3
 800a23e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800a242:	e002      	b.n	800a24a <create_name+0x162>
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	3b01      	subs	r3, #1
 800a248:	617b      	str	r3, [r7, #20]
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d009      	beq.n	800a264 <create_name+0x17c>
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a256:	3b01      	subs	r3, #1
 800a258:	005b      	lsls	r3, r3, #1
 800a25a:	68fa      	ldr	r2, [r7, #12]
 800a25c:	4413      	add	r3, r2
 800a25e:	881b      	ldrh	r3, [r3, #0]
 800a260:	2b2e      	cmp	r3, #46	; 0x2e
 800a262:	d1ef      	bne.n	800a244 <create_name+0x15c>

	b = i = 0; ni = 8;
 800a264:	2300      	movs	r3, #0
 800a266:	623b      	str	r3, [r7, #32]
 800a268:	2300      	movs	r3, #0
 800a26a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a26e:	2308      	movs	r3, #8
 800a270:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800a272:	69bb      	ldr	r3, [r7, #24]
 800a274:	1c5a      	adds	r2, r3, #1
 800a276:	61ba      	str	r2, [r7, #24]
 800a278:	005b      	lsls	r3, r3, #1
 800a27a:	68fa      	ldr	r2, [r7, #12]
 800a27c:	4413      	add	r3, r2
 800a27e:	881b      	ldrh	r3, [r3, #0]
 800a280:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800a282:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a284:	2b00      	cmp	r3, #0
 800a286:	f000 8091 	beq.w	800a3ac <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800a28a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a28c:	2b20      	cmp	r3, #32
 800a28e:	d006      	beq.n	800a29e <create_name+0x1b6>
 800a290:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a292:	2b2e      	cmp	r3, #46	; 0x2e
 800a294:	d10a      	bne.n	800a2ac <create_name+0x1c4>
 800a296:	69ba      	ldr	r2, [r7, #24]
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d006      	beq.n	800a2ac <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 800a29e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2a2:	f043 0303 	orr.w	r3, r3, #3
 800a2a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a2aa:	e07e      	b.n	800a3aa <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800a2ac:	6a3a      	ldr	r2, [r7, #32]
 800a2ae:	69fb      	ldr	r3, [r7, #28]
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d203      	bcs.n	800a2bc <create_name+0x1d4>
 800a2b4:	69ba      	ldr	r2, [r7, #24]
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	d123      	bne.n	800a304 <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 800a2bc:	69fb      	ldr	r3, [r7, #28]
 800a2be:	2b0b      	cmp	r3, #11
 800a2c0:	d106      	bne.n	800a2d0 <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 800a2c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2c6:	f043 0303 	orr.w	r3, r3, #3
 800a2ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a2ce:	e076      	b.n	800a3be <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800a2d0:	69ba      	ldr	r2, [r7, #24]
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d005      	beq.n	800a2e4 <create_name+0x1fc>
 800a2d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2dc:	f043 0303 	orr.w	r3, r3, #3
 800a2e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800a2e4:	69ba      	ldr	r2, [r7, #24]
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d867      	bhi.n	800a3bc <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	61bb      	str	r3, [r7, #24]
 800a2f0:	2308      	movs	r3, #8
 800a2f2:	623b      	str	r3, [r7, #32]
 800a2f4:	230b      	movs	r3, #11
 800a2f6:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800a2f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a2fc:	009b      	lsls	r3, r3, #2
 800a2fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a302:	e052      	b.n	800a3aa <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800a304:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a306:	2b7f      	cmp	r3, #127	; 0x7f
 800a308:	d914      	bls.n	800a334 <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800a30a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a30c:	2100      	movs	r1, #0
 800a30e:	4618      	mov	r0, r3
 800a310:	f001 ff44 	bl	800c19c <ff_convert>
 800a314:	4603      	mov	r3, r0
 800a316:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800a318:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d004      	beq.n	800a328 <create_name+0x240>
 800a31e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a320:	3b80      	subs	r3, #128	; 0x80
 800a322:	4a24      	ldr	r2, [pc, #144]	; (800a3b4 <create_name+0x2cc>)
 800a324:	5cd3      	ldrb	r3, [r2, r3]
 800a326:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800a328:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a32c:	f043 0302 	orr.w	r3, r3, #2
 800a330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800a334:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a336:	2b00      	cmp	r3, #0
 800a338:	d007      	beq.n	800a34a <create_name+0x262>
 800a33a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a33c:	4619      	mov	r1, r3
 800a33e:	481e      	ldr	r0, [pc, #120]	; (800a3b8 <create_name+0x2d0>)
 800a340:	f7fe f8e1 	bl	8008506 <chk_chr>
 800a344:	4603      	mov	r3, r0
 800a346:	2b00      	cmp	r3, #0
 800a348:	d008      	beq.n	800a35c <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800a34a:	235f      	movs	r3, #95	; 0x5f
 800a34c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a34e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a352:	f043 0303 	orr.w	r3, r3, #3
 800a356:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a35a:	e01b      	b.n	800a394 <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800a35c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a35e:	2b40      	cmp	r3, #64	; 0x40
 800a360:	d909      	bls.n	800a376 <create_name+0x28e>
 800a362:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a364:	2b5a      	cmp	r3, #90	; 0x5a
 800a366:	d806      	bhi.n	800a376 <create_name+0x28e>
					b |= 2;
 800a368:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a36c:	f043 0302 	orr.w	r3, r3, #2
 800a370:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a374:	e00e      	b.n	800a394 <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800a376:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a378:	2b60      	cmp	r3, #96	; 0x60
 800a37a:	d90b      	bls.n	800a394 <create_name+0x2ac>
 800a37c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a37e:	2b7a      	cmp	r3, #122	; 0x7a
 800a380:	d808      	bhi.n	800a394 <create_name+0x2ac>
						b |= 1; w -= 0x20;
 800a382:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a386:	f043 0301 	orr.w	r3, r3, #1
 800a38a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a38e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a390:	3b20      	subs	r3, #32
 800a392:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a39a:	699a      	ldr	r2, [r3, #24]
 800a39c:	6a3b      	ldr	r3, [r7, #32]
 800a39e:	1c59      	adds	r1, r3, #1
 800a3a0:	6239      	str	r1, [r7, #32]
 800a3a2:	4413      	add	r3, r2
 800a3a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a3a6:	b2d2      	uxtb	r2, r2
 800a3a8:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800a3aa:	e762      	b.n	800a272 <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 800a3ac:	bf00      	nop
 800a3ae:	e006      	b.n	800a3be <create_name+0x2d6>
 800a3b0:	0800d150 	.word	0x0800d150
 800a3b4:	0800d1d0 	.word	0x0800d1d0
 800a3b8:	0800d15c 	.word	0x0800d15c
			if (si > di) break;			/* No extension */
 800a3bc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3c4:	699b      	ldr	r3, [r3, #24]
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	2be5      	cmp	r3, #229	; 0xe5
 800a3ca:	d105      	bne.n	800a3d8 <create_name+0x2f0>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3d2:	699b      	ldr	r3, [r3, #24]
 800a3d4:	2205      	movs	r2, #5
 800a3d6:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	2b08      	cmp	r3, #8
 800a3dc:	d104      	bne.n	800a3e8 <create_name+0x300>
 800a3de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a3e2:	009b      	lsls	r3, r3, #2
 800a3e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800a3e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a3ec:	f003 030c 	and.w	r3, r3, #12
 800a3f0:	2b0c      	cmp	r3, #12
 800a3f2:	d005      	beq.n	800a400 <create_name+0x318>
 800a3f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a3f8:	f003 0303 	and.w	r3, r3, #3
 800a3fc:	2b03      	cmp	r3, #3
 800a3fe:	d105      	bne.n	800a40c <create_name+0x324>
		cf |= NS_LFN;
 800a400:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a404:	f043 0302 	orr.w	r3, r3, #2
 800a408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800a40c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a410:	f003 0302 	and.w	r3, r3, #2
 800a414:	2b00      	cmp	r3, #0
 800a416:	d117      	bne.n	800a448 <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800a418:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a41c:	f003 0303 	and.w	r3, r3, #3
 800a420:	2b01      	cmp	r3, #1
 800a422:	d105      	bne.n	800a430 <create_name+0x348>
 800a424:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a428:	f043 0310 	orr.w	r3, r3, #16
 800a42c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800a430:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a434:	f003 030c 	and.w	r3, r3, #12
 800a438:	2b04      	cmp	r3, #4
 800a43a:	d105      	bne.n	800a448 <create_name+0x360>
 800a43c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a440:	f043 0308 	orr.w	r3, r3, #8
 800a444:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a44e:	699b      	ldr	r3, [r3, #24]
 800a450:	330b      	adds	r3, #11
 800a452:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a456:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a458:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3728      	adds	r7, #40	; 0x28
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
 800a462:	bf00      	nop

0800a464 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	2b2f      	cmp	r3, #47	; 0x2f
 800a474:	d003      	beq.n	800a47e <follow_path+0x1a>
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	2b5c      	cmp	r3, #92	; 0x5c
 800a47c:	d102      	bne.n	800a484 <follow_path+0x20>
		path++;
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	3301      	adds	r3, #1
 800a482:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a48a:	461a      	mov	r2, r3
 800a48c:	2300      	movs	r3, #0
 800a48e:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	2b1f      	cmp	r3, #31
 800a496:	d80c      	bhi.n	800a4b2 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 800a498:	2100      	movs	r1, #0
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f7fe ff0f 	bl	80092be <dir_sdi>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	6153      	str	r3, [r2, #20]
 800a4b0:	e049      	b.n	800a546 <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a4b2:	463b      	mov	r3, r7
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f7ff fe16 	bl	800a0e8 <create_name>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800a4c0:	7bfb      	ldrb	r3, [r7, #15]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d13a      	bne.n	800a53c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f7ff fb49 	bl	8009b5e <dir_find>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4d6:	699b      	ldr	r3, [r3, #24]
 800a4d8:	7adb      	ldrb	r3, [r3, #11]
 800a4da:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800a4dc:	7bfb      	ldrb	r3, [r7, #15]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d00a      	beq.n	800a4f8 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a4e2:	7bfb      	ldrb	r3, [r7, #15]
 800a4e4:	2b04      	cmp	r3, #4
 800a4e6:	d12b      	bne.n	800a540 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a4e8:	7bbb      	ldrb	r3, [r7, #14]
 800a4ea:	f003 0304 	and.w	r3, r3, #4
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d126      	bne.n	800a540 <follow_path+0xdc>
 800a4f2:	2305      	movs	r3, #5
 800a4f4:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800a4f6:	e023      	b.n	800a540 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a4f8:	7bbb      	ldrb	r3, [r7, #14]
 800a4fa:	f003 0304 	and.w	r3, r3, #4
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d120      	bne.n	800a544 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a508:	695b      	ldr	r3, [r3, #20]
 800a50a:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	330b      	adds	r3, #11
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	f003 0310 	and.w	r3, r3, #16
 800a516:	2b00      	cmp	r3, #0
 800a518:	d102      	bne.n	800a520 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 800a51a:	2305      	movs	r3, #5
 800a51c:	73fb      	strb	r3, [r7, #15]
 800a51e:	e012      	b.n	800a546 <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	68b9      	ldr	r1, [r7, #8]
 800a52a:	4618      	mov	r0, r3
 800a52c:	f7ff f92d 	bl	800978a <ld_clust>
 800a530:	4602      	mov	r2, r0
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a538:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a53a:	e7ba      	b.n	800a4b2 <follow_path+0x4e>
			if (res != FR_OK) break;
 800a53c:	bf00      	nop
 800a53e:	e002      	b.n	800a546 <follow_path+0xe2>
				break;
 800a540:	bf00      	nop
 800a542:	e000      	b.n	800a546 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a544:	bf00      	nop
		}
	}

	return res;
 800a546:	7bfb      	ldrb	r3, [r7, #15]
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3710      	adds	r7, #16
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a550:	b480      	push	{r7}
 800a552:	b087      	sub	sp, #28
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a558:	f04f 33ff 	mov.w	r3, #4294967295
 800a55c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d031      	beq.n	800a5ca <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	617b      	str	r3, [r7, #20]
 800a56c:	e002      	b.n	800a574 <get_ldnumber+0x24>
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	3301      	adds	r3, #1
 800a572:	617b      	str	r3, [r7, #20]
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	2b1f      	cmp	r3, #31
 800a57a:	d903      	bls.n	800a584 <get_ldnumber+0x34>
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	781b      	ldrb	r3, [r3, #0]
 800a580:	2b3a      	cmp	r3, #58	; 0x3a
 800a582:	d1f4      	bne.n	800a56e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	781b      	ldrb	r3, [r3, #0]
 800a588:	2b3a      	cmp	r3, #58	; 0x3a
 800a58a:	d11c      	bne.n	800a5c6 <get_ldnumber+0x76>
			tp = *path;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	1c5a      	adds	r2, r3, #1
 800a596:	60fa      	str	r2, [r7, #12]
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	3b30      	subs	r3, #48	; 0x30
 800a59c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	2b09      	cmp	r3, #9
 800a5a2:	d80e      	bhi.n	800a5c2 <get_ldnumber+0x72>
 800a5a4:	68fa      	ldr	r2, [r7, #12]
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	429a      	cmp	r2, r3
 800a5aa:	d10a      	bne.n	800a5c2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d107      	bne.n	800a5c2 <get_ldnumber+0x72>
					vol = (int)i;
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	3301      	adds	r3, #1
 800a5ba:	617b      	str	r3, [r7, #20]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	697a      	ldr	r2, [r7, #20]
 800a5c0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	e002      	b.n	800a5cc <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a5ca:	693b      	ldr	r3, [r7, #16]
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	371c      	adds	r7, #28
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr

0800a5d8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	711a      	strb	r2, [r3, #4]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	f04f 33ff 	mov.w	r3, #4294967295
 800a5f8:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800a5fa:	6839      	ldr	r1, [r7, #0]
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f7fe f9af 	bl	8008960 <move_window>
 800a602:	4603      	mov	r3, r0
 800a604:	2b00      	cmp	r3, #0
 800a606:	d001      	beq.n	800a60c <check_fs+0x34>
		return 3;
 800a608:	2303      	movs	r3, #3
 800a60a:	e04a      	b.n	800a6a2 <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a612:	3301      	adds	r3, #1
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	021b      	lsls	r3, r3, #8
 800a618:	b21a      	sxth	r2, r3
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800a620:	b21b      	sxth	r3, r3
 800a622:	4313      	orrs	r3, r2
 800a624:	b21b      	sxth	r3, r3
 800a626:	4a21      	ldr	r2, [pc, #132]	; (800a6ac <check_fs+0xd4>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d001      	beq.n	800a630 <check_fs+0x58>
		return 2;
 800a62c:	2302      	movs	r3, #2
 800a62e:	e038      	b.n	800a6a2 <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	3336      	adds	r3, #54	; 0x36
 800a634:	3303      	adds	r3, #3
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	061a      	lsls	r2, r3, #24
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	3336      	adds	r3, #54	; 0x36
 800a63e:	3302      	adds	r3, #2
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	041b      	lsls	r3, r3, #16
 800a644:	4313      	orrs	r3, r2
 800a646:	687a      	ldr	r2, [r7, #4]
 800a648:	3236      	adds	r2, #54	; 0x36
 800a64a:	3201      	adds	r2, #1
 800a64c:	7812      	ldrb	r2, [r2, #0]
 800a64e:	0212      	lsls	r2, r2, #8
 800a650:	4313      	orrs	r3, r2
 800a652:	687a      	ldr	r2, [r7, #4]
 800a654:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800a658:	4313      	orrs	r3, r2
 800a65a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a65e:	4a14      	ldr	r2, [pc, #80]	; (800a6b0 <check_fs+0xd8>)
 800a660:	4293      	cmp	r3, r2
 800a662:	d101      	bne.n	800a668 <check_fs+0x90>
		return 0;
 800a664:	2300      	movs	r3, #0
 800a666:	e01c      	b.n	800a6a2 <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	3352      	adds	r3, #82	; 0x52
 800a66c:	3303      	adds	r3, #3
 800a66e:	781b      	ldrb	r3, [r3, #0]
 800a670:	061a      	lsls	r2, r3, #24
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	3352      	adds	r3, #82	; 0x52
 800a676:	3302      	adds	r3, #2
 800a678:	781b      	ldrb	r3, [r3, #0]
 800a67a:	041b      	lsls	r3, r3, #16
 800a67c:	4313      	orrs	r3, r2
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	3252      	adds	r2, #82	; 0x52
 800a682:	3201      	adds	r2, #1
 800a684:	7812      	ldrb	r2, [r2, #0]
 800a686:	0212      	lsls	r2, r2, #8
 800a688:	4313      	orrs	r3, r2
 800a68a:	687a      	ldr	r2, [r7, #4]
 800a68c:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800a690:	4313      	orrs	r3, r2
 800a692:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a696:	4a06      	ldr	r2, [pc, #24]	; (800a6b0 <check_fs+0xd8>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d101      	bne.n	800a6a0 <check_fs+0xc8>
		return 0;
 800a69c:	2300      	movs	r3, #0
 800a69e:	e000      	b.n	800a6a2 <check_fs+0xca>

	return 1;
 800a6a0:	2301      	movs	r3, #1
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3708      	adds	r7, #8
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	ffffaa55 	.word	0xffffaa55
 800a6b0:	00544146 	.word	0x00544146

0800a6b4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b096      	sub	sp, #88	; 0x58
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	60f8      	str	r0, [r7, #12]
 800a6bc:	60b9      	str	r1, [r7, #8]
 800a6be:	4613      	mov	r3, r2
 800a6c0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a6c8:	68b8      	ldr	r0, [r7, #8]
 800a6ca:	f7ff ff41 	bl	800a550 <get_ldnumber>
 800a6ce:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a6d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	da01      	bge.n	800a6da <find_volume+0x26>
 800a6d6:	230b      	movs	r3, #11
 800a6d8:	e311      	b.n	800acfe <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a6da:	4a98      	ldr	r2, [pc, #608]	; (800a93c <find_volume+0x288>)
 800a6dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6e2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d101      	bne.n	800a6ee <find_volume+0x3a>
 800a6ea:	230c      	movs	r3, #12
 800a6ec:	e307      	b.n	800acfe <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6f2:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800a6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6fa:	781b      	ldrb	r3, [r3, #0]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d01c      	beq.n	800a73a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a706:	785b      	ldrb	r3, [r3, #1]
 800a708:	4618      	mov	r0, r3
 800a70a:	f7fd fdfd 	bl	8008308 <disk_status>
 800a70e:	4603      	mov	r3, r0
 800a710:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a714:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a718:	f003 0301 	and.w	r3, r3, #1
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d10c      	bne.n	800a73a <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800a720:	79fb      	ldrb	r3, [r7, #7]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d007      	beq.n	800a736 <find_volume+0x82>
 800a726:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a72a:	f003 0304 	and.w	r3, r3, #4
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d001      	beq.n	800a736 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a732:	230a      	movs	r3, #10
 800a734:	e2e3      	b.n	800acfe <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 800a736:	2300      	movs	r3, #0
 800a738:	e2e1      	b.n	800acfe <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a73c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a740:	2200      	movs	r2, #0
 800a742:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a746:	b2da      	uxtb	r2, r3
 800a748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a74a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a74e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a756:	785b      	ldrb	r3, [r3, #1]
 800a758:	4618      	mov	r0, r3
 800a75a:	f7fd fdef 	bl	800833c <disk_initialize>
 800a75e:	4603      	mov	r3, r0
 800a760:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800a764:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a768:	f003 0301 	and.w	r3, r3, #1
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d001      	beq.n	800a774 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a770:	2303      	movs	r3, #3
 800a772:	e2c4      	b.n	800acfe <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800a774:	79fb      	ldrb	r3, [r7, #7]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d007      	beq.n	800a78a <find_volume+0xd6>
 800a77a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a77e:	f003 0304 	and.w	r3, r3, #4
 800a782:	2b00      	cmp	r3, #0
 800a784:	d001      	beq.n	800a78a <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 800a786:	230a      	movs	r3, #10
 800a788:	e2b9      	b.n	800acfe <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800a78a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a78c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a790:	7858      	ldrb	r0, [r3, #1]
 800a792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a798:	330a      	adds	r3, #10
 800a79a:	461a      	mov	r2, r3
 800a79c:	2102      	movs	r1, #2
 800a79e:	f7fd fe33 	bl	8008408 <disk_ioctl>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d10d      	bne.n	800a7c4 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800a7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7ae:	895b      	ldrh	r3, [r3, #10]
 800a7b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7b4:	d306      	bcc.n	800a7c4 <find_volume+0x110>
 800a7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7bc:	895b      	ldrh	r3, [r3, #10]
 800a7be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7c2:	d901      	bls.n	800a7c8 <find_volume+0x114>
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	e29a      	b.n	800acfe <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800a7cc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a7ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a7d0:	f7ff ff02 	bl	800a5d8 <check_fs>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800a7da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	d153      	bne.n	800a88a <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	643b      	str	r3, [r7, #64]	; 0x40
 800a7e6:	e028      	b.n	800a83a <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800a7e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a7ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7ec:	011b      	lsls	r3, r3, #4
 800a7ee:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a7f2:	4413      	add	r3, r2
 800a7f4:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800a7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f8:	3304      	adds	r3, #4
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d012      	beq.n	800a826 <find_volume+0x172>
 800a800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a802:	330b      	adds	r3, #11
 800a804:	781b      	ldrb	r3, [r3, #0]
 800a806:	061a      	lsls	r2, r3, #24
 800a808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a80a:	330a      	adds	r3, #10
 800a80c:	781b      	ldrb	r3, [r3, #0]
 800a80e:	041b      	lsls	r3, r3, #16
 800a810:	4313      	orrs	r3, r2
 800a812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a814:	3209      	adds	r2, #9
 800a816:	7812      	ldrb	r2, [r2, #0]
 800a818:	0212      	lsls	r2, r2, #8
 800a81a:	4313      	orrs	r3, r2
 800a81c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a81e:	3208      	adds	r2, #8
 800a820:	7812      	ldrb	r2, [r2, #0]
 800a822:	431a      	orrs	r2, r3
 800a824:	e000      	b.n	800a828 <find_volume+0x174>
 800a826:	2200      	movs	r2, #0
 800a828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a82a:	009b      	lsls	r3, r3, #2
 800a82c:	3358      	adds	r3, #88	; 0x58
 800a82e:	443b      	add	r3, r7
 800a830:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800a834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a836:	3301      	adds	r3, #1
 800a838:	643b      	str	r3, [r7, #64]	; 0x40
 800a83a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a83c:	2b03      	cmp	r3, #3
 800a83e:	d9d3      	bls.n	800a7e8 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800a840:	2300      	movs	r3, #0
 800a842:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a846:	2b00      	cmp	r3, #0
 800a848:	d002      	beq.n	800a850 <find_volume+0x19c>
 800a84a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a84c:	3b01      	subs	r3, #1
 800a84e:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800a850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a852:	009b      	lsls	r3, r3, #2
 800a854:	3358      	adds	r3, #88	; 0x58
 800a856:	443b      	add	r3, r7
 800a858:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a85c:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800a85e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a860:	2b00      	cmp	r3, #0
 800a862:	d005      	beq.n	800a870 <find_volume+0x1bc>
 800a864:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a866:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a868:	f7ff feb6 	bl	800a5d8 <check_fs>
 800a86c:	4603      	mov	r3, r0
 800a86e:	e000      	b.n	800a872 <find_volume+0x1be>
 800a870:	2302      	movs	r3, #2
 800a872:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800a876:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d005      	beq.n	800a88a <find_volume+0x1d6>
 800a87e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a880:	3301      	adds	r3, #1
 800a882:	643b      	str	r3, [r7, #64]	; 0x40
 800a884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a886:	2b03      	cmp	r3, #3
 800a888:	d9e2      	bls.n	800a850 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a88a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a88e:	2b03      	cmp	r3, #3
 800a890:	d101      	bne.n	800a896 <find_volume+0x1e2>
 800a892:	2301      	movs	r3, #1
 800a894:	e233      	b.n	800acfe <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800a896:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d001      	beq.n	800a8a2 <find_volume+0x1ee>
 800a89e:	230d      	movs	r3, #13
 800a8a0:	e22d      	b.n	800acfe <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a4:	7b1b      	ldrb	r3, [r3, #12]
 800a8a6:	021b      	lsls	r3, r3, #8
 800a8a8:	b21a      	sxth	r2, r3
 800a8aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ac:	7adb      	ldrb	r3, [r3, #11]
 800a8ae:	b21b      	sxth	r3, r3
 800a8b0:	4313      	orrs	r3, r2
 800a8b2:	b21a      	sxth	r2, r3
 800a8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8ba:	895b      	ldrh	r3, [r3, #10]
 800a8bc:	b21b      	sxth	r3, r3
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d001      	beq.n	800a8c6 <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 800a8c2:	230d      	movs	r3, #13
 800a8c4:	e21b      	b.n	800acfe <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800a8c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8c8:	7ddb      	ldrb	r3, [r3, #23]
 800a8ca:	021b      	lsls	r3, r3, #8
 800a8cc:	b21a      	sxth	r2, r3
 800a8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8d0:	7d9b      	ldrb	r3, [r3, #22]
 800a8d2:	b21b      	sxth	r3, r3
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	b21b      	sxth	r3, r3
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800a8dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d112      	bne.n	800a908 <find_volume+0x254>
 800a8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800a8e8:	061a      	lsls	r2, r3, #24
 800a8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ec:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800a8f0:	041b      	lsls	r3, r3, #16
 800a8f2:	4313      	orrs	r3, r2
 800a8f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8f6:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800a8fa:	0212      	lsls	r2, r2, #8
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a900:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800a904:	4313      	orrs	r3, r2
 800a906:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800a908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a90a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a90e:	461a      	mov	r2, r3
 800a910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a912:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800a914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a916:	7c1a      	ldrb	r2, [r3, #16]
 800a918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a91a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a91e:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800a920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a926:	78db      	ldrb	r3, [r3, #3]
 800a928:	2b01      	cmp	r3, #1
 800a92a:	d009      	beq.n	800a940 <find_volume+0x28c>
 800a92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a92e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a932:	78db      	ldrb	r3, [r3, #3]
 800a934:	2b02      	cmp	r3, #2
 800a936:	d003      	beq.n	800a940 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 800a938:	230d      	movs	r3, #13
 800a93a:	e1e0      	b.n	800acfe <find_volume+0x64a>
 800a93c:	20004078 	.word	0x20004078
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800a940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a946:	78db      	ldrb	r3, [r3, #3]
 800a948:	461a      	mov	r2, r3
 800a94a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a94c:	fb02 f303 	mul.w	r3, r2, r3
 800a950:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800a952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a954:	7b5a      	ldrb	r2, [r3, #13]
 800a956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a95c:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800a95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a964:	789b      	ldrb	r3, [r3, #2]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d00c      	beq.n	800a984 <find_volume+0x2d0>
 800a96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a96c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a970:	789b      	ldrb	r3, [r3, #2]
 800a972:	461a      	mov	r2, r3
 800a974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a976:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a97a:	789b      	ldrb	r3, [r3, #2]
 800a97c:	3b01      	subs	r3, #1
 800a97e:	4013      	ands	r3, r2
 800a980:	2b00      	cmp	r3, #0
 800a982:	d001      	beq.n	800a988 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 800a984:	230d      	movs	r3, #13
 800a986:	e1ba      	b.n	800acfe <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800a988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a98a:	7c9b      	ldrb	r3, [r3, #18]
 800a98c:	021b      	lsls	r3, r3, #8
 800a98e:	b21a      	sxth	r2, r3
 800a990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a992:	7c5b      	ldrb	r3, [r3, #17]
 800a994:	b21b      	sxth	r3, r3
 800a996:	4313      	orrs	r3, r2
 800a998:	b21b      	sxth	r3, r3
 800a99a:	b29a      	uxth	r2, r3
 800a99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a99e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9a2:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800a9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9aa:	891b      	ldrh	r3, [r3, #8]
 800a9ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a9ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a9b2:	8952      	ldrh	r2, [r2, #10]
 800a9b4:	0952      	lsrs	r2, r2, #5
 800a9b6:	b292      	uxth	r2, r2
 800a9b8:	fbb3 f1f2 	udiv	r1, r3, r2
 800a9bc:	fb01 f202 	mul.w	r2, r1, r2
 800a9c0:	1a9b      	subs	r3, r3, r2
 800a9c2:	b29b      	uxth	r3, r3
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d001      	beq.n	800a9cc <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 800a9c8:	230d      	movs	r3, #13
 800a9ca:	e198      	b.n	800acfe <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800a9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ce:	7d1b      	ldrb	r3, [r3, #20]
 800a9d0:	021b      	lsls	r3, r3, #8
 800a9d2:	b21a      	sxth	r2, r3
 800a9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d6:	7cdb      	ldrb	r3, [r3, #19]
 800a9d8:	b21b      	sxth	r3, r3
 800a9da:	4313      	orrs	r3, r2
 800a9dc:	b21b      	sxth	r3, r3
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800a9e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d112      	bne.n	800aa0e <find_volume+0x35a>
 800a9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ea:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800a9ee:	061a      	lsls	r2, r3, #24
 800a9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9f2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a9f6:	041b      	lsls	r3, r3, #16
 800a9f8:	4313      	orrs	r3, r2
 800a9fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a9fc:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800aa00:	0212      	lsls	r2, r2, #8
 800aa02:	4313      	orrs	r3, r2
 800aa04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa06:	f892 2020 	ldrb.w	r2, [r2, #32]
 800aa0a:	4313      	orrs	r3, r2
 800aa0c:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800aa0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa10:	7bdb      	ldrb	r3, [r3, #15]
 800aa12:	021b      	lsls	r3, r3, #8
 800aa14:	b21a      	sxth	r2, r3
 800aa16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa18:	7b9b      	ldrb	r3, [r3, #14]
 800aa1a:	b21b      	sxth	r3, r3
 800aa1c:	4313      	orrs	r3, r2
 800aa1e:	b21b      	sxth	r3, r3
 800aa20:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800aa22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d101      	bne.n	800aa2c <find_volume+0x378>
 800aa28:	230d      	movs	r3, #13
 800aa2a:	e168      	b.n	800acfe <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800aa2c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800aa2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa30:	4413      	add	r3, r2
 800aa32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa34:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aa38:	8911      	ldrh	r1, [r2, #8]
 800aa3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa3c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aa40:	8952      	ldrh	r2, [r2, #10]
 800aa42:	0952      	lsrs	r2, r2, #5
 800aa44:	b292      	uxth	r2, r2
 800aa46:	fbb1 f2f2 	udiv	r2, r1, r2
 800aa4a:	b292      	uxth	r2, r2
 800aa4c:	4413      	add	r3, r2
 800aa4e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800aa50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa54:	429a      	cmp	r2, r3
 800aa56:	d201      	bcs.n	800aa5c <find_volume+0x3a8>
 800aa58:	230d      	movs	r3, #13
 800aa5a:	e150      	b.n	800acfe <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800aa5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa60:	1ad3      	subs	r3, r2, r3
 800aa62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa64:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aa68:	7892      	ldrb	r2, [r2, #2]
 800aa6a:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa6e:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800aa70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d101      	bne.n	800aa7a <find_volume+0x3c6>
 800aa76:	230d      	movs	r3, #13
 800aa78:	e141      	b.n	800acfe <find_volume+0x64a>
	fmt = FS_FAT12;
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800aa80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa82:	f640 72f5 	movw	r2, #4085	; 0xff5
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d902      	bls.n	800aa90 <find_volume+0x3dc>
 800aa8a:	2302      	movs	r3, #2
 800aa8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800aa90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa92:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d902      	bls.n	800aaa0 <find_volume+0x3ec>
 800aa9a:	2303      	movs	r3, #3
 800aa9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800aaa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa2:	3302      	adds	r3, #2
 800aaa4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aaa6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aaaa:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 800aaac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aab2:	461a      	mov	r2, r3
 800aab4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aab6:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800aab8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800aaba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aabc:	4413      	add	r3, r2
 800aabe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aac0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aac4:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 800aac6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaca:	4413      	add	r3, r2
 800aacc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aace:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aad2:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 800aad4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aad8:	2b03      	cmp	r3, #3
 800aada:	d124      	bne.n	800ab26 <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800aadc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aade:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aae2:	891b      	ldrh	r3, [r3, #8]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d001      	beq.n	800aaec <find_volume+0x438>
 800aae8:	230d      	movs	r3, #13
 800aaea:	e108      	b.n	800acfe <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800aaec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaee:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800aaf2:	061a      	lsls	r2, r3, #24
 800aaf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800aafa:	041b      	lsls	r3, r3, #16
 800aafc:	4313      	orrs	r3, r2
 800aafe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab00:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800ab04:	0212      	lsls	r2, r2, #8
 800ab06:	4313      	orrs	r3, r2
 800ab08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab0a:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800ab0e:	4313      	orrs	r3, r2
 800ab10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ab16:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800ab18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab1e:	695b      	ldr	r3, [r3, #20]
 800ab20:	009b      	lsls	r3, r3, #2
 800ab22:	647b      	str	r3, [r7, #68]	; 0x44
 800ab24:	e02b      	b.n	800ab7e <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800ab26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab2c:	891b      	ldrh	r3, [r3, #8]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d101      	bne.n	800ab36 <find_volume+0x482>
 800ab32:	230d      	movs	r3, #13
 800ab34:	e0e3      	b.n	800acfe <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800ab36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab3c:	6a1a      	ldr	r2, [r3, #32]
 800ab3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab40:	4413      	add	r3, r2
 800ab42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab44:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ab48:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ab4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ab4e:	2b02      	cmp	r3, #2
 800ab50:	d105      	bne.n	800ab5e <find_volume+0x4aa>
 800ab52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab58:	695b      	ldr	r3, [r3, #20]
 800ab5a:	005b      	lsls	r3, r3, #1
 800ab5c:	e00e      	b.n	800ab7c <find_volume+0x4c8>
 800ab5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab64:	695a      	ldr	r2, [r3, #20]
 800ab66:	4613      	mov	r3, r2
 800ab68:	005b      	lsls	r3, r3, #1
 800ab6a:	4413      	add	r3, r2
 800ab6c:	085a      	lsrs	r2, r3, #1
 800ab6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab74:	695b      	ldr	r3, [r3, #20]
 800ab76:	f003 0301 	and.w	r3, r3, #1
 800ab7a:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800ab7c:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800ab7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab84:	699a      	ldr	r2, [r3, #24]
 800ab86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab8c:	895b      	ldrh	r3, [r3, #10]
 800ab8e:	4619      	mov	r1, r3
 800ab90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab92:	440b      	add	r3, r1
 800ab94:	3b01      	subs	r3, #1
 800ab96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ab98:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800ab9c:	8949      	ldrh	r1, [r1, #10]
 800ab9e:	fbb3 f3f1 	udiv	r3, r3, r1
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d201      	bcs.n	800abaa <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 800aba6:	230d      	movs	r3, #13
 800aba8:	e0a9      	b.n	800acfe <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800abaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abb0:	461a      	mov	r2, r3
 800abb2:	f04f 33ff 	mov.w	r3, #4294967295
 800abb6:	6113      	str	r3, [r2, #16]
 800abb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abbe:	691b      	ldr	r3, [r3, #16]
 800abc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800abc2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800abc6:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800abc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abce:	2280      	movs	r2, #128	; 0x80
 800abd0:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800abd2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800abd6:	2b03      	cmp	r3, #3
 800abd8:	d17a      	bne.n	800acd0 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800abda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abdc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800abe0:	021b      	lsls	r3, r3, #8
 800abe2:	b21a      	sxth	r2, r3
 800abe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abe6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800abea:	b21b      	sxth	r3, r3
 800abec:	4313      	orrs	r3, r2
 800abee:	b21b      	sxth	r3, r3
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d16d      	bne.n	800acd0 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 800abf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abf6:	3301      	adds	r3, #1
 800abf8:	4619      	mov	r1, r3
 800abfa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800abfc:	f7fd feb0 	bl	8008960 <move_window>
 800ac00:	4603      	mov	r3, r0
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d164      	bne.n	800acd0 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 800ac06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ac10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac12:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800ac16:	021b      	lsls	r3, r3, #8
 800ac18:	b21a      	sxth	r2, r3
 800ac1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac1c:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800ac20:	b21b      	sxth	r3, r3
 800ac22:	4313      	orrs	r3, r2
 800ac24:	b21b      	sxth	r3, r3
 800ac26:	4a38      	ldr	r2, [pc, #224]	; (800ad08 <find_volume+0x654>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d151      	bne.n	800acd0 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800ac2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac2e:	78db      	ldrb	r3, [r3, #3]
 800ac30:	061a      	lsls	r2, r3, #24
 800ac32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac34:	789b      	ldrb	r3, [r3, #2]
 800ac36:	041b      	lsls	r3, r3, #16
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac3c:	7852      	ldrb	r2, [r2, #1]
 800ac3e:	0212      	lsls	r2, r2, #8
 800ac40:	4313      	orrs	r3, r2
 800ac42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac44:	7812      	ldrb	r2, [r2, #0]
 800ac46:	4313      	orrs	r3, r2
 800ac48:	4a30      	ldr	r2, [pc, #192]	; (800ad0c <find_volume+0x658>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d140      	bne.n	800acd0 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800ac4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac50:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800ac54:	061a      	lsls	r2, r3, #24
 800ac56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac58:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800ac5c:	041b      	lsls	r3, r3, #16
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac62:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800ac66:	0212      	lsls	r2, r2, #8
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac6c:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800ac70:	4313      	orrs	r3, r2
 800ac72:	4a27      	ldr	r2, [pc, #156]	; (800ad10 <find_volume+0x65c>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d12b      	bne.n	800acd0 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800ac78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac7a:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800ac7e:	061a      	lsls	r2, r3, #24
 800ac80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac82:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800ac86:	041b      	lsls	r3, r3, #16
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac8c:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800ac90:	0212      	lsls	r2, r2, #8
 800ac92:	4313      	orrs	r3, r2
 800ac94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac96:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800ac9a:	4313      	orrs	r3, r2
 800ac9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aca2:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800aca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca6:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800acaa:	061a      	lsls	r2, r3, #24
 800acac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acae:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800acb2:	041b      	lsls	r3, r3, #16
 800acb4:	4313      	orrs	r3, r2
 800acb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800acb8:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800acbc:	0212      	lsls	r2, r2, #8
 800acbe:	4313      	orrs	r3, r2
 800acc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800acc2:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800acc6:	4313      	orrs	r3, r2
 800acc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800acca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800acce:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800acd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acd6:	461a      	mov	r2, r3
 800acd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800acdc:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800acde:	4b0d      	ldr	r3, [pc, #52]	; (800ad14 <find_volume+0x660>)
 800ace0:	881b      	ldrh	r3, [r3, #0]
 800ace2:	3301      	adds	r3, #1
 800ace4:	b29a      	uxth	r2, r3
 800ace6:	4b0b      	ldr	r3, [pc, #44]	; (800ad14 <find_volume+0x660>)
 800ace8:	801a      	strh	r2, [r3, #0]
 800acea:	4b0a      	ldr	r3, [pc, #40]	; (800ad14 <find_volume+0x660>)
 800acec:	881a      	ldrh	r2, [r3, #0]
 800acee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acf4:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800acf6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800acf8:	f7fd fdb6 	bl	8008868 <clear_lock>
#endif

	return FR_OK;
 800acfc:	2300      	movs	r3, #0
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3758      	adds	r7, #88	; 0x58
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	bf00      	nop
 800ad08:	ffffaa55 	.word	0xffffaa55
 800ad0c:	41615252 	.word	0x41615252
 800ad10:	61417272 	.word	0x61417272
 800ad14:	2000407c 	.word	0x2000407c

0800ad18 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b084      	sub	sp, #16
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d02a      	beq.n	800ad80 <validate+0x68>
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d024      	beq.n	800ad80 <validate+0x68>
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad42:	781b      	ldrb	r3, [r3, #0]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d01b      	beq.n	800ad80 <validate+0x68>
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad54:	88da      	ldrh	r2, [r3, #6]
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad5c:	889b      	ldrh	r3, [r3, #4]
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d10e      	bne.n	800ad80 <validate+0x68>
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad6e:	785b      	ldrb	r3, [r3, #1]
 800ad70:	4618      	mov	r0, r3
 800ad72:	f7fd fac9 	bl	8008308 <disk_status>
 800ad76:	4603      	mov	r3, r0
 800ad78:	f003 0301 	and.w	r3, r3, #1
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d001      	beq.n	800ad84 <validate+0x6c>
		return FR_INVALID_OBJECT;
 800ad80:	2309      	movs	r3, #9
 800ad82:	e000      	b.n	800ad86 <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800ad84:	2300      	movs	r3, #0
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3710      	adds	r7, #16
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}
	...

0800ad90 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b088      	sub	sp, #32
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	60f8      	str	r0, [r7, #12]
 800ad98:	60b9      	str	r1, [r7, #8]
 800ad9a:	4613      	mov	r3, r2
 800ad9c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800ada2:	f107 0310 	add.w	r3, r7, #16
 800ada6:	4618      	mov	r0, r3
 800ada8:	f7ff fbd2 	bl	800a550 <get_ldnumber>
 800adac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800adae:	69fb      	ldr	r3, [r7, #28]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	da01      	bge.n	800adb8 <f_mount+0x28>
 800adb4:	230b      	movs	r3, #11
 800adb6:	e02f      	b.n	800ae18 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800adb8:	4a19      	ldr	r2, [pc, #100]	; (800ae20 <f_mount+0x90>)
 800adba:	69fb      	ldr	r3, [r7, #28]
 800adbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800adc0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800adc2:	69bb      	ldr	r3, [r7, #24]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d007      	beq.n	800add8 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 800adc8:	69b8      	ldr	r0, [r7, #24]
 800adca:	f7fd fd4d 	bl	8008868 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800adce:	69bb      	ldr	r3, [r7, #24]
 800add0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800add4:	2200      	movs	r2, #0
 800add6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d004      	beq.n	800ade8 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ade4:	2200      	movs	r2, #0
 800ade6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ade8:	68fa      	ldr	r2, [r7, #12]
 800adea:	490d      	ldr	r1, [pc, #52]	; (800ae20 <f_mount+0x90>)
 800adec:	69fb      	ldr	r3, [r7, #28]
 800adee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d002      	beq.n	800adfe <f_mount+0x6e>
 800adf8:	79fb      	ldrb	r3, [r7, #7]
 800adfa:	2b01      	cmp	r3, #1
 800adfc:	d001      	beq.n	800ae02 <f_mount+0x72>
 800adfe:	2300      	movs	r3, #0
 800ae00:	e00a      	b.n	800ae18 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800ae02:	f107 0108 	add.w	r1, r7, #8
 800ae06:	f107 030c 	add.w	r3, r7, #12
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f7ff fc51 	bl	800a6b4 <find_volume>
 800ae12:	4603      	mov	r3, r0
 800ae14:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ae16:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3720      	adds	r7, #32
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}
 800ae20:	20004078 	.word	0x20004078

0800ae24 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800ae2a:	b086      	sub	sp, #24
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ae32:	f843 0c4c 	str.w	r0, [r3, #-76]
 800ae36:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ae3a:	f843 1c50 	str.w	r1, [r3, #-80]
 800ae3e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ae42:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800ae46:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ae4a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d101      	bne.n	800ae56 <f_open+0x32>
 800ae52:	2309      	movs	r3, #9
 800ae54:	e2f7      	b.n	800b446 <f_open+0x622>
	fp->fs = 0;			/* Clear file object */
 800ae56:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ae5a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800ae5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae62:	461a      	mov	r2, r3
 800ae64:	2300      	movs	r3, #0
 800ae66:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800ae68:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ae6c:	461a      	mov	r2, r3
 800ae6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ae72:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800ae76:	f003 031f 	and.w	r3, r3, #31
 800ae7a:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800ae7e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ae82:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800ae86:	f023 0301 	bic.w	r3, r3, #1
 800ae8a:	b2da      	uxtb	r2, r3
 800ae8c:	f107 0118 	add.w	r1, r7, #24
 800ae90:	3910      	subs	r1, #16
 800ae92:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ae96:	3b18      	subs	r3, #24
 800ae98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f7ff fc09 	bl	800a6b4 <find_volume>
 800aea2:	4603      	mov	r3, r0
 800aea4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800aea8:	f102 0217 	add.w	r2, r2, #23
 800aeac:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800aeae:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800aeb2:	f103 0317 	add.w	r3, r3, #23
 800aeb6:	781b      	ldrb	r3, [r3, #0]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	f040 82bf 	bne.w	800b43c <f_open+0x618>
		INIT_BUF(dj);
 800aebe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800aec2:	461a      	mov	r2, r3
 800aec4:	f107 0318 	add.w	r3, r7, #24
 800aec8:	3b04      	subs	r3, #4
 800aeca:	f8c2 3fe0 	str.w	r3, [r2, #4064]	; 0xfe0
 800aece:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800aed2:	461a      	mov	r2, r3
 800aed4:	4bd4      	ldr	r3, [pc, #848]	; (800b228 <f_open+0x404>)
 800aed6:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 800aeda:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800aede:	f853 2c50 	ldr.w	r2, [r3, #-80]
 800aee2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800aee6:	3b18      	subs	r3, #24
 800aee8:	4611      	mov	r1, r2
 800aeea:	4618      	mov	r0, r3
 800aeec:	f7ff faba 	bl	800a464 <follow_path>
 800aef0:	4603      	mov	r3, r0
 800aef2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800aef6:	f102 0217 	add.w	r2, r2, #23
 800aefa:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 800aefc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800af00:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 800af04:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800af08:	f102 0210 	add.w	r2, r2, #16
 800af0c:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800af0e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800af12:	f103 0317 	add.w	r3, r3, #23
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d126      	bne.n	800af6a <f_open+0x146>
			if (!dir)	/* Default directory itself */
 800af1c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800af20:	f103 0310 	add.w	r3, r3, #16
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d106      	bne.n	800af38 <f_open+0x114>
				res = FR_INVALID_NAME;
 800af2a:	2306      	movs	r3, #6
 800af2c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800af30:	f102 0217 	add.w	r2, r2, #23
 800af34:	7013      	strb	r3, [r2, #0]
 800af36:	e018      	b.n	800af6a <f_open+0x146>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800af38:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800af3c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800af40:	f023 0301 	bic.w	r3, r3, #1
 800af44:	2b00      	cmp	r3, #0
 800af46:	bf14      	ite	ne
 800af48:	2301      	movne	r3, #1
 800af4a:	2300      	moveq	r3, #0
 800af4c:	b2db      	uxtb	r3, r3
 800af4e:	461a      	mov	r2, r3
 800af50:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800af54:	3b18      	subs	r3, #24
 800af56:	4611      	mov	r1, r2
 800af58:	4618      	mov	r0, r3
 800af5a:	f7fd faef 	bl	800853c <chk_lock>
 800af5e:	4603      	mov	r3, r0
 800af60:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800af64:	f102 0217 	add.w	r2, r2, #23
 800af68:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800af6a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800af6e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800af72:	f003 031c 	and.w	r3, r3, #28
 800af76:	2b00      	cmp	r3, #0
 800af78:	f000 813c 	beq.w	800b1f4 <f_open+0x3d0>
			if (res != FR_OK) {					/* No file, create new */
 800af7c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800af80:	f103 0317 	add.w	r3, r3, #23
 800af84:	781b      	ldrb	r3, [r3, #0]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d02e      	beq.n	800afe8 <f_open+0x1c4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800af8a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800af8e:	f103 0317 	add.w	r3, r3, #23
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	2b04      	cmp	r3, #4
 800af96:	d112      	bne.n	800afbe <f_open+0x19a>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800af98:	f7fd fb40 	bl	800861c <enq_lock>
 800af9c:	4603      	mov	r3, r0
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d007      	beq.n	800afb2 <f_open+0x18e>
 800afa2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800afa6:	3b18      	subs	r3, #24
 800afa8:	4618      	mov	r0, r3
 800afaa:	f7fe fea5 	bl	8009cf8 <dir_register>
 800afae:	4603      	mov	r3, r0
 800afb0:	e000      	b.n	800afb4 <f_open+0x190>
 800afb2:	2312      	movs	r3, #18
 800afb4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800afb8:	f102 0217 	add.w	r2, r2, #23
 800afbc:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800afbe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800afc2:	461a      	mov	r2, r3
 800afc4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800afc8:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800afcc:	f043 0308 	orr.w	r3, r3, #8
 800afd0:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 800afd4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800afd8:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 800afdc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800afe0:	f102 0210 	add.w	r2, r2, #16
 800afe4:	6013      	str	r3, [r2, #0]
 800afe6:	e01f      	b.n	800b028 <f_open+0x204>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800afe8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800afec:	f103 0310 	add.w	r3, r3, #16
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	330b      	adds	r3, #11
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	f003 0311 	and.w	r3, r3, #17
 800affa:	2b00      	cmp	r3, #0
 800affc:	d006      	beq.n	800b00c <f_open+0x1e8>
					res = FR_DENIED;
 800affe:	2307      	movs	r3, #7
 800b000:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b004:	f102 0217 	add.w	r2, r2, #23
 800b008:	7013      	strb	r3, [r2, #0]
 800b00a:	e00d      	b.n	800b028 <f_open+0x204>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800b00c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b010:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800b014:	f003 0304 	and.w	r3, r3, #4
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d005      	beq.n	800b028 <f_open+0x204>
						res = FR_EXIST;
 800b01c:	2308      	movs	r3, #8
 800b01e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b022:	f102 0217 	add.w	r2, r2, #23
 800b026:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b028:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b02c:	f103 0317 	add.w	r3, r3, #23
 800b030:	781b      	ldrb	r3, [r3, #0]
 800b032:	2b00      	cmp	r3, #0
 800b034:	f040 8113 	bne.w	800b25e <f_open+0x43a>
 800b038:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b03c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800b040:	f003 0308 	and.w	r3, r3, #8
 800b044:	2b00      	cmp	r3, #0
 800b046:	f000 810a 	beq.w	800b25e <f_open+0x43a>
				dw = GET_FATTIME();				/* Created time */
 800b04a:	f7fd f8ff 	bl	800824c <get_fattime>
 800b04e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b052:	f103 030c 	add.w	r3, r3, #12
 800b056:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800b058:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b05c:	f103 0310 	add.w	r3, r3, #16
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	330e      	adds	r3, #14
 800b064:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b068:	f102 020c 	add.w	r2, r2, #12
 800b06c:	6812      	ldr	r2, [r2, #0]
 800b06e:	b2d2      	uxtb	r2, r2
 800b070:	701a      	strb	r2, [r3, #0]
 800b072:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b076:	f103 030c 	add.w	r3, r3, #12
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	b29b      	uxth	r3, r3
 800b07e:	0a1b      	lsrs	r3, r3, #8
 800b080:	b29a      	uxth	r2, r3
 800b082:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b086:	f103 0310 	add.w	r3, r3, #16
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	330f      	adds	r3, #15
 800b08e:	b2d2      	uxtb	r2, r2
 800b090:	701a      	strb	r2, [r3, #0]
 800b092:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b096:	f103 030c 	add.w	r3, r3, #12
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	0c1a      	lsrs	r2, r3, #16
 800b09e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b0a2:	f103 0310 	add.w	r3, r3, #16
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	3310      	adds	r3, #16
 800b0aa:	b2d2      	uxtb	r2, r2
 800b0ac:	701a      	strb	r2, [r3, #0]
 800b0ae:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b0b2:	f103 030c 	add.w	r3, r3, #12
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	0e1a      	lsrs	r2, r3, #24
 800b0ba:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b0be:	f103 0310 	add.w	r3, r3, #16
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	3311      	adds	r3, #17
 800b0c6:	b2d2      	uxtb	r2, r2
 800b0c8:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800b0ca:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b0ce:	f103 0310 	add.w	r3, r3, #16
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	330b      	adds	r3, #11
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800b0da:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b0de:	f103 0310 	add.w	r3, r3, #16
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	331c      	adds	r3, #28
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	701a      	strb	r2, [r3, #0]
 800b0ea:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b0ee:	f103 0310 	add.w	r3, r3, #16
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	331d      	adds	r3, #29
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	701a      	strb	r2, [r3, #0]
 800b0fa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b0fe:	f103 0310 	add.w	r3, r3, #16
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	331e      	adds	r3, #30
 800b106:	2200      	movs	r2, #0
 800b108:	701a      	strb	r2, [r3, #0]
 800b10a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b10e:	f103 0310 	add.w	r3, r3, #16
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	331f      	adds	r3, #31
 800b116:	2200      	movs	r2, #0
 800b118:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800b11a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b11e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800b122:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b126:	f102 0210 	add.w	r2, r2, #16
 800b12a:	6811      	ldr	r1, [r2, #0]
 800b12c:	4618      	mov	r0, r3
 800b12e:	f7fe fb2c 	bl	800978a <ld_clust>
 800b132:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b136:	f103 0308 	add.w	r3, r3, #8
 800b13a:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 800b13c:	2100      	movs	r1, #0
 800b13e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b142:	f103 0310 	add.w	r3, r3, #16
 800b146:	6818      	ldr	r0, [r3, #0]
 800b148:	f7fe fb4e 	bl	80097e8 <st_clust>
				dj.fs->wflag = 1;
 800b14c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b150:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800b154:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b158:	2201      	movs	r2, #1
 800b15a:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 800b15c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b160:	f103 0308 	add.w	r3, r3, #8
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d079      	beq.n	800b25e <f_open+0x43a>
					dw = dj.fs->winsect;
 800b16a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b16e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800b172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b178:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b17c:	f102 020c 	add.w	r2, r2, #12
 800b180:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800b182:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b186:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800b18a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b18e:	f102 0208 	add.w	r2, r2, #8
 800b192:	6811      	ldr	r1, [r2, #0]
 800b194:	4618      	mov	r0, r3
 800b196:	f7fd ff48 	bl	800902a <remove_chain>
 800b19a:	4603      	mov	r3, r0
 800b19c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b1a0:	f102 0217 	add.w	r2, r2, #23
 800b1a4:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 800b1a6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b1aa:	f103 0317 	add.w	r3, r3, #23
 800b1ae:	781b      	ldrb	r3, [r3, #0]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d154      	bne.n	800b25e <f_open+0x43a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800b1b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b1b8:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	; 0xfc8
 800b1bc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b1c0:	f103 0308 	add.w	r3, r3, #8
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	3b01      	subs	r3, #1
 800b1c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b1cc:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 800b1ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b1d2:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800b1d6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b1da:	f102 020c 	add.w	r2, r2, #12
 800b1de:	6811      	ldr	r1, [r2, #0]
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f7fd fbbd 	bl	8008960 <move_window>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b1ec:	f102 0217 	add.w	r2, r2, #23
 800b1f0:	7013      	strb	r3, [r2, #0]
 800b1f2:	e034      	b.n	800b25e <f_open+0x43a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800b1f4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b1f8:	f103 0317 	add.w	r3, r3, #23
 800b1fc:	781b      	ldrb	r3, [r3, #0]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d12d      	bne.n	800b25e <f_open+0x43a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800b202:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b206:	f103 0310 	add.w	r3, r3, #16
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	330b      	adds	r3, #11
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	f003 0310 	and.w	r3, r3, #16
 800b214:	2b00      	cmp	r3, #0
 800b216:	d009      	beq.n	800b22c <f_open+0x408>
					res = FR_NO_FILE;
 800b218:	2304      	movs	r3, #4
 800b21a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b21e:	f102 0217 	add.w	r2, r2, #23
 800b222:	7013      	strb	r3, [r2, #0]
 800b224:	e01b      	b.n	800b25e <f_open+0x43a>
 800b226:	bf00      	nop
 800b228:	20004098 	.word	0x20004098
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800b22c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b230:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800b234:	f003 0302 	and.w	r3, r3, #2
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d010      	beq.n	800b25e <f_open+0x43a>
 800b23c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b240:	f103 0310 	add.w	r3, r3, #16
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	330b      	adds	r3, #11
 800b248:	781b      	ldrb	r3, [r3, #0]
 800b24a:	f003 0301 	and.w	r3, r3, #1
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d005      	beq.n	800b25e <f_open+0x43a>
						res = FR_DENIED;
 800b252:	2307      	movs	r3, #7
 800b254:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b258:	f102 0217 	add.w	r2, r2, #23
 800b25c:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 800b25e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b262:	f103 0317 	add.w	r3, r3, #23
 800b266:	781b      	ldrb	r3, [r3, #0]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d157      	bne.n	800b31c <f_open+0x4f8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b26c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b270:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800b274:	f003 0308 	and.w	r3, r3, #8
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d00a      	beq.n	800b292 <f_open+0x46e>
				mode |= FA__WRITTEN;
 800b27c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b280:	461a      	mov	r2, r3
 800b282:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b286:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800b28a:	f043 0320 	orr.w	r3, r3, #32
 800b28e:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800b292:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b296:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800b29a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b29e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b2a4:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800b2a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b2ac:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 800b2ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b2b2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b2b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b2c0:	f103 0310 	add.w	r3, r3, #16
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b2c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b2cc:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800b2d0:	f023 0301 	bic.w	r3, r3, #1
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	bf14      	ite	ne
 800b2d8:	2301      	movne	r3, #1
 800b2da:	2300      	moveq	r3, #0
 800b2dc:	b2db      	uxtb	r3, r3
 800b2de:	461a      	mov	r2, r3
 800b2e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b2e4:	3b18      	subs	r3, #24
 800b2e6:	4611      	mov	r1, r2
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f7fd f9bb 	bl	8008664 <inc_lock>
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b2f4:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b2f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2fc:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 800b2fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b302:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b30a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d105      	bne.n	800b31c <f_open+0x4f8>
 800b310:	2302      	movs	r3, #2
 800b312:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b316:	f102 0217 	add.w	r2, r2, #23
 800b31a:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800b31c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b320:	f103 0317 	add.w	r3, r3, #23
 800b324:	781b      	ldrb	r3, [r3, #0]
 800b326:	2b00      	cmp	r3, #0
 800b328:	f040 8088 	bne.w	800b43c <f_open+0x618>
			fp->flag = mode;					/* File access mode */
 800b32c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b330:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b334:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b338:	461a      	mov	r2, r3
 800b33a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b33e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800b342:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 800b344:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b348:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b34c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b350:	2200      	movs	r2, #0
 800b352:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800b354:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b358:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800b35c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b360:	f102 0210 	add.w	r2, r2, #16
 800b364:	6811      	ldr	r1, [r2, #0]
 800b366:	4618      	mov	r0, r3
 800b368:	f7fe fa0f 	bl	800978a <ld_clust>
 800b36c:	4602      	mov	r2, r0
 800b36e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b372:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b37a:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800b37c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b380:	f103 0310 	add.w	r3, r3, #16
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	331f      	adds	r3, #31
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	061a      	lsls	r2, r3, #24
 800b38c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b390:	f103 0310 	add.w	r3, r3, #16
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	331e      	adds	r3, #30
 800b398:	781b      	ldrb	r3, [r3, #0]
 800b39a:	041b      	lsls	r3, r3, #16
 800b39c:	4313      	orrs	r3, r2
 800b39e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b3a2:	f102 0210 	add.w	r2, r2, #16
 800b3a6:	6812      	ldr	r2, [r2, #0]
 800b3a8:	321d      	adds	r2, #29
 800b3aa:	7812      	ldrb	r2, [r2, #0]
 800b3ac:	0212      	lsls	r2, r2, #8
 800b3ae:	4313      	orrs	r3, r2
 800b3b0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b3b4:	f102 0210 	add.w	r2, r2, #16
 800b3b8:	6812      	ldr	r2, [r2, #0]
 800b3ba:	321c      	adds	r2, #28
 800b3bc:	7812      	ldrb	r2, [r2, #0]
 800b3be:	4313      	orrs	r3, r2
 800b3c0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b3c4:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800b3c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b3cc:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 800b3ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b3d2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b3d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3da:	461a      	mov	r2, r3
 800b3dc:	2300      	movs	r3, #0
 800b3de:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 800b3e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b3e4:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b3e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3ec:	461a      	mov	r2, r3
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800b3f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b3f6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b3fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3fe:	461a      	mov	r2, r3
 800b400:	2300      	movs	r3, #0
 800b402:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800b404:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b408:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800b40c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b410:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800b414:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b418:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 800b41a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b41e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b42c:	88da      	ldrh	r2, [r3, #6]
 800b42e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b432:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b43a:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 800b43c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b440:	f103 0317 	add.w	r3, r3, #23
 800b444:	781b      	ldrb	r3, [r3, #0]
}
 800b446:	4618      	mov	r0, r3
 800b448:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 800b44c:	3718      	adds	r7, #24
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}
 800b452:	bf00      	nop

0800b454 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b08c      	sub	sp, #48	; 0x30
 800b458:	af00      	add	r7, sp, #0
 800b45a:	60f8      	str	r0, [r7, #12]
 800b45c:	60b9      	str	r1, [r7, #8]
 800b45e:	607a      	str	r2, [r7, #4]
 800b460:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	2200      	movs	r2, #0
 800b46a:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800b46c:	68f8      	ldr	r0, [r7, #12]
 800b46e:	f7ff fc53 	bl	800ad18 <validate>
 800b472:	4603      	mov	r3, r0
 800b474:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800b476:	7ffb      	ldrb	r3, [r7, #31]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d001      	beq.n	800b480 <f_read+0x2c>
 800b47c:	7ffb      	ldrb	r3, [r7, #31]
 800b47e:	e1cd      	b.n	800b81c <f_read+0x3c8>
	if (fp->err)								/* Check error */
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b486:	79db      	ldrb	r3, [r3, #7]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d004      	beq.n	800b496 <f_read+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b492:	79db      	ldrb	r3, [r3, #7]
 800b494:	e1c2      	b.n	800b81c <f_read+0x3c8>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b49c:	799b      	ldrb	r3, [r3, #6]
 800b49e:	f003 0301 	and.w	r3, r3, #1
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d101      	bne.n	800b4aa <f_read+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 800b4a6:	2307      	movs	r3, #7
 800b4a8:	e1b8      	b.n	800b81c <f_read+0x3c8>
	remain = fp->fsize - fp->fptr;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4b0:	68da      	ldr	r2, [r3, #12]
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4b8:	689b      	ldr	r3, [r3, #8]
 800b4ba:	1ad3      	subs	r3, r2, r3
 800b4bc:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800b4be:	687a      	ldr	r2, [r7, #4]
 800b4c0:	69bb      	ldr	r3, [r7, #24]
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	f240 81a5 	bls.w	800b812 <f_read+0x3be>
 800b4c8:	69bb      	ldr	r3, [r7, #24]
 800b4ca:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800b4cc:	e1a1      	b.n	800b812 <f_read+0x3be>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4d4:	689b      	ldr	r3, [r3, #8]
 800b4d6:	68fa      	ldr	r2, [r7, #12]
 800b4d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b4dc:	6812      	ldr	r2, [r2, #0]
 800b4de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b4e2:	8952      	ldrh	r2, [r2, #10]
 800b4e4:	fbb3 f1f2 	udiv	r1, r3, r2
 800b4e8:	fb01 f202 	mul.w	r2, r1, r2
 800b4ec:	1a9b      	subs	r3, r3, r2
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	f040 8140 	bne.w	800b774 <f_read+0x320>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4fa:	689b      	ldr	r3, [r3, #8]
 800b4fc:	68fa      	ldr	r2, [r7, #12]
 800b4fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b502:	6812      	ldr	r2, [r2, #0]
 800b504:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b508:	8952      	ldrh	r2, [r2, #10]
 800b50a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b50e:	b2da      	uxtb	r2, r3
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b51c:	789b      	ldrb	r3, [r3, #2]
 800b51e:	3b01      	subs	r3, #1
 800b520:	b2db      	uxtb	r3, r3
 800b522:	4013      	ands	r3, r2
 800b524:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 800b526:	7dfb      	ldrb	r3, [r7, #23]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d143      	bne.n	800b5b4 <f_read+0x160>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b532:	689b      	ldr	r3, [r3, #8]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d105      	bne.n	800b544 <f_read+0xf0>
					clst = fp->sclust;			/* Follow from the origin */
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b53e:	691b      	ldr	r3, [r3, #16]
 800b540:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b542:	e01c      	b.n	800b57e <f_read+0x12a>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d009      	beq.n	800b564 <f_read+0x110>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b556:	689b      	ldr	r3, [r3, #8]
 800b558:	4619      	mov	r1, r3
 800b55a:	68f8      	ldr	r0, [r7, #12]
 800b55c:	f7fd fe6e 	bl	800923c <clmt_clust>
 800b560:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b562:	e00c      	b.n	800b57e <f_read+0x12a>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b56a:	681a      	ldr	r2, [r3, #0]
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b572:	695b      	ldr	r3, [r3, #20]
 800b574:	4619      	mov	r1, r3
 800b576:	4610      	mov	r0, r2
 800b578:	f7fd fb08 	bl	8008b8c <get_fat>
 800b57c:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800b57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b580:	2b01      	cmp	r3, #1
 800b582:	d806      	bhi.n	800b592 <f_read+0x13e>
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b58a:	2202      	movs	r2, #2
 800b58c:	71da      	strb	r2, [r3, #7]
 800b58e:	2302      	movs	r3, #2
 800b590:	e144      	b.n	800b81c <f_read+0x3c8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800b592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b594:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b598:	d106      	bne.n	800b5a8 <f_read+0x154>
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5a0:	2201      	movs	r2, #1
 800b5a2:	71da      	strb	r2, [r3, #7]
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	e139      	b.n	800b81c <f_read+0x3c8>
				fp->clust = clst;				/* Update current cluster */
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b2:	6153      	str	r3, [r2, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5ba:	681a      	ldr	r2, [r3, #0]
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5c2:	695b      	ldr	r3, [r3, #20]
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	4610      	mov	r0, r2
 800b5c8:	f7fd fabb 	bl	8008b42 <clust2sect>
 800b5cc:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d106      	bne.n	800b5e2 <f_read+0x18e>
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5da:	2202      	movs	r2, #2
 800b5dc:	71da      	strb	r2, [r3, #7]
 800b5de:	2302      	movs	r3, #2
 800b5e0:	e11c      	b.n	800b81c <f_read+0x3c8>
			sect += csect;
 800b5e2:	7dfb      	ldrb	r3, [r7, #23]
 800b5e4:	693a      	ldr	r2, [r7, #16]
 800b5e6:	4413      	add	r3, r2
 800b5e8:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5f6:	895b      	ldrh	r3, [r3, #10]
 800b5f8:	461a      	mov	r2, r3
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800b600:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800b602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b604:	2b00      	cmp	r3, #0
 800b606:	d066      	beq.n	800b6d6 <f_read+0x282>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800b608:	7dfa      	ldrb	r2, [r7, #23]
 800b60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b60c:	4413      	add	r3, r2
 800b60e:	68fa      	ldr	r2, [r7, #12]
 800b610:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b614:	6812      	ldr	r2, [r2, #0]
 800b616:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b61a:	7892      	ldrb	r2, [r2, #2]
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d90a      	bls.n	800b636 <f_read+0x1e2>
					cc = fp->fs->csize - csect;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b62c:	789b      	ldrb	r3, [r3, #2]
 800b62e:	461a      	mov	r2, r3
 800b630:	7dfb      	ldrb	r3, [r7, #23]
 800b632:	1ad3      	subs	r3, r2, r3
 800b634:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b642:	7858      	ldrb	r0, [r3, #1]
 800b644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b646:	693a      	ldr	r2, [r7, #16]
 800b648:	6a39      	ldr	r1, [r7, #32]
 800b64a:	f7fc fe9d 	bl	8008388 <disk_read>
 800b64e:	4603      	mov	r3, r0
 800b650:	2b00      	cmp	r3, #0
 800b652:	d006      	beq.n	800b662 <f_read+0x20e>
					ABORT(fp->fs, FR_DISK_ERR);
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b65a:	2201      	movs	r2, #1
 800b65c:	71da      	strb	r2, [r3, #7]
 800b65e:	2301      	movs	r3, #1
 800b660:	e0dc      	b.n	800b81c <f_read+0x3c8>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b668:	799b      	ldrb	r3, [r3, #6]
 800b66a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d024      	beq.n	800b6bc <f_read+0x268>
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b678:	699a      	ldr	r2, [r3, #24]
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	1ad3      	subs	r3, r2, r3
 800b67e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b680:	429a      	cmp	r2, r3
 800b682:	d91b      	bls.n	800b6bc <f_read+0x268>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b68a:	699a      	ldr	r2, [r3, #24]
 800b68c:	693b      	ldr	r3, [r7, #16]
 800b68e:	1ad3      	subs	r3, r2, r3
 800b690:	68fa      	ldr	r2, [r7, #12]
 800b692:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b696:	6812      	ldr	r2, [r2, #0]
 800b698:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b69c:	8952      	ldrh	r2, [r2, #10]
 800b69e:	fb02 f303 	mul.w	r3, r2, r3
 800b6a2:	6a3a      	ldr	r2, [r7, #32]
 800b6a4:	18d0      	adds	r0, r2, r3
 800b6a6:	68f9      	ldr	r1, [r7, #12]
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6b4:	895b      	ldrh	r3, [r3, #10]
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	f7fc fec4 	bl	8008444 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6c8:	895b      	ldrh	r3, [r3, #10]
 800b6ca:	461a      	mov	r2, r3
 800b6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ce:	fb02 f303 	mul.w	r3, r2, r3
 800b6d2:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 800b6d4:	e085      	b.n	800b7e2 <f_read+0x38e>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6dc:	699b      	ldr	r3, [r3, #24]
 800b6de:	693a      	ldr	r2, [r7, #16]
 800b6e0:	429a      	cmp	r2, r3
 800b6e2:	d041      	beq.n	800b768 <f_read+0x314>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6ea:	799b      	ldrb	r3, [r3, #6]
 800b6ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d023      	beq.n	800b73c <f_read+0x2e8>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b700:	7858      	ldrb	r0, [r3, #1]
 800b702:	68f9      	ldr	r1, [r7, #12]
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b70a:	699a      	ldr	r2, [r3, #24]
 800b70c:	2301      	movs	r3, #1
 800b70e:	f7fc fe5b 	bl	80083c8 <disk_write>
 800b712:	4603      	mov	r3, r0
 800b714:	2b00      	cmp	r3, #0
 800b716:	d006      	beq.n	800b726 <f_read+0x2d2>
						ABORT(fp->fs, FR_DISK_ERR);
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b71e:	2201      	movs	r2, #1
 800b720:	71da      	strb	r2, [r3, #7]
 800b722:	2301      	movs	r3, #1
 800b724:	e07a      	b.n	800b81c <f_read+0x3c8>
					fp->flag &= ~FA__DIRTY;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b72c:	799b      	ldrb	r3, [r3, #6]
 800b72e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b732:	b2da      	uxtb	r2, r3
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b73a:	719a      	strb	r2, [r3, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b748:	7858      	ldrb	r0, [r3, #1]
 800b74a:	68f9      	ldr	r1, [r7, #12]
 800b74c:	2301      	movs	r3, #1
 800b74e:	693a      	ldr	r2, [r7, #16]
 800b750:	f7fc fe1a 	bl	8008388 <disk_read>
 800b754:	4603      	mov	r3, r0
 800b756:	2b00      	cmp	r3, #0
 800b758:	d006      	beq.n	800b768 <f_read+0x314>
					ABORT(fp->fs, FR_DISK_ERR);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b760:	2201      	movs	r2, #1
 800b762:	71da      	strb	r2, [r3, #7]
 800b764:	2301      	movs	r3, #1
 800b766:	e059      	b.n	800b81c <f_read+0x3c8>
			}
#endif
			fp->dsect = sect;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b76e:	461a      	mov	r2, r3
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	6193      	str	r3, [r2, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b780:	895b      	ldrh	r3, [r3, #10]
 800b782:	4618      	mov	r0, r3
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b78a:	689b      	ldr	r3, [r3, #8]
 800b78c:	68fa      	ldr	r2, [r7, #12]
 800b78e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b792:	6812      	ldr	r2, [r2, #0]
 800b794:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b798:	8952      	ldrh	r2, [r2, #10]
 800b79a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b79e:	fb01 f202 	mul.w	r2, r1, r2
 800b7a2:	1a9b      	subs	r3, r3, r2
 800b7a4:	1ac3      	subs	r3, r0, r3
 800b7a6:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 800b7a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	d901      	bls.n	800b7b4 <f_read+0x360>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7ba:	689b      	ldr	r3, [r3, #8]
 800b7bc:	68fa      	ldr	r2, [r7, #12]
 800b7be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b7c2:	6812      	ldr	r2, [r2, #0]
 800b7c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b7c8:	8952      	ldrh	r2, [r2, #10]
 800b7ca:	fbb3 f1f2 	udiv	r1, r3, r2
 800b7ce:	fb01 f202 	mul.w	r2, r1, r2
 800b7d2:	1a9b      	subs	r3, r3, r2
 800b7d4:	68fa      	ldr	r2, [r7, #12]
 800b7d6:	4413      	add	r3, r2
 800b7d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7da:	4619      	mov	r1, r3
 800b7dc:	6a38      	ldr	r0, [r7, #32]
 800b7de:	f7fc fe31 	bl	8008444 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800b7e2:	6a3a      	ldr	r2, [r7, #32]
 800b7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e6:	4413      	add	r3, r2
 800b7e8:	623b      	str	r3, [r7, #32]
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7f0:	689a      	ldr	r2, [r3, #8]
 800b7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f4:	4413      	add	r3, r2
 800b7f6:	68fa      	ldr	r2, [r7, #12]
 800b7f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b7fc:	6093      	str	r3, [r2, #8]
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	681a      	ldr	r2, [r3, #0]
 800b802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b804:	441a      	add	r2, r3
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	601a      	str	r2, [r3, #0]
 800b80a:	687a      	ldr	r2, [r7, #4]
 800b80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b80e:	1ad3      	subs	r3, r2, r3
 800b810:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2b00      	cmp	r3, #0
 800b816:	f47f ae5a 	bne.w	800b4ce <f_read+0x7a>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 800b81a:	2300      	movs	r3, #0
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3730      	adds	r7, #48	; 0x30
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}

0800b824 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b086      	sub	sp, #24
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f7ff fa73 	bl	800ad18 <validate>
 800b832:	4603      	mov	r3, r0
 800b834:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b836:	7dfb      	ldrb	r3, [r7, #23]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	f040 80bc 	bne.w	800b9b6 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b844:	799b      	ldrb	r3, [r3, #6]
 800b846:	f003 0320 	and.w	r3, r3, #32
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	f000 80b3 	beq.w	800b9b6 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b856:	799b      	ldrb	r3, [r3, #6]
 800b858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d01e      	beq.n	800b89e <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b86c:	7858      	ldrb	r0, [r3, #1]
 800b86e:	6879      	ldr	r1, [r7, #4]
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b876:	699a      	ldr	r2, [r3, #24]
 800b878:	2301      	movs	r3, #1
 800b87a:	f7fc fda5 	bl	80083c8 <disk_write>
 800b87e:	4603      	mov	r3, r0
 800b880:	2b00      	cmp	r3, #0
 800b882:	d001      	beq.n	800b888 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800b884:	2301      	movs	r3, #1
 800b886:	e097      	b.n	800b9b8 <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b88e:	799b      	ldrb	r3, [r3, #6]
 800b890:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b894:	b2da      	uxtb	r2, r3
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b89c:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8a4:	681a      	ldr	r2, [r3, #0]
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8ac:	69db      	ldr	r3, [r3, #28]
 800b8ae:	4619      	mov	r1, r3
 800b8b0:	4610      	mov	r0, r2
 800b8b2:	f7fd f855 	bl	8008960 <move_window>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800b8ba:	7dfb      	ldrb	r3, [r7, #23]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d17a      	bne.n	800b9b6 <f_sync+0x192>
				dir = fp->dir_ptr;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8c6:	6a1b      	ldr	r3, [r3, #32]
 800b8c8:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	330b      	adds	r3, #11
 800b8ce:	781a      	ldrb	r2, [r3, #0]
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	330b      	adds	r3, #11
 800b8d4:	f042 0220 	orr.w	r2, r2, #32
 800b8d8:	b2d2      	uxtb	r2, r2
 800b8da:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8e2:	68da      	ldr	r2, [r3, #12]
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	331c      	adds	r3, #28
 800b8e8:	b2d2      	uxtb	r2, r2
 800b8ea:	701a      	strb	r2, [r3, #0]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8f2:	68db      	ldr	r3, [r3, #12]
 800b8f4:	b29b      	uxth	r3, r3
 800b8f6:	0a1b      	lsrs	r3, r3, #8
 800b8f8:	b29a      	uxth	r2, r3
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	331d      	adds	r3, #29
 800b8fe:	b2d2      	uxtb	r2, r2
 800b900:	701a      	strb	r2, [r3, #0]
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b908:	68db      	ldr	r3, [r3, #12]
 800b90a:	0c1a      	lsrs	r2, r3, #16
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	331e      	adds	r3, #30
 800b910:	b2d2      	uxtb	r2, r2
 800b912:	701a      	strb	r2, [r3, #0]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b91a:	68db      	ldr	r3, [r3, #12]
 800b91c:	0e1a      	lsrs	r2, r3, #24
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	331f      	adds	r3, #31
 800b922:	b2d2      	uxtb	r2, r2
 800b924:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b92c:	691b      	ldr	r3, [r3, #16]
 800b92e:	4619      	mov	r1, r3
 800b930:	6938      	ldr	r0, [r7, #16]
 800b932:	f7fd ff59 	bl	80097e8 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800b936:	f7fc fc89 	bl	800824c <get_fattime>
 800b93a:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	3316      	adds	r3, #22
 800b940:	68fa      	ldr	r2, [r7, #12]
 800b942:	b2d2      	uxtb	r2, r2
 800b944:	701a      	strb	r2, [r3, #0]
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	b29b      	uxth	r3, r3
 800b94a:	0a1b      	lsrs	r3, r3, #8
 800b94c:	b29a      	uxth	r2, r3
 800b94e:	693b      	ldr	r3, [r7, #16]
 800b950:	3317      	adds	r3, #23
 800b952:	b2d2      	uxtb	r2, r2
 800b954:	701a      	strb	r2, [r3, #0]
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	0c1a      	lsrs	r2, r3, #16
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	3318      	adds	r3, #24
 800b95e:	b2d2      	uxtb	r2, r2
 800b960:	701a      	strb	r2, [r3, #0]
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	0e1a      	lsrs	r2, r3, #24
 800b966:	693b      	ldr	r3, [r7, #16]
 800b968:	3319      	adds	r3, #25
 800b96a:	b2d2      	uxtb	r2, r2
 800b96c:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	3312      	adds	r3, #18
 800b972:	2200      	movs	r2, #0
 800b974:	701a      	strb	r2, [r3, #0]
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	3313      	adds	r3, #19
 800b97a:	2200      	movs	r2, #0
 800b97c:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b984:	799b      	ldrb	r3, [r3, #6]
 800b986:	f023 0320 	bic.w	r3, r3, #32
 800b98a:	b2da      	uxtb	r2, r3
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b992:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9a0:	2201      	movs	r2, #1
 800b9a2:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f7fd f809 	bl	80089c4 <sync_fs>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800b9b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3718      	adds	r7, #24
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}

0800b9c0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b084      	sub	sp, #16
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f7ff ff2b 	bl	800b824 <f_sync>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b9d2:	7bfb      	ldrb	r3, [r7, #15]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d119      	bne.n	800ba0c <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f7ff f99d 	bl	800ad18 <validate>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b9e2:	7bfb      	ldrb	r3, [r7, #15]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d111      	bne.n	800ba0c <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f7fc fef5 	bl	80087e0 <dec_lock>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b9fa:	7bfb      	ldrb	r3, [r7, #15]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d105      	bne.n	800ba0c <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba06:	461a      	mov	r2, r3
 800ba08:	2300      	movs	r3, #0
 800ba0a:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ba0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	3710      	adds	r7, #16
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}

0800ba16 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800ba16:	b580      	push	{r7, lr}
 800ba18:	b090      	sub	sp, #64	; 0x40
 800ba1a:	af00      	add	r7, sp, #0
 800ba1c:	6078      	str	r0, [r7, #4]
 800ba1e:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f7ff f979 	bl	800ad18 <validate>
 800ba26:	4603      	mov	r3, r0
 800ba28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800ba2c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d002      	beq.n	800ba3a <f_lseek+0x24>
 800ba34:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ba38:	e2da      	b.n	800bff0 <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba40:	79db      	ldrb	r3, [r3, #7]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d004      	beq.n	800ba50 <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba4c:	79db      	ldrb	r3, [r3, #7]
 800ba4e:	e2cf      	b.n	800bff0 <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	f000 8124 	beq.w	800bca6 <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba64:	d16c      	bne.n	800bb40 <f_lseek+0x12a>
			tbl = fp->cltbl;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba6e:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ba70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba72:	1d1a      	adds	r2, r3, #4
 800ba74:	627a      	str	r2, [r7, #36]	; 0x24
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	617b      	str	r3, [r7, #20]
 800ba7a:	2302      	movs	r3, #2
 800ba7c:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba84:	691b      	ldr	r3, [r3, #16]
 800ba86:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800ba88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d046      	beq.n	800bb1c <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ba8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba90:	613b      	str	r3, [r7, #16]
 800ba92:	2300      	movs	r3, #0
 800ba94:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba98:	3302      	adds	r3, #2
 800ba9a:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800ba9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba9e:	60fb      	str	r3, [r7, #12]
 800baa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baa2:	3301      	adds	r3, #1
 800baa4:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bab0:	4618      	mov	r0, r3
 800bab2:	f7fd f86b 	bl	8008b8c <get_fat>
 800bab6:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800bab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baba:	2b01      	cmp	r3, #1
 800babc:	d806      	bhi.n	800bacc <f_lseek+0xb6>
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bac4:	2202      	movs	r2, #2
 800bac6:	71da      	strb	r2, [r3, #7]
 800bac8:	2302      	movs	r3, #2
 800baca:	e291      	b.n	800bff0 <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800bacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bace:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bad2:	d106      	bne.n	800bae2 <f_lseek+0xcc>
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bada:	2201      	movs	r2, #1
 800badc:	71da      	strb	r2, [r3, #7]
 800bade:	2301      	movs	r3, #1
 800bae0:	e286      	b.n	800bff0 <f_lseek+0x5da>
					} while (cl == pcl + 1);
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	3301      	adds	r3, #1
 800bae6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bae8:	429a      	cmp	r2, r3
 800baea:	d0d7      	beq.n	800ba9c <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800baec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d809      	bhi.n	800bb08 <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 800baf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf6:	1d1a      	adds	r2, r3, #4
 800baf8:	627a      	str	r2, [r7, #36]	; 0x24
 800bafa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bafc:	601a      	str	r2, [r3, #0]
 800bafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb00:	1d1a      	adds	r2, r3, #4
 800bb02:	627a      	str	r2, [r7, #36]	; 0x24
 800bb04:	693a      	ldr	r2, [r7, #16]
 800bb06:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb14:	695b      	ldr	r3, [r3, #20]
 800bb16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d3b8      	bcc.n	800ba8e <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb26:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800bb28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d803      	bhi.n	800bb38 <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 800bb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb32:	2200      	movs	r2, #0
 800bb34:	601a      	str	r2, [r3, #0]
 800bb36:	e259      	b.n	800bfec <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800bb38:	2311      	movs	r3, #17
 800bb3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800bb3e:	e255      	b.n	800bfec <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb46:	68db      	ldr	r3, [r3, #12]
 800bb48:	683a      	ldr	r2, [r7, #0]
 800bb4a:	429a      	cmp	r2, r3
 800bb4c:	d904      	bls.n	800bb58 <f_lseek+0x142>
				ofs = fp->fsize;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb54:	68db      	ldr	r3, [r3, #12]
 800bb56:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb5e:	461a      	mov	r2, r3
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	6093      	str	r3, [r2, #8]
			if (ofs) {
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	f000 8240 	beq.w	800bfec <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	3b01      	subs	r3, #1
 800bb70:	4619      	mov	r1, r3
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f7fd fb62 	bl	800923c <clmt_clust>
 800bb78:	4602      	mov	r2, r0
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb80:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb88:	681a      	ldr	r2, [r3, #0]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb90:	695b      	ldr	r3, [r3, #20]
 800bb92:	4619      	mov	r1, r3
 800bb94:	4610      	mov	r0, r2
 800bb96:	f7fc ffd4 	bl	8008b42 <clust2sect>
 800bb9a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800bb9c:	69bb      	ldr	r3, [r7, #24]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d106      	bne.n	800bbb0 <f_lseek+0x19a>
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bba8:	2202      	movs	r2, #2
 800bbaa:	71da      	strb	r2, [r3, #7]
 800bbac:	2302      	movs	r3, #2
 800bbae:	e21f      	b.n	800bff0 <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	3b01      	subs	r3, #1
 800bbb4:	687a      	ldr	r2, [r7, #4]
 800bbb6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bbba:	6812      	ldr	r2, [r2, #0]
 800bbbc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bbc0:	8952      	ldrh	r2, [r2, #10]
 800bbc2:	fbb3 f3f2 	udiv	r3, r3, r2
 800bbc6:	687a      	ldr	r2, [r7, #4]
 800bbc8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bbcc:	6812      	ldr	r2, [r2, #0]
 800bbce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bbd2:	7892      	ldrb	r2, [r2, #2]
 800bbd4:	3a01      	subs	r2, #1
 800bbd6:	4013      	ands	r3, r2
 800bbd8:	69ba      	ldr	r2, [r7, #24]
 800bbda:	4413      	add	r3, r2
 800bbdc:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbe4:	689b      	ldr	r3, [r3, #8]
 800bbe6:	687a      	ldr	r2, [r7, #4]
 800bbe8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bbec:	6812      	ldr	r2, [r2, #0]
 800bbee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bbf2:	8952      	ldrh	r2, [r2, #10]
 800bbf4:	fbb3 f1f2 	udiv	r1, r3, r2
 800bbf8:	fb01 f202 	mul.w	r2, r1, r2
 800bbfc:	1a9b      	subs	r3, r3, r2
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	f000 81f4 	beq.w	800bfec <f_lseek+0x5d6>
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc0a:	699b      	ldr	r3, [r3, #24]
 800bc0c:	69ba      	ldr	r2, [r7, #24]
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	f000 81ec 	beq.w	800bfec <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc1a:	799b      	ldrb	r3, [r3, #6]
 800bc1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d023      	beq.n	800bc6c <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc30:	7858      	ldrb	r0, [r3, #1]
 800bc32:	6879      	ldr	r1, [r7, #4]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc3a:	699a      	ldr	r2, [r3, #24]
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	f7fc fbc3 	bl	80083c8 <disk_write>
 800bc42:	4603      	mov	r3, r0
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d006      	beq.n	800bc56 <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc4e:	2201      	movs	r2, #1
 800bc50:	71da      	strb	r2, [r3, #7]
 800bc52:	2301      	movs	r3, #1
 800bc54:	e1cc      	b.n	800bff0 <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc5c:	799b      	ldrb	r3, [r3, #6]
 800bc5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc62:	b2da      	uxtb	r2, r3
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc6a:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc78:	7858      	ldrb	r0, [r3, #1]
 800bc7a:	6879      	ldr	r1, [r7, #4]
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	69ba      	ldr	r2, [r7, #24]
 800bc80:	f7fc fb82 	bl	8008388 <disk_read>
 800bc84:	4603      	mov	r3, r0
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d006      	beq.n	800bc98 <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc90:	2201      	movs	r2, #1
 800bc92:	71da      	strb	r2, [r3, #7]
 800bc94:	2301      	movs	r3, #1
 800bc96:	e1ab      	b.n	800bff0 <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc9e:	461a      	mov	r2, r3
 800bca0:	69bb      	ldr	r3, [r7, #24]
 800bca2:	6193      	str	r3, [r2, #24]
 800bca4:	e1a2      	b.n	800bfec <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcac:	68db      	ldr	r3, [r3, #12]
 800bcae:	683a      	ldr	r2, [r7, #0]
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	d90c      	bls.n	800bcce <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcba:	799b      	ldrb	r3, [r3, #6]
 800bcbc:	f003 0302 	and.w	r3, r3, #2
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d104      	bne.n	800bcce <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcca:	68db      	ldr	r3, [r3, #12]
 800bccc:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcd4:	689b      	ldr	r3, [r3, #8]
 800bcd6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	637b      	str	r3, [r7, #52]	; 0x34
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bce2:	461a      	mov	r2, r3
 800bce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bce6:	6093      	str	r3, [r2, #8]
		if (ofs) {
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	f000 8100 	beq.w	800bef0 <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcfc:	789b      	ldrb	r3, [r3, #2]
 800bcfe:	461a      	mov	r2, r3
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd0c:	895b      	ldrh	r3, [r3, #10]
 800bd0e:	fb02 f303 	mul.w	r3, r2, r3
 800bd12:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800bd14:	6a3b      	ldr	r3, [r7, #32]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d021      	beq.n	800bd5e <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	1e5a      	subs	r2, r3, #1
 800bd1e:	69fb      	ldr	r3, [r7, #28]
 800bd20:	fbb2 f2f3 	udiv	r2, r2, r3
 800bd24:	6a3b      	ldr	r3, [r7, #32]
 800bd26:	1e59      	subs	r1, r3, #1
 800bd28:	69fb      	ldr	r3, [r7, #28]
 800bd2a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d315      	bcc.n	800bd5e <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800bd32:	6a3b      	ldr	r3, [r7, #32]
 800bd34:	1e5a      	subs	r2, r3, #1
 800bd36:	69fb      	ldr	r3, [r7, #28]
 800bd38:	425b      	negs	r3, r3
 800bd3a:	4013      	ands	r3, r2
 800bd3c:	687a      	ldr	r2, [r7, #4]
 800bd3e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bd42:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd4a:	689b      	ldr	r3, [r3, #8]
 800bd4c:	683a      	ldr	r2, [r7, #0]
 800bd4e:	1ad3      	subs	r3, r2, r3
 800bd50:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd58:	695b      	ldr	r3, [r3, #20]
 800bd5a:	63bb      	str	r3, [r7, #56]	; 0x38
 800bd5c:	e031      	b.n	800bdc2 <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd64:	691b      	ldr	r3, [r3, #16]
 800bd66:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800bd68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d123      	bne.n	800bdb6 <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	2100      	movs	r1, #0
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f7fd f9b7 	bl	80090ec <create_chain>
 800bd7e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800bd80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd82:	2b01      	cmp	r3, #1
 800bd84:	d106      	bne.n	800bd94 <f_lseek+0x37e>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd8c:	2202      	movs	r2, #2
 800bd8e:	71da      	strb	r2, [r3, #7]
 800bd90:	2302      	movs	r3, #2
 800bd92:	e12d      	b.n	800bff0 <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800bd94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd9a:	d106      	bne.n	800bdaa <f_lseek+0x394>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bda2:	2201      	movs	r2, #1
 800bda4:	71da      	strb	r2, [r3, #7]
 800bda6:	2301      	movs	r3, #1
 800bda8:	e122      	b.n	800bff0 <f_lseek+0x5da>
					fp->sclust = clst;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdb0:	461a      	mov	r2, r3
 800bdb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdb4:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdbc:	461a      	mov	r2, r3
 800bdbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc0:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 800bdc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	f000 8093 	beq.w	800bef0 <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 800bdca:	e052      	b.n	800be72 <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdd2:	799b      	ldrb	r3, [r3, #6]
 800bdd4:	f003 0302 	and.w	r3, r3, #2
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d00e      	beq.n	800bdfa <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bde6:	4618      	mov	r0, r3
 800bde8:	f7fd f980 	bl	80090ec <create_chain>
 800bdec:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800bdee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d10b      	bne.n	800be0c <f_lseek+0x3f6>
							ofs = bcs; break;
 800bdf4:	69fb      	ldr	r3, [r7, #28]
 800bdf6:	603b      	str	r3, [r7, #0]
 800bdf8:	e03f      	b.n	800be7a <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800be04:	4618      	mov	r0, r3
 800be06:	f7fc fec1 	bl	8008b8c <get_fat>
 800be0a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800be0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be12:	d106      	bne.n	800be22 <f_lseek+0x40c>
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be1a:	2201      	movs	r2, #1
 800be1c:	71da      	strb	r2, [r3, #7]
 800be1e:	2301      	movs	r3, #1
 800be20:	e0e6      	b.n	800bff0 <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800be22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be24:	2b01      	cmp	r3, #1
 800be26:	d909      	bls.n	800be3c <f_lseek+0x426>
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be34:	695b      	ldr	r3, [r3, #20]
 800be36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be38:	429a      	cmp	r2, r3
 800be3a:	d306      	bcc.n	800be4a <f_lseek+0x434>
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be42:	2202      	movs	r2, #2
 800be44:	71da      	strb	r2, [r3, #7]
 800be46:	2302      	movs	r3, #2
 800be48:	e0d2      	b.n	800bff0 <f_lseek+0x5da>
					fp->clust = clst;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be50:	461a      	mov	r2, r3
 800be52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be54:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be5c:	689a      	ldr	r2, [r3, #8]
 800be5e:	69fb      	ldr	r3, [r7, #28]
 800be60:	4413      	add	r3, r2
 800be62:	687a      	ldr	r2, [r7, #4]
 800be64:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800be68:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 800be6a:	683a      	ldr	r2, [r7, #0]
 800be6c:	69fb      	ldr	r3, [r7, #28]
 800be6e:	1ad3      	subs	r3, r2, r3
 800be70:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800be72:	683a      	ldr	r2, [r7, #0]
 800be74:	69fb      	ldr	r3, [r7, #28]
 800be76:	429a      	cmp	r2, r3
 800be78:	d8a8      	bhi.n	800bdcc <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be80:	689a      	ldr	r2, [r3, #8]
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	4413      	add	r3, r2
 800be86:	687a      	ldr	r2, [r7, #4]
 800be88:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800be8c:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be9a:	895b      	ldrh	r3, [r3, #10]
 800be9c:	461a      	mov	r2, r3
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	fbb3 f1f2 	udiv	r1, r3, r2
 800bea4:	fb01 f202 	mul.w	r2, r1, r2
 800bea8:	1a9b      	subs	r3, r3, r2
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d020      	beq.n	800bef0 <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800beb8:	4618      	mov	r0, r3
 800beba:	f7fc fe42 	bl	8008b42 <clust2sect>
 800bebe:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800bec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d106      	bne.n	800bed4 <f_lseek+0x4be>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800becc:	2202      	movs	r2, #2
 800bece:	71da      	strb	r2, [r3, #7]
 800bed0:	2302      	movs	r3, #2
 800bed2:	e08d      	b.n	800bff0 <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bee0:	895b      	ldrh	r3, [r3, #10]
 800bee2:	461a      	mov	r2, r3
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	fbb3 f3f2 	udiv	r3, r3, r2
 800beea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800beec:	4413      	add	r3, r2
 800beee:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bef6:	689b      	ldr	r3, [r3, #8]
 800bef8:	687a      	ldr	r2, [r7, #4]
 800befa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800befe:	6812      	ldr	r2, [r2, #0]
 800bf00:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bf04:	8952      	ldrh	r2, [r2, #10]
 800bf06:	fbb3 f1f2 	udiv	r1, r3, r2
 800bf0a:	fb01 f202 	mul.w	r2, r1, r2
 800bf0e:	1a9b      	subs	r3, r3, r2
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d04e      	beq.n	800bfb2 <f_lseek+0x59c>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf1a:	699b      	ldr	r3, [r3, #24]
 800bf1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf1e:	429a      	cmp	r2, r3
 800bf20:	d047      	beq.n	800bfb2 <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf28:	799b      	ldrb	r3, [r3, #6]
 800bf2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d023      	beq.n	800bf7a <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf3e:	7858      	ldrb	r0, [r3, #1]
 800bf40:	6879      	ldr	r1, [r7, #4]
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf48:	699a      	ldr	r2, [r3, #24]
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	f7fc fa3c 	bl	80083c8 <disk_write>
 800bf50:	4603      	mov	r3, r0
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d006      	beq.n	800bf64 <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf5c:	2201      	movs	r2, #1
 800bf5e:	71da      	strb	r2, [r3, #7]
 800bf60:	2301      	movs	r3, #1
 800bf62:	e045      	b.n	800bff0 <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf6a:	799b      	ldrb	r3, [r3, #6]
 800bf6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf70:	b2da      	uxtb	r2, r3
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf78:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf86:	7858      	ldrb	r0, [r3, #1]
 800bf88:	6879      	ldr	r1, [r7, #4]
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf8e:	f7fc f9fb 	bl	8008388 <disk_read>
 800bf92:	4603      	mov	r3, r0
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d006      	beq.n	800bfa6 <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf9e:	2201      	movs	r2, #1
 800bfa0:	71da      	strb	r2, [r3, #7]
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	e024      	b.n	800bff0 <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfac:	461a      	mov	r2, r3
 800bfae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfb0:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfb8:	689a      	ldr	r2, [r3, #8]
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfc0:	68db      	ldr	r3, [r3, #12]
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d912      	bls.n	800bfec <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfcc:	689b      	ldr	r3, [r3, #8]
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bfd4:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfdc:	799b      	ldrb	r3, [r3, #6]
 800bfde:	f043 0320 	orr.w	r3, r3, #32
 800bfe2:	b2da      	uxtb	r2, r3
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfea:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800bfec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3740      	adds	r7, #64	; 0x40
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}

0800bff8 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800bffe:	af00      	add	r7, sp, #0
 800c000:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c004:	f843 0c3c 	str.w	r0, [r3, #-60]
 800c008:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c00c:	f843 1c40 	str.w	r1, [r3, #-64]
	DIR dj;
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 0);
 800c010:	f107 0120 	add.w	r1, r7, #32
 800c014:	391c      	subs	r1, #28
 800c016:	f107 0320 	add.w	r3, r7, #32
 800c01a:	3b0c      	subs	r3, #12
 800c01c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c020:	2200      	movs	r2, #0
 800c022:	4618      	mov	r0, r3
 800c024:	f7fe fb46 	bl	800a6b4 <find_volume>
 800c028:	4603      	mov	r3, r0
 800c02a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800c02e:	f102 021f 	add.w	r2, r2, #31
 800c032:	7013      	strb	r3, [r2, #0]
	if (res == FR_OK) {
 800c034:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800c038:	f103 031f 	add.w	r3, r3, #31
 800c03c:	781b      	ldrb	r3, [r3, #0]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d143      	bne.n	800c0ca <f_stat+0xd2>
		INIT_BUF(dj);
 800c042:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c046:	461a      	mov	r2, r3
 800c048:	f107 0320 	add.w	r3, r7, #32
 800c04c:	3b18      	subs	r3, #24
 800c04e:	f8c2 3fec 	str.w	r3, [r2, #4076]	; 0xfec
 800c052:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c056:	461a      	mov	r2, r3
 800c058:	4b21      	ldr	r3, [pc, #132]	; (800c0e0 <f_stat+0xe8>)
 800c05a:	f8c2 3ff4 	str.w	r3, [r2, #4084]	; 0xff4
		res = follow_path(&dj, path);	/* Follow the file path */
 800c05e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c062:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800c066:	f107 0320 	add.w	r3, r7, #32
 800c06a:	3b0c      	subs	r3, #12
 800c06c:	4611      	mov	r1, r2
 800c06e:	4618      	mov	r0, r3
 800c070:	f7fe f9f8 	bl	800a464 <follow_path>
 800c074:	4603      	mov	r3, r0
 800c076:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800c07a:	f102 021f 	add.w	r2, r2, #31
 800c07e:	7013      	strb	r3, [r2, #0]
		if (res == FR_OK) {				/* Follow completed */
 800c080:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800c084:	f103 031f 	add.w	r3, r3, #31
 800c088:	781b      	ldrb	r3, [r3, #0]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d11d      	bne.n	800c0ca <f_stat+0xd2>
			if (dj.dir) {		/* Found an object */
 800c08e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c092:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
 800c096:	2b00      	cmp	r3, #0
 800c098:	d011      	beq.n	800c0be <f_stat+0xc6>
				if (fno) get_fileinfo(&dj, fno);
 800c09a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c09e:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d011      	beq.n	800c0ca <f_stat+0xd2>
 800c0a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c0aa:	461a      	mov	r2, r3
 800c0ac:	f107 0320 	add.w	r3, r7, #32
 800c0b0:	3b0c      	subs	r3, #12
 800c0b2:	f852 1c40 	ldr.w	r1, [r2, #-64]
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f7fd ff42 	bl	8009f40 <get_fileinfo>
 800c0bc:	e005      	b.n	800c0ca <f_stat+0xd2>
			} else {			/* It is root directory */
				res = FR_INVALID_NAME;
 800c0be:	2306      	movs	r3, #6
 800c0c0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800c0c4:	f102 021f 	add.w	r2, r2, #31
 800c0c8:	7013      	strb	r3, [r2, #0]
			}
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
 800c0ca:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800c0ce:	f103 031f 	add.w	r3, r3, #31
 800c0d2:	781b      	ldrb	r3, [r3, #0]
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}
 800c0de:	bf00      	nop
 800c0e0:	20004098 	.word	0x20004098

0800c0e4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b087      	sub	sp, #28
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	60f8      	str	r0, [r7, #12]
 800c0ec:	60b9      	str	r1, [r7, #8]
 800c0ee:	4613      	mov	r3, r2
 800c0f0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800c0fa:	4b1f      	ldr	r3, [pc, #124]	; (800c178 <FATFS_LinkDriverEx+0x94>)
 800c0fc:	7a5b      	ldrb	r3, [r3, #9]
 800c0fe:	b2db      	uxtb	r3, r3
 800c100:	2b01      	cmp	r3, #1
 800c102:	d831      	bhi.n	800c168 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c104:	4b1c      	ldr	r3, [pc, #112]	; (800c178 <FATFS_LinkDriverEx+0x94>)
 800c106:	7a5b      	ldrb	r3, [r3, #9]
 800c108:	b2db      	uxtb	r3, r3
 800c10a:	461a      	mov	r2, r3
 800c10c:	4b1a      	ldr	r3, [pc, #104]	; (800c178 <FATFS_LinkDriverEx+0x94>)
 800c10e:	2100      	movs	r1, #0
 800c110:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800c112:	4b19      	ldr	r3, [pc, #100]	; (800c178 <FATFS_LinkDriverEx+0x94>)
 800c114:	7a5b      	ldrb	r3, [r3, #9]
 800c116:	b2db      	uxtb	r3, r3
 800c118:	4a17      	ldr	r2, [pc, #92]	; (800c178 <FATFS_LinkDriverEx+0x94>)
 800c11a:	009b      	lsls	r3, r3, #2
 800c11c:	4413      	add	r3, r2
 800c11e:	68fa      	ldr	r2, [r7, #12]
 800c120:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800c122:	4b15      	ldr	r3, [pc, #84]	; (800c178 <FATFS_LinkDriverEx+0x94>)
 800c124:	7a5b      	ldrb	r3, [r3, #9]
 800c126:	b2db      	uxtb	r3, r3
 800c128:	461a      	mov	r2, r3
 800c12a:	4b13      	ldr	r3, [pc, #76]	; (800c178 <FATFS_LinkDriverEx+0x94>)
 800c12c:	4413      	add	r3, r2
 800c12e:	79fa      	ldrb	r2, [r7, #7]
 800c130:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c132:	4b11      	ldr	r3, [pc, #68]	; (800c178 <FATFS_LinkDriverEx+0x94>)
 800c134:	7a5b      	ldrb	r3, [r3, #9]
 800c136:	b2db      	uxtb	r3, r3
 800c138:	1c5a      	adds	r2, r3, #1
 800c13a:	b2d1      	uxtb	r1, r2
 800c13c:	4a0e      	ldr	r2, [pc, #56]	; (800c178 <FATFS_LinkDriverEx+0x94>)
 800c13e:	7251      	strb	r1, [r2, #9]
 800c140:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c142:	7dbb      	ldrb	r3, [r7, #22]
 800c144:	3330      	adds	r3, #48	; 0x30
 800c146:	b2da      	uxtb	r2, r3
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	3301      	adds	r3, #1
 800c150:	223a      	movs	r2, #58	; 0x3a
 800c152:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	3302      	adds	r3, #2
 800c158:	222f      	movs	r2, #47	; 0x2f
 800c15a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	3303      	adds	r3, #3
 800c160:	2200      	movs	r2, #0
 800c162:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c164:	2300      	movs	r3, #0
 800c166:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800c168:	7dfb      	ldrb	r3, [r7, #23]
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	371c      	adds	r7, #28
 800c16e:	46bd      	mov	sp, r7
 800c170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c174:	4770      	bx	lr
 800c176:	bf00      	nop
 800c178:	20004298 	.word	0x20004298

0800c17c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b082      	sub	sp, #8
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
 800c184:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c186:	2200      	movs	r2, #0
 800c188:	6839      	ldr	r1, [r7, #0]
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f7ff ffaa 	bl	800c0e4 <FATFS_LinkDriverEx>
 800c190:	4603      	mov	r3, r0
}
 800c192:	4618      	mov	r0, r3
 800c194:	3708      	adds	r7, #8
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}
	...

0800c19c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800c19c:	b480      	push	{r7}
 800c19e:	b085      	sub	sp, #20
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	6039      	str	r1, [r7, #0]
 800c1a6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800c1a8:	88fb      	ldrh	r3, [r7, #6]
 800c1aa:	2b7f      	cmp	r3, #127	; 0x7f
 800c1ac:	d802      	bhi.n	800c1b4 <ff_convert+0x18>
		c = chr;
 800c1ae:	88fb      	ldrh	r3, [r7, #6]
 800c1b0:	81fb      	strh	r3, [r7, #14]
 800c1b2:	e025      	b.n	800c200 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d00b      	beq.n	800c1d2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800c1ba:	88fb      	ldrh	r3, [r7, #6]
 800c1bc:	2bff      	cmp	r3, #255	; 0xff
 800c1be:	d805      	bhi.n	800c1cc <ff_convert+0x30>
 800c1c0:	88fb      	ldrh	r3, [r7, #6]
 800c1c2:	3b80      	subs	r3, #128	; 0x80
 800c1c4:	4a12      	ldr	r2, [pc, #72]	; (800c210 <ff_convert+0x74>)
 800c1c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c1ca:	e000      	b.n	800c1ce <ff_convert+0x32>
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	81fb      	strh	r3, [r7, #14]
 800c1d0:	e016      	b.n	800c200 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	81fb      	strh	r3, [r7, #14]
 800c1d6:	e009      	b.n	800c1ec <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800c1d8:	89fb      	ldrh	r3, [r7, #14]
 800c1da:	4a0d      	ldr	r2, [pc, #52]	; (800c210 <ff_convert+0x74>)
 800c1dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c1e0:	88fa      	ldrh	r2, [r7, #6]
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	d006      	beq.n	800c1f4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800c1e6:	89fb      	ldrh	r3, [r7, #14]
 800c1e8:	3301      	adds	r3, #1
 800c1ea:	81fb      	strh	r3, [r7, #14]
 800c1ec:	89fb      	ldrh	r3, [r7, #14]
 800c1ee:	2b7f      	cmp	r3, #127	; 0x7f
 800c1f0:	d9f2      	bls.n	800c1d8 <ff_convert+0x3c>
 800c1f2:	e000      	b.n	800c1f6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800c1f4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800c1f6:	89fb      	ldrh	r3, [r7, #14]
 800c1f8:	3380      	adds	r3, #128	; 0x80
 800c1fa:	b29b      	uxth	r3, r3
 800c1fc:	b2db      	uxtb	r3, r3
 800c1fe:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800c200:	89fb      	ldrh	r3, [r7, #14]
}
 800c202:	4618      	mov	r0, r3
 800c204:	3714      	adds	r7, #20
 800c206:	46bd      	mov	sp, r7
 800c208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20c:	4770      	bx	lr
 800c20e:	bf00      	nop
 800c210:	0800d260 	.word	0x0800d260

0800c214 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800c214:	b480      	push	{r7}
 800c216:	b085      	sub	sp, #20
 800c218:	af00      	add	r7, sp, #0
 800c21a:	4603      	mov	r3, r0
 800c21c:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800c21e:	2300      	movs	r3, #0
 800c220:	60fb      	str	r3, [r7, #12]
 800c222:	e002      	b.n	800c22a <ff_wtoupper+0x16>
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	3301      	adds	r3, #1
 800c228:	60fb      	str	r3, [r7, #12]
 800c22a:	4a0f      	ldr	r2, [pc, #60]	; (800c268 <ff_wtoupper+0x54>)
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d006      	beq.n	800c244 <ff_wtoupper+0x30>
 800c236:	4a0c      	ldr	r2, [pc, #48]	; (800c268 <ff_wtoupper+0x54>)
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c23e:	88fa      	ldrh	r2, [r7, #6]
 800c240:	429a      	cmp	r2, r3
 800c242:	d1ef      	bne.n	800c224 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800c244:	4a08      	ldr	r2, [pc, #32]	; (800c268 <ff_wtoupper+0x54>)
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d004      	beq.n	800c25a <ff_wtoupper+0x46>
 800c250:	4a06      	ldr	r2, [pc, #24]	; (800c26c <ff_wtoupper+0x58>)
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c258:	e000      	b.n	800c25c <ff_wtoupper+0x48>
 800c25a:	88fb      	ldrh	r3, [r7, #6]
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3714      	adds	r7, #20
 800c260:	46bd      	mov	sp, r7
 800c262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c266:	4770      	bx	lr
 800c268:	0800d360 	.word	0x0800d360
 800c26c:	0800d540 	.word	0x0800d540

0800c270 <__errno>:
 800c270:	4b01      	ldr	r3, [pc, #4]	; (800c278 <__errno+0x8>)
 800c272:	6818      	ldr	r0, [r3, #0]
 800c274:	4770      	bx	lr
 800c276:	bf00      	nop
 800c278:	20000024 	.word	0x20000024

0800c27c <__libc_init_array>:
 800c27c:	b570      	push	{r4, r5, r6, lr}
 800c27e:	4d0d      	ldr	r5, [pc, #52]	; (800c2b4 <__libc_init_array+0x38>)
 800c280:	4c0d      	ldr	r4, [pc, #52]	; (800c2b8 <__libc_init_array+0x3c>)
 800c282:	1b64      	subs	r4, r4, r5
 800c284:	10a4      	asrs	r4, r4, #2
 800c286:	2600      	movs	r6, #0
 800c288:	42a6      	cmp	r6, r4
 800c28a:	d109      	bne.n	800c2a0 <__libc_init_array+0x24>
 800c28c:	4d0b      	ldr	r5, [pc, #44]	; (800c2bc <__libc_init_array+0x40>)
 800c28e:	4c0c      	ldr	r4, [pc, #48]	; (800c2c0 <__libc_init_array+0x44>)
 800c290:	f000 fcb2 	bl	800cbf8 <_init>
 800c294:	1b64      	subs	r4, r4, r5
 800c296:	10a4      	asrs	r4, r4, #2
 800c298:	2600      	movs	r6, #0
 800c29a:	42a6      	cmp	r6, r4
 800c29c:	d105      	bne.n	800c2aa <__libc_init_array+0x2e>
 800c29e:	bd70      	pop	{r4, r5, r6, pc}
 800c2a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2a4:	4798      	blx	r3
 800c2a6:	3601      	adds	r6, #1
 800c2a8:	e7ee      	b.n	800c288 <__libc_init_array+0xc>
 800c2aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2ae:	4798      	blx	r3
 800c2b0:	3601      	adds	r6, #1
 800c2b2:	e7f2      	b.n	800c29a <__libc_init_array+0x1e>
 800c2b4:	0800d754 	.word	0x0800d754
 800c2b8:	0800d754 	.word	0x0800d754
 800c2bc:	0800d754 	.word	0x0800d754
 800c2c0:	0800d758 	.word	0x0800d758

0800c2c4 <malloc>:
 800c2c4:	4b02      	ldr	r3, [pc, #8]	; (800c2d0 <malloc+0xc>)
 800c2c6:	4601      	mov	r1, r0
 800c2c8:	6818      	ldr	r0, [r3, #0]
 800c2ca:	f000 b87f 	b.w	800c3cc <_malloc_r>
 800c2ce:	bf00      	nop
 800c2d0:	20000024 	.word	0x20000024

0800c2d4 <free>:
 800c2d4:	4b02      	ldr	r3, [pc, #8]	; (800c2e0 <free+0xc>)
 800c2d6:	4601      	mov	r1, r0
 800c2d8:	6818      	ldr	r0, [r3, #0]
 800c2da:	f000 b80b 	b.w	800c2f4 <_free_r>
 800c2de:	bf00      	nop
 800c2e0:	20000024 	.word	0x20000024

0800c2e4 <memset>:
 800c2e4:	4402      	add	r2, r0
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	4293      	cmp	r3, r2
 800c2ea:	d100      	bne.n	800c2ee <memset+0xa>
 800c2ec:	4770      	bx	lr
 800c2ee:	f803 1b01 	strb.w	r1, [r3], #1
 800c2f2:	e7f9      	b.n	800c2e8 <memset+0x4>

0800c2f4 <_free_r>:
 800c2f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c2f6:	2900      	cmp	r1, #0
 800c2f8:	d044      	beq.n	800c384 <_free_r+0x90>
 800c2fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2fe:	9001      	str	r0, [sp, #4]
 800c300:	2b00      	cmp	r3, #0
 800c302:	f1a1 0404 	sub.w	r4, r1, #4
 800c306:	bfb8      	it	lt
 800c308:	18e4      	addlt	r4, r4, r3
 800c30a:	f000 f917 	bl	800c53c <__malloc_lock>
 800c30e:	4a1e      	ldr	r2, [pc, #120]	; (800c388 <_free_r+0x94>)
 800c310:	9801      	ldr	r0, [sp, #4]
 800c312:	6813      	ldr	r3, [r2, #0]
 800c314:	b933      	cbnz	r3, 800c324 <_free_r+0x30>
 800c316:	6063      	str	r3, [r4, #4]
 800c318:	6014      	str	r4, [r2, #0]
 800c31a:	b003      	add	sp, #12
 800c31c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c320:	f000 b912 	b.w	800c548 <__malloc_unlock>
 800c324:	42a3      	cmp	r3, r4
 800c326:	d908      	bls.n	800c33a <_free_r+0x46>
 800c328:	6825      	ldr	r5, [r4, #0]
 800c32a:	1961      	adds	r1, r4, r5
 800c32c:	428b      	cmp	r3, r1
 800c32e:	bf01      	itttt	eq
 800c330:	6819      	ldreq	r1, [r3, #0]
 800c332:	685b      	ldreq	r3, [r3, #4]
 800c334:	1949      	addeq	r1, r1, r5
 800c336:	6021      	streq	r1, [r4, #0]
 800c338:	e7ed      	b.n	800c316 <_free_r+0x22>
 800c33a:	461a      	mov	r2, r3
 800c33c:	685b      	ldr	r3, [r3, #4]
 800c33e:	b10b      	cbz	r3, 800c344 <_free_r+0x50>
 800c340:	42a3      	cmp	r3, r4
 800c342:	d9fa      	bls.n	800c33a <_free_r+0x46>
 800c344:	6811      	ldr	r1, [r2, #0]
 800c346:	1855      	adds	r5, r2, r1
 800c348:	42a5      	cmp	r5, r4
 800c34a:	d10b      	bne.n	800c364 <_free_r+0x70>
 800c34c:	6824      	ldr	r4, [r4, #0]
 800c34e:	4421      	add	r1, r4
 800c350:	1854      	adds	r4, r2, r1
 800c352:	42a3      	cmp	r3, r4
 800c354:	6011      	str	r1, [r2, #0]
 800c356:	d1e0      	bne.n	800c31a <_free_r+0x26>
 800c358:	681c      	ldr	r4, [r3, #0]
 800c35a:	685b      	ldr	r3, [r3, #4]
 800c35c:	6053      	str	r3, [r2, #4]
 800c35e:	4421      	add	r1, r4
 800c360:	6011      	str	r1, [r2, #0]
 800c362:	e7da      	b.n	800c31a <_free_r+0x26>
 800c364:	d902      	bls.n	800c36c <_free_r+0x78>
 800c366:	230c      	movs	r3, #12
 800c368:	6003      	str	r3, [r0, #0]
 800c36a:	e7d6      	b.n	800c31a <_free_r+0x26>
 800c36c:	6825      	ldr	r5, [r4, #0]
 800c36e:	1961      	adds	r1, r4, r5
 800c370:	428b      	cmp	r3, r1
 800c372:	bf04      	itt	eq
 800c374:	6819      	ldreq	r1, [r3, #0]
 800c376:	685b      	ldreq	r3, [r3, #4]
 800c378:	6063      	str	r3, [r4, #4]
 800c37a:	bf04      	itt	eq
 800c37c:	1949      	addeq	r1, r1, r5
 800c37e:	6021      	streq	r1, [r4, #0]
 800c380:	6054      	str	r4, [r2, #4]
 800c382:	e7ca      	b.n	800c31a <_free_r+0x26>
 800c384:	b003      	add	sp, #12
 800c386:	bd30      	pop	{r4, r5, pc}
 800c388:	200042a4 	.word	0x200042a4

0800c38c <sbrk_aligned>:
 800c38c:	b570      	push	{r4, r5, r6, lr}
 800c38e:	4e0e      	ldr	r6, [pc, #56]	; (800c3c8 <sbrk_aligned+0x3c>)
 800c390:	460c      	mov	r4, r1
 800c392:	6831      	ldr	r1, [r6, #0]
 800c394:	4605      	mov	r5, r0
 800c396:	b911      	cbnz	r1, 800c39e <sbrk_aligned+0x12>
 800c398:	f000 f88c 	bl	800c4b4 <_sbrk_r>
 800c39c:	6030      	str	r0, [r6, #0]
 800c39e:	4621      	mov	r1, r4
 800c3a0:	4628      	mov	r0, r5
 800c3a2:	f000 f887 	bl	800c4b4 <_sbrk_r>
 800c3a6:	1c43      	adds	r3, r0, #1
 800c3a8:	d00a      	beq.n	800c3c0 <sbrk_aligned+0x34>
 800c3aa:	1cc4      	adds	r4, r0, #3
 800c3ac:	f024 0403 	bic.w	r4, r4, #3
 800c3b0:	42a0      	cmp	r0, r4
 800c3b2:	d007      	beq.n	800c3c4 <sbrk_aligned+0x38>
 800c3b4:	1a21      	subs	r1, r4, r0
 800c3b6:	4628      	mov	r0, r5
 800c3b8:	f000 f87c 	bl	800c4b4 <_sbrk_r>
 800c3bc:	3001      	adds	r0, #1
 800c3be:	d101      	bne.n	800c3c4 <sbrk_aligned+0x38>
 800c3c0:	f04f 34ff 	mov.w	r4, #4294967295
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	bd70      	pop	{r4, r5, r6, pc}
 800c3c8:	200042a8 	.word	0x200042a8

0800c3cc <_malloc_r>:
 800c3cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3d0:	1ccd      	adds	r5, r1, #3
 800c3d2:	f025 0503 	bic.w	r5, r5, #3
 800c3d6:	3508      	adds	r5, #8
 800c3d8:	2d0c      	cmp	r5, #12
 800c3da:	bf38      	it	cc
 800c3dc:	250c      	movcc	r5, #12
 800c3de:	2d00      	cmp	r5, #0
 800c3e0:	4607      	mov	r7, r0
 800c3e2:	db01      	blt.n	800c3e8 <_malloc_r+0x1c>
 800c3e4:	42a9      	cmp	r1, r5
 800c3e6:	d905      	bls.n	800c3f4 <_malloc_r+0x28>
 800c3e8:	230c      	movs	r3, #12
 800c3ea:	603b      	str	r3, [r7, #0]
 800c3ec:	2600      	movs	r6, #0
 800c3ee:	4630      	mov	r0, r6
 800c3f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3f4:	4e2e      	ldr	r6, [pc, #184]	; (800c4b0 <_malloc_r+0xe4>)
 800c3f6:	f000 f8a1 	bl	800c53c <__malloc_lock>
 800c3fa:	6833      	ldr	r3, [r6, #0]
 800c3fc:	461c      	mov	r4, r3
 800c3fe:	bb34      	cbnz	r4, 800c44e <_malloc_r+0x82>
 800c400:	4629      	mov	r1, r5
 800c402:	4638      	mov	r0, r7
 800c404:	f7ff ffc2 	bl	800c38c <sbrk_aligned>
 800c408:	1c43      	adds	r3, r0, #1
 800c40a:	4604      	mov	r4, r0
 800c40c:	d14d      	bne.n	800c4aa <_malloc_r+0xde>
 800c40e:	6834      	ldr	r4, [r6, #0]
 800c410:	4626      	mov	r6, r4
 800c412:	2e00      	cmp	r6, #0
 800c414:	d140      	bne.n	800c498 <_malloc_r+0xcc>
 800c416:	6823      	ldr	r3, [r4, #0]
 800c418:	4631      	mov	r1, r6
 800c41a:	4638      	mov	r0, r7
 800c41c:	eb04 0803 	add.w	r8, r4, r3
 800c420:	f000 f848 	bl	800c4b4 <_sbrk_r>
 800c424:	4580      	cmp	r8, r0
 800c426:	d13a      	bne.n	800c49e <_malloc_r+0xd2>
 800c428:	6821      	ldr	r1, [r4, #0]
 800c42a:	3503      	adds	r5, #3
 800c42c:	1a6d      	subs	r5, r5, r1
 800c42e:	f025 0503 	bic.w	r5, r5, #3
 800c432:	3508      	adds	r5, #8
 800c434:	2d0c      	cmp	r5, #12
 800c436:	bf38      	it	cc
 800c438:	250c      	movcc	r5, #12
 800c43a:	4629      	mov	r1, r5
 800c43c:	4638      	mov	r0, r7
 800c43e:	f7ff ffa5 	bl	800c38c <sbrk_aligned>
 800c442:	3001      	adds	r0, #1
 800c444:	d02b      	beq.n	800c49e <_malloc_r+0xd2>
 800c446:	6823      	ldr	r3, [r4, #0]
 800c448:	442b      	add	r3, r5
 800c44a:	6023      	str	r3, [r4, #0]
 800c44c:	e00e      	b.n	800c46c <_malloc_r+0xa0>
 800c44e:	6822      	ldr	r2, [r4, #0]
 800c450:	1b52      	subs	r2, r2, r5
 800c452:	d41e      	bmi.n	800c492 <_malloc_r+0xc6>
 800c454:	2a0b      	cmp	r2, #11
 800c456:	d916      	bls.n	800c486 <_malloc_r+0xba>
 800c458:	1961      	adds	r1, r4, r5
 800c45a:	42a3      	cmp	r3, r4
 800c45c:	6025      	str	r5, [r4, #0]
 800c45e:	bf18      	it	ne
 800c460:	6059      	strne	r1, [r3, #4]
 800c462:	6863      	ldr	r3, [r4, #4]
 800c464:	bf08      	it	eq
 800c466:	6031      	streq	r1, [r6, #0]
 800c468:	5162      	str	r2, [r4, r5]
 800c46a:	604b      	str	r3, [r1, #4]
 800c46c:	4638      	mov	r0, r7
 800c46e:	f104 060b 	add.w	r6, r4, #11
 800c472:	f000 f869 	bl	800c548 <__malloc_unlock>
 800c476:	f026 0607 	bic.w	r6, r6, #7
 800c47a:	1d23      	adds	r3, r4, #4
 800c47c:	1af2      	subs	r2, r6, r3
 800c47e:	d0b6      	beq.n	800c3ee <_malloc_r+0x22>
 800c480:	1b9b      	subs	r3, r3, r6
 800c482:	50a3      	str	r3, [r4, r2]
 800c484:	e7b3      	b.n	800c3ee <_malloc_r+0x22>
 800c486:	6862      	ldr	r2, [r4, #4]
 800c488:	42a3      	cmp	r3, r4
 800c48a:	bf0c      	ite	eq
 800c48c:	6032      	streq	r2, [r6, #0]
 800c48e:	605a      	strne	r2, [r3, #4]
 800c490:	e7ec      	b.n	800c46c <_malloc_r+0xa0>
 800c492:	4623      	mov	r3, r4
 800c494:	6864      	ldr	r4, [r4, #4]
 800c496:	e7b2      	b.n	800c3fe <_malloc_r+0x32>
 800c498:	4634      	mov	r4, r6
 800c49a:	6876      	ldr	r6, [r6, #4]
 800c49c:	e7b9      	b.n	800c412 <_malloc_r+0x46>
 800c49e:	230c      	movs	r3, #12
 800c4a0:	603b      	str	r3, [r7, #0]
 800c4a2:	4638      	mov	r0, r7
 800c4a4:	f000 f850 	bl	800c548 <__malloc_unlock>
 800c4a8:	e7a1      	b.n	800c3ee <_malloc_r+0x22>
 800c4aa:	6025      	str	r5, [r4, #0]
 800c4ac:	e7de      	b.n	800c46c <_malloc_r+0xa0>
 800c4ae:	bf00      	nop
 800c4b0:	200042a4 	.word	0x200042a4

0800c4b4 <_sbrk_r>:
 800c4b4:	b538      	push	{r3, r4, r5, lr}
 800c4b6:	4d06      	ldr	r5, [pc, #24]	; (800c4d0 <_sbrk_r+0x1c>)
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	4604      	mov	r4, r0
 800c4bc:	4608      	mov	r0, r1
 800c4be:	602b      	str	r3, [r5, #0]
 800c4c0:	f7f5 fb40 	bl	8001b44 <_sbrk>
 800c4c4:	1c43      	adds	r3, r0, #1
 800c4c6:	d102      	bne.n	800c4ce <_sbrk_r+0x1a>
 800c4c8:	682b      	ldr	r3, [r5, #0]
 800c4ca:	b103      	cbz	r3, 800c4ce <_sbrk_r+0x1a>
 800c4cc:	6023      	str	r3, [r4, #0]
 800c4ce:	bd38      	pop	{r3, r4, r5, pc}
 800c4d0:	200042ac 	.word	0x200042ac

0800c4d4 <siprintf>:
 800c4d4:	b40e      	push	{r1, r2, r3}
 800c4d6:	b500      	push	{lr}
 800c4d8:	b09c      	sub	sp, #112	; 0x70
 800c4da:	ab1d      	add	r3, sp, #116	; 0x74
 800c4dc:	9002      	str	r0, [sp, #8]
 800c4de:	9006      	str	r0, [sp, #24]
 800c4e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c4e4:	4809      	ldr	r0, [pc, #36]	; (800c50c <siprintf+0x38>)
 800c4e6:	9107      	str	r1, [sp, #28]
 800c4e8:	9104      	str	r1, [sp, #16]
 800c4ea:	4909      	ldr	r1, [pc, #36]	; (800c510 <siprintf+0x3c>)
 800c4ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4f0:	9105      	str	r1, [sp, #20]
 800c4f2:	6800      	ldr	r0, [r0, #0]
 800c4f4:	9301      	str	r3, [sp, #4]
 800c4f6:	a902      	add	r1, sp, #8
 800c4f8:	f000 f888 	bl	800c60c <_svfiprintf_r>
 800c4fc:	9b02      	ldr	r3, [sp, #8]
 800c4fe:	2200      	movs	r2, #0
 800c500:	701a      	strb	r2, [r3, #0]
 800c502:	b01c      	add	sp, #112	; 0x70
 800c504:	f85d eb04 	ldr.w	lr, [sp], #4
 800c508:	b003      	add	sp, #12
 800c50a:	4770      	bx	lr
 800c50c:	20000024 	.word	0x20000024
 800c510:	ffff0208 	.word	0xffff0208

0800c514 <strncmp>:
 800c514:	b510      	push	{r4, lr}
 800c516:	b17a      	cbz	r2, 800c538 <strncmp+0x24>
 800c518:	4603      	mov	r3, r0
 800c51a:	3901      	subs	r1, #1
 800c51c:	1884      	adds	r4, r0, r2
 800c51e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c522:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c526:	4290      	cmp	r0, r2
 800c528:	d101      	bne.n	800c52e <strncmp+0x1a>
 800c52a:	42a3      	cmp	r3, r4
 800c52c:	d101      	bne.n	800c532 <strncmp+0x1e>
 800c52e:	1a80      	subs	r0, r0, r2
 800c530:	bd10      	pop	{r4, pc}
 800c532:	2800      	cmp	r0, #0
 800c534:	d1f3      	bne.n	800c51e <strncmp+0xa>
 800c536:	e7fa      	b.n	800c52e <strncmp+0x1a>
 800c538:	4610      	mov	r0, r2
 800c53a:	e7f9      	b.n	800c530 <strncmp+0x1c>

0800c53c <__malloc_lock>:
 800c53c:	4801      	ldr	r0, [pc, #4]	; (800c544 <__malloc_lock+0x8>)
 800c53e:	f000 baf9 	b.w	800cb34 <__retarget_lock_acquire_recursive>
 800c542:	bf00      	nop
 800c544:	200042b0 	.word	0x200042b0

0800c548 <__malloc_unlock>:
 800c548:	4801      	ldr	r0, [pc, #4]	; (800c550 <__malloc_unlock+0x8>)
 800c54a:	f000 baf4 	b.w	800cb36 <__retarget_lock_release_recursive>
 800c54e:	bf00      	nop
 800c550:	200042b0 	.word	0x200042b0

0800c554 <__ssputs_r>:
 800c554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c558:	688e      	ldr	r6, [r1, #8]
 800c55a:	429e      	cmp	r6, r3
 800c55c:	4682      	mov	sl, r0
 800c55e:	460c      	mov	r4, r1
 800c560:	4690      	mov	r8, r2
 800c562:	461f      	mov	r7, r3
 800c564:	d838      	bhi.n	800c5d8 <__ssputs_r+0x84>
 800c566:	898a      	ldrh	r2, [r1, #12]
 800c568:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c56c:	d032      	beq.n	800c5d4 <__ssputs_r+0x80>
 800c56e:	6825      	ldr	r5, [r4, #0]
 800c570:	6909      	ldr	r1, [r1, #16]
 800c572:	eba5 0901 	sub.w	r9, r5, r1
 800c576:	6965      	ldr	r5, [r4, #20]
 800c578:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c57c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c580:	3301      	adds	r3, #1
 800c582:	444b      	add	r3, r9
 800c584:	106d      	asrs	r5, r5, #1
 800c586:	429d      	cmp	r5, r3
 800c588:	bf38      	it	cc
 800c58a:	461d      	movcc	r5, r3
 800c58c:	0553      	lsls	r3, r2, #21
 800c58e:	d531      	bpl.n	800c5f4 <__ssputs_r+0xa0>
 800c590:	4629      	mov	r1, r5
 800c592:	f7ff ff1b 	bl	800c3cc <_malloc_r>
 800c596:	4606      	mov	r6, r0
 800c598:	b950      	cbnz	r0, 800c5b0 <__ssputs_r+0x5c>
 800c59a:	230c      	movs	r3, #12
 800c59c:	f8ca 3000 	str.w	r3, [sl]
 800c5a0:	89a3      	ldrh	r3, [r4, #12]
 800c5a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5a6:	81a3      	strh	r3, [r4, #12]
 800c5a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c5ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5b0:	6921      	ldr	r1, [r4, #16]
 800c5b2:	464a      	mov	r2, r9
 800c5b4:	f000 fac0 	bl	800cb38 <memcpy>
 800c5b8:	89a3      	ldrh	r3, [r4, #12]
 800c5ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c5be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5c2:	81a3      	strh	r3, [r4, #12]
 800c5c4:	6126      	str	r6, [r4, #16]
 800c5c6:	6165      	str	r5, [r4, #20]
 800c5c8:	444e      	add	r6, r9
 800c5ca:	eba5 0509 	sub.w	r5, r5, r9
 800c5ce:	6026      	str	r6, [r4, #0]
 800c5d0:	60a5      	str	r5, [r4, #8]
 800c5d2:	463e      	mov	r6, r7
 800c5d4:	42be      	cmp	r6, r7
 800c5d6:	d900      	bls.n	800c5da <__ssputs_r+0x86>
 800c5d8:	463e      	mov	r6, r7
 800c5da:	6820      	ldr	r0, [r4, #0]
 800c5dc:	4632      	mov	r2, r6
 800c5de:	4641      	mov	r1, r8
 800c5e0:	f000 fab8 	bl	800cb54 <memmove>
 800c5e4:	68a3      	ldr	r3, [r4, #8]
 800c5e6:	1b9b      	subs	r3, r3, r6
 800c5e8:	60a3      	str	r3, [r4, #8]
 800c5ea:	6823      	ldr	r3, [r4, #0]
 800c5ec:	4433      	add	r3, r6
 800c5ee:	6023      	str	r3, [r4, #0]
 800c5f0:	2000      	movs	r0, #0
 800c5f2:	e7db      	b.n	800c5ac <__ssputs_r+0x58>
 800c5f4:	462a      	mov	r2, r5
 800c5f6:	f000 fac7 	bl	800cb88 <_realloc_r>
 800c5fa:	4606      	mov	r6, r0
 800c5fc:	2800      	cmp	r0, #0
 800c5fe:	d1e1      	bne.n	800c5c4 <__ssputs_r+0x70>
 800c600:	6921      	ldr	r1, [r4, #16]
 800c602:	4650      	mov	r0, sl
 800c604:	f7ff fe76 	bl	800c2f4 <_free_r>
 800c608:	e7c7      	b.n	800c59a <__ssputs_r+0x46>
	...

0800c60c <_svfiprintf_r>:
 800c60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c610:	4698      	mov	r8, r3
 800c612:	898b      	ldrh	r3, [r1, #12]
 800c614:	061b      	lsls	r3, r3, #24
 800c616:	b09d      	sub	sp, #116	; 0x74
 800c618:	4607      	mov	r7, r0
 800c61a:	460d      	mov	r5, r1
 800c61c:	4614      	mov	r4, r2
 800c61e:	d50e      	bpl.n	800c63e <_svfiprintf_r+0x32>
 800c620:	690b      	ldr	r3, [r1, #16]
 800c622:	b963      	cbnz	r3, 800c63e <_svfiprintf_r+0x32>
 800c624:	2140      	movs	r1, #64	; 0x40
 800c626:	f7ff fed1 	bl	800c3cc <_malloc_r>
 800c62a:	6028      	str	r0, [r5, #0]
 800c62c:	6128      	str	r0, [r5, #16]
 800c62e:	b920      	cbnz	r0, 800c63a <_svfiprintf_r+0x2e>
 800c630:	230c      	movs	r3, #12
 800c632:	603b      	str	r3, [r7, #0]
 800c634:	f04f 30ff 	mov.w	r0, #4294967295
 800c638:	e0d1      	b.n	800c7de <_svfiprintf_r+0x1d2>
 800c63a:	2340      	movs	r3, #64	; 0x40
 800c63c:	616b      	str	r3, [r5, #20]
 800c63e:	2300      	movs	r3, #0
 800c640:	9309      	str	r3, [sp, #36]	; 0x24
 800c642:	2320      	movs	r3, #32
 800c644:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c648:	f8cd 800c 	str.w	r8, [sp, #12]
 800c64c:	2330      	movs	r3, #48	; 0x30
 800c64e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c7f8 <_svfiprintf_r+0x1ec>
 800c652:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c656:	f04f 0901 	mov.w	r9, #1
 800c65a:	4623      	mov	r3, r4
 800c65c:	469a      	mov	sl, r3
 800c65e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c662:	b10a      	cbz	r2, 800c668 <_svfiprintf_r+0x5c>
 800c664:	2a25      	cmp	r2, #37	; 0x25
 800c666:	d1f9      	bne.n	800c65c <_svfiprintf_r+0x50>
 800c668:	ebba 0b04 	subs.w	fp, sl, r4
 800c66c:	d00b      	beq.n	800c686 <_svfiprintf_r+0x7a>
 800c66e:	465b      	mov	r3, fp
 800c670:	4622      	mov	r2, r4
 800c672:	4629      	mov	r1, r5
 800c674:	4638      	mov	r0, r7
 800c676:	f7ff ff6d 	bl	800c554 <__ssputs_r>
 800c67a:	3001      	adds	r0, #1
 800c67c:	f000 80aa 	beq.w	800c7d4 <_svfiprintf_r+0x1c8>
 800c680:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c682:	445a      	add	r2, fp
 800c684:	9209      	str	r2, [sp, #36]	; 0x24
 800c686:	f89a 3000 	ldrb.w	r3, [sl]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	f000 80a2 	beq.w	800c7d4 <_svfiprintf_r+0x1c8>
 800c690:	2300      	movs	r3, #0
 800c692:	f04f 32ff 	mov.w	r2, #4294967295
 800c696:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c69a:	f10a 0a01 	add.w	sl, sl, #1
 800c69e:	9304      	str	r3, [sp, #16]
 800c6a0:	9307      	str	r3, [sp, #28]
 800c6a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6a6:	931a      	str	r3, [sp, #104]	; 0x68
 800c6a8:	4654      	mov	r4, sl
 800c6aa:	2205      	movs	r2, #5
 800c6ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6b0:	4851      	ldr	r0, [pc, #324]	; (800c7f8 <_svfiprintf_r+0x1ec>)
 800c6b2:	f7f3 fd9d 	bl	80001f0 <memchr>
 800c6b6:	9a04      	ldr	r2, [sp, #16]
 800c6b8:	b9d8      	cbnz	r0, 800c6f2 <_svfiprintf_r+0xe6>
 800c6ba:	06d0      	lsls	r0, r2, #27
 800c6bc:	bf44      	itt	mi
 800c6be:	2320      	movmi	r3, #32
 800c6c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6c4:	0711      	lsls	r1, r2, #28
 800c6c6:	bf44      	itt	mi
 800c6c8:	232b      	movmi	r3, #43	; 0x2b
 800c6ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6ce:	f89a 3000 	ldrb.w	r3, [sl]
 800c6d2:	2b2a      	cmp	r3, #42	; 0x2a
 800c6d4:	d015      	beq.n	800c702 <_svfiprintf_r+0xf6>
 800c6d6:	9a07      	ldr	r2, [sp, #28]
 800c6d8:	4654      	mov	r4, sl
 800c6da:	2000      	movs	r0, #0
 800c6dc:	f04f 0c0a 	mov.w	ip, #10
 800c6e0:	4621      	mov	r1, r4
 800c6e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6e6:	3b30      	subs	r3, #48	; 0x30
 800c6e8:	2b09      	cmp	r3, #9
 800c6ea:	d94e      	bls.n	800c78a <_svfiprintf_r+0x17e>
 800c6ec:	b1b0      	cbz	r0, 800c71c <_svfiprintf_r+0x110>
 800c6ee:	9207      	str	r2, [sp, #28]
 800c6f0:	e014      	b.n	800c71c <_svfiprintf_r+0x110>
 800c6f2:	eba0 0308 	sub.w	r3, r0, r8
 800c6f6:	fa09 f303 	lsl.w	r3, r9, r3
 800c6fa:	4313      	orrs	r3, r2
 800c6fc:	9304      	str	r3, [sp, #16]
 800c6fe:	46a2      	mov	sl, r4
 800c700:	e7d2      	b.n	800c6a8 <_svfiprintf_r+0x9c>
 800c702:	9b03      	ldr	r3, [sp, #12]
 800c704:	1d19      	adds	r1, r3, #4
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	9103      	str	r1, [sp, #12]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	bfbb      	ittet	lt
 800c70e:	425b      	neglt	r3, r3
 800c710:	f042 0202 	orrlt.w	r2, r2, #2
 800c714:	9307      	strge	r3, [sp, #28]
 800c716:	9307      	strlt	r3, [sp, #28]
 800c718:	bfb8      	it	lt
 800c71a:	9204      	strlt	r2, [sp, #16]
 800c71c:	7823      	ldrb	r3, [r4, #0]
 800c71e:	2b2e      	cmp	r3, #46	; 0x2e
 800c720:	d10c      	bne.n	800c73c <_svfiprintf_r+0x130>
 800c722:	7863      	ldrb	r3, [r4, #1]
 800c724:	2b2a      	cmp	r3, #42	; 0x2a
 800c726:	d135      	bne.n	800c794 <_svfiprintf_r+0x188>
 800c728:	9b03      	ldr	r3, [sp, #12]
 800c72a:	1d1a      	adds	r2, r3, #4
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	9203      	str	r2, [sp, #12]
 800c730:	2b00      	cmp	r3, #0
 800c732:	bfb8      	it	lt
 800c734:	f04f 33ff 	movlt.w	r3, #4294967295
 800c738:	3402      	adds	r4, #2
 800c73a:	9305      	str	r3, [sp, #20]
 800c73c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c808 <_svfiprintf_r+0x1fc>
 800c740:	7821      	ldrb	r1, [r4, #0]
 800c742:	2203      	movs	r2, #3
 800c744:	4650      	mov	r0, sl
 800c746:	f7f3 fd53 	bl	80001f0 <memchr>
 800c74a:	b140      	cbz	r0, 800c75e <_svfiprintf_r+0x152>
 800c74c:	2340      	movs	r3, #64	; 0x40
 800c74e:	eba0 000a 	sub.w	r0, r0, sl
 800c752:	fa03 f000 	lsl.w	r0, r3, r0
 800c756:	9b04      	ldr	r3, [sp, #16]
 800c758:	4303      	orrs	r3, r0
 800c75a:	3401      	adds	r4, #1
 800c75c:	9304      	str	r3, [sp, #16]
 800c75e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c762:	4826      	ldr	r0, [pc, #152]	; (800c7fc <_svfiprintf_r+0x1f0>)
 800c764:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c768:	2206      	movs	r2, #6
 800c76a:	f7f3 fd41 	bl	80001f0 <memchr>
 800c76e:	2800      	cmp	r0, #0
 800c770:	d038      	beq.n	800c7e4 <_svfiprintf_r+0x1d8>
 800c772:	4b23      	ldr	r3, [pc, #140]	; (800c800 <_svfiprintf_r+0x1f4>)
 800c774:	bb1b      	cbnz	r3, 800c7be <_svfiprintf_r+0x1b2>
 800c776:	9b03      	ldr	r3, [sp, #12]
 800c778:	3307      	adds	r3, #7
 800c77a:	f023 0307 	bic.w	r3, r3, #7
 800c77e:	3308      	adds	r3, #8
 800c780:	9303      	str	r3, [sp, #12]
 800c782:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c784:	4433      	add	r3, r6
 800c786:	9309      	str	r3, [sp, #36]	; 0x24
 800c788:	e767      	b.n	800c65a <_svfiprintf_r+0x4e>
 800c78a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c78e:	460c      	mov	r4, r1
 800c790:	2001      	movs	r0, #1
 800c792:	e7a5      	b.n	800c6e0 <_svfiprintf_r+0xd4>
 800c794:	2300      	movs	r3, #0
 800c796:	3401      	adds	r4, #1
 800c798:	9305      	str	r3, [sp, #20]
 800c79a:	4619      	mov	r1, r3
 800c79c:	f04f 0c0a 	mov.w	ip, #10
 800c7a0:	4620      	mov	r0, r4
 800c7a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7a6:	3a30      	subs	r2, #48	; 0x30
 800c7a8:	2a09      	cmp	r2, #9
 800c7aa:	d903      	bls.n	800c7b4 <_svfiprintf_r+0x1a8>
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d0c5      	beq.n	800c73c <_svfiprintf_r+0x130>
 800c7b0:	9105      	str	r1, [sp, #20]
 800c7b2:	e7c3      	b.n	800c73c <_svfiprintf_r+0x130>
 800c7b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7b8:	4604      	mov	r4, r0
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	e7f0      	b.n	800c7a0 <_svfiprintf_r+0x194>
 800c7be:	ab03      	add	r3, sp, #12
 800c7c0:	9300      	str	r3, [sp, #0]
 800c7c2:	462a      	mov	r2, r5
 800c7c4:	4b0f      	ldr	r3, [pc, #60]	; (800c804 <_svfiprintf_r+0x1f8>)
 800c7c6:	a904      	add	r1, sp, #16
 800c7c8:	4638      	mov	r0, r7
 800c7ca:	f3af 8000 	nop.w
 800c7ce:	1c42      	adds	r2, r0, #1
 800c7d0:	4606      	mov	r6, r0
 800c7d2:	d1d6      	bne.n	800c782 <_svfiprintf_r+0x176>
 800c7d4:	89ab      	ldrh	r3, [r5, #12]
 800c7d6:	065b      	lsls	r3, r3, #25
 800c7d8:	f53f af2c 	bmi.w	800c634 <_svfiprintf_r+0x28>
 800c7dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7de:	b01d      	add	sp, #116	; 0x74
 800c7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7e4:	ab03      	add	r3, sp, #12
 800c7e6:	9300      	str	r3, [sp, #0]
 800c7e8:	462a      	mov	r2, r5
 800c7ea:	4b06      	ldr	r3, [pc, #24]	; (800c804 <_svfiprintf_r+0x1f8>)
 800c7ec:	a904      	add	r1, sp, #16
 800c7ee:	4638      	mov	r0, r7
 800c7f0:	f000 f87a 	bl	800c8e8 <_printf_i>
 800c7f4:	e7eb      	b.n	800c7ce <_svfiprintf_r+0x1c2>
 800c7f6:	bf00      	nop
 800c7f8:	0800d720 	.word	0x0800d720
 800c7fc:	0800d72a 	.word	0x0800d72a
 800c800:	00000000 	.word	0x00000000
 800c804:	0800c555 	.word	0x0800c555
 800c808:	0800d726 	.word	0x0800d726

0800c80c <_printf_common>:
 800c80c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c810:	4616      	mov	r6, r2
 800c812:	4699      	mov	r9, r3
 800c814:	688a      	ldr	r2, [r1, #8]
 800c816:	690b      	ldr	r3, [r1, #16]
 800c818:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c81c:	4293      	cmp	r3, r2
 800c81e:	bfb8      	it	lt
 800c820:	4613      	movlt	r3, r2
 800c822:	6033      	str	r3, [r6, #0]
 800c824:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c828:	4607      	mov	r7, r0
 800c82a:	460c      	mov	r4, r1
 800c82c:	b10a      	cbz	r2, 800c832 <_printf_common+0x26>
 800c82e:	3301      	adds	r3, #1
 800c830:	6033      	str	r3, [r6, #0]
 800c832:	6823      	ldr	r3, [r4, #0]
 800c834:	0699      	lsls	r1, r3, #26
 800c836:	bf42      	ittt	mi
 800c838:	6833      	ldrmi	r3, [r6, #0]
 800c83a:	3302      	addmi	r3, #2
 800c83c:	6033      	strmi	r3, [r6, #0]
 800c83e:	6825      	ldr	r5, [r4, #0]
 800c840:	f015 0506 	ands.w	r5, r5, #6
 800c844:	d106      	bne.n	800c854 <_printf_common+0x48>
 800c846:	f104 0a19 	add.w	sl, r4, #25
 800c84a:	68e3      	ldr	r3, [r4, #12]
 800c84c:	6832      	ldr	r2, [r6, #0]
 800c84e:	1a9b      	subs	r3, r3, r2
 800c850:	42ab      	cmp	r3, r5
 800c852:	dc26      	bgt.n	800c8a2 <_printf_common+0x96>
 800c854:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c858:	1e13      	subs	r3, r2, #0
 800c85a:	6822      	ldr	r2, [r4, #0]
 800c85c:	bf18      	it	ne
 800c85e:	2301      	movne	r3, #1
 800c860:	0692      	lsls	r2, r2, #26
 800c862:	d42b      	bmi.n	800c8bc <_printf_common+0xb0>
 800c864:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c868:	4649      	mov	r1, r9
 800c86a:	4638      	mov	r0, r7
 800c86c:	47c0      	blx	r8
 800c86e:	3001      	adds	r0, #1
 800c870:	d01e      	beq.n	800c8b0 <_printf_common+0xa4>
 800c872:	6823      	ldr	r3, [r4, #0]
 800c874:	68e5      	ldr	r5, [r4, #12]
 800c876:	6832      	ldr	r2, [r6, #0]
 800c878:	f003 0306 	and.w	r3, r3, #6
 800c87c:	2b04      	cmp	r3, #4
 800c87e:	bf08      	it	eq
 800c880:	1aad      	subeq	r5, r5, r2
 800c882:	68a3      	ldr	r3, [r4, #8]
 800c884:	6922      	ldr	r2, [r4, #16]
 800c886:	bf0c      	ite	eq
 800c888:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c88c:	2500      	movne	r5, #0
 800c88e:	4293      	cmp	r3, r2
 800c890:	bfc4      	itt	gt
 800c892:	1a9b      	subgt	r3, r3, r2
 800c894:	18ed      	addgt	r5, r5, r3
 800c896:	2600      	movs	r6, #0
 800c898:	341a      	adds	r4, #26
 800c89a:	42b5      	cmp	r5, r6
 800c89c:	d11a      	bne.n	800c8d4 <_printf_common+0xc8>
 800c89e:	2000      	movs	r0, #0
 800c8a0:	e008      	b.n	800c8b4 <_printf_common+0xa8>
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	4652      	mov	r2, sl
 800c8a6:	4649      	mov	r1, r9
 800c8a8:	4638      	mov	r0, r7
 800c8aa:	47c0      	blx	r8
 800c8ac:	3001      	adds	r0, #1
 800c8ae:	d103      	bne.n	800c8b8 <_printf_common+0xac>
 800c8b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c8b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8b8:	3501      	adds	r5, #1
 800c8ba:	e7c6      	b.n	800c84a <_printf_common+0x3e>
 800c8bc:	18e1      	adds	r1, r4, r3
 800c8be:	1c5a      	adds	r2, r3, #1
 800c8c0:	2030      	movs	r0, #48	; 0x30
 800c8c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c8c6:	4422      	add	r2, r4
 800c8c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c8cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c8d0:	3302      	adds	r3, #2
 800c8d2:	e7c7      	b.n	800c864 <_printf_common+0x58>
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	4622      	mov	r2, r4
 800c8d8:	4649      	mov	r1, r9
 800c8da:	4638      	mov	r0, r7
 800c8dc:	47c0      	blx	r8
 800c8de:	3001      	adds	r0, #1
 800c8e0:	d0e6      	beq.n	800c8b0 <_printf_common+0xa4>
 800c8e2:	3601      	adds	r6, #1
 800c8e4:	e7d9      	b.n	800c89a <_printf_common+0x8e>
	...

0800c8e8 <_printf_i>:
 800c8e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c8ec:	7e0f      	ldrb	r7, [r1, #24]
 800c8ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c8f0:	2f78      	cmp	r7, #120	; 0x78
 800c8f2:	4691      	mov	r9, r2
 800c8f4:	4680      	mov	r8, r0
 800c8f6:	460c      	mov	r4, r1
 800c8f8:	469a      	mov	sl, r3
 800c8fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c8fe:	d807      	bhi.n	800c910 <_printf_i+0x28>
 800c900:	2f62      	cmp	r7, #98	; 0x62
 800c902:	d80a      	bhi.n	800c91a <_printf_i+0x32>
 800c904:	2f00      	cmp	r7, #0
 800c906:	f000 80d8 	beq.w	800caba <_printf_i+0x1d2>
 800c90a:	2f58      	cmp	r7, #88	; 0x58
 800c90c:	f000 80a3 	beq.w	800ca56 <_printf_i+0x16e>
 800c910:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c914:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c918:	e03a      	b.n	800c990 <_printf_i+0xa8>
 800c91a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c91e:	2b15      	cmp	r3, #21
 800c920:	d8f6      	bhi.n	800c910 <_printf_i+0x28>
 800c922:	a101      	add	r1, pc, #4	; (adr r1, 800c928 <_printf_i+0x40>)
 800c924:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c928:	0800c981 	.word	0x0800c981
 800c92c:	0800c995 	.word	0x0800c995
 800c930:	0800c911 	.word	0x0800c911
 800c934:	0800c911 	.word	0x0800c911
 800c938:	0800c911 	.word	0x0800c911
 800c93c:	0800c911 	.word	0x0800c911
 800c940:	0800c995 	.word	0x0800c995
 800c944:	0800c911 	.word	0x0800c911
 800c948:	0800c911 	.word	0x0800c911
 800c94c:	0800c911 	.word	0x0800c911
 800c950:	0800c911 	.word	0x0800c911
 800c954:	0800caa1 	.word	0x0800caa1
 800c958:	0800c9c5 	.word	0x0800c9c5
 800c95c:	0800ca83 	.word	0x0800ca83
 800c960:	0800c911 	.word	0x0800c911
 800c964:	0800c911 	.word	0x0800c911
 800c968:	0800cac3 	.word	0x0800cac3
 800c96c:	0800c911 	.word	0x0800c911
 800c970:	0800c9c5 	.word	0x0800c9c5
 800c974:	0800c911 	.word	0x0800c911
 800c978:	0800c911 	.word	0x0800c911
 800c97c:	0800ca8b 	.word	0x0800ca8b
 800c980:	682b      	ldr	r3, [r5, #0]
 800c982:	1d1a      	adds	r2, r3, #4
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	602a      	str	r2, [r5, #0]
 800c988:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c98c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c990:	2301      	movs	r3, #1
 800c992:	e0a3      	b.n	800cadc <_printf_i+0x1f4>
 800c994:	6820      	ldr	r0, [r4, #0]
 800c996:	6829      	ldr	r1, [r5, #0]
 800c998:	0606      	lsls	r6, r0, #24
 800c99a:	f101 0304 	add.w	r3, r1, #4
 800c99e:	d50a      	bpl.n	800c9b6 <_printf_i+0xce>
 800c9a0:	680e      	ldr	r6, [r1, #0]
 800c9a2:	602b      	str	r3, [r5, #0]
 800c9a4:	2e00      	cmp	r6, #0
 800c9a6:	da03      	bge.n	800c9b0 <_printf_i+0xc8>
 800c9a8:	232d      	movs	r3, #45	; 0x2d
 800c9aa:	4276      	negs	r6, r6
 800c9ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9b0:	485e      	ldr	r0, [pc, #376]	; (800cb2c <_printf_i+0x244>)
 800c9b2:	230a      	movs	r3, #10
 800c9b4:	e019      	b.n	800c9ea <_printf_i+0x102>
 800c9b6:	680e      	ldr	r6, [r1, #0]
 800c9b8:	602b      	str	r3, [r5, #0]
 800c9ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c9be:	bf18      	it	ne
 800c9c0:	b236      	sxthne	r6, r6
 800c9c2:	e7ef      	b.n	800c9a4 <_printf_i+0xbc>
 800c9c4:	682b      	ldr	r3, [r5, #0]
 800c9c6:	6820      	ldr	r0, [r4, #0]
 800c9c8:	1d19      	adds	r1, r3, #4
 800c9ca:	6029      	str	r1, [r5, #0]
 800c9cc:	0601      	lsls	r1, r0, #24
 800c9ce:	d501      	bpl.n	800c9d4 <_printf_i+0xec>
 800c9d0:	681e      	ldr	r6, [r3, #0]
 800c9d2:	e002      	b.n	800c9da <_printf_i+0xf2>
 800c9d4:	0646      	lsls	r6, r0, #25
 800c9d6:	d5fb      	bpl.n	800c9d0 <_printf_i+0xe8>
 800c9d8:	881e      	ldrh	r6, [r3, #0]
 800c9da:	4854      	ldr	r0, [pc, #336]	; (800cb2c <_printf_i+0x244>)
 800c9dc:	2f6f      	cmp	r7, #111	; 0x6f
 800c9de:	bf0c      	ite	eq
 800c9e0:	2308      	moveq	r3, #8
 800c9e2:	230a      	movne	r3, #10
 800c9e4:	2100      	movs	r1, #0
 800c9e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c9ea:	6865      	ldr	r5, [r4, #4]
 800c9ec:	60a5      	str	r5, [r4, #8]
 800c9ee:	2d00      	cmp	r5, #0
 800c9f0:	bfa2      	ittt	ge
 800c9f2:	6821      	ldrge	r1, [r4, #0]
 800c9f4:	f021 0104 	bicge.w	r1, r1, #4
 800c9f8:	6021      	strge	r1, [r4, #0]
 800c9fa:	b90e      	cbnz	r6, 800ca00 <_printf_i+0x118>
 800c9fc:	2d00      	cmp	r5, #0
 800c9fe:	d04d      	beq.n	800ca9c <_printf_i+0x1b4>
 800ca00:	4615      	mov	r5, r2
 800ca02:	fbb6 f1f3 	udiv	r1, r6, r3
 800ca06:	fb03 6711 	mls	r7, r3, r1, r6
 800ca0a:	5dc7      	ldrb	r7, [r0, r7]
 800ca0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ca10:	4637      	mov	r7, r6
 800ca12:	42bb      	cmp	r3, r7
 800ca14:	460e      	mov	r6, r1
 800ca16:	d9f4      	bls.n	800ca02 <_printf_i+0x11a>
 800ca18:	2b08      	cmp	r3, #8
 800ca1a:	d10b      	bne.n	800ca34 <_printf_i+0x14c>
 800ca1c:	6823      	ldr	r3, [r4, #0]
 800ca1e:	07de      	lsls	r6, r3, #31
 800ca20:	d508      	bpl.n	800ca34 <_printf_i+0x14c>
 800ca22:	6923      	ldr	r3, [r4, #16]
 800ca24:	6861      	ldr	r1, [r4, #4]
 800ca26:	4299      	cmp	r1, r3
 800ca28:	bfde      	ittt	le
 800ca2a:	2330      	movle	r3, #48	; 0x30
 800ca2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ca30:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ca34:	1b52      	subs	r2, r2, r5
 800ca36:	6122      	str	r2, [r4, #16]
 800ca38:	f8cd a000 	str.w	sl, [sp]
 800ca3c:	464b      	mov	r3, r9
 800ca3e:	aa03      	add	r2, sp, #12
 800ca40:	4621      	mov	r1, r4
 800ca42:	4640      	mov	r0, r8
 800ca44:	f7ff fee2 	bl	800c80c <_printf_common>
 800ca48:	3001      	adds	r0, #1
 800ca4a:	d14c      	bne.n	800cae6 <_printf_i+0x1fe>
 800ca4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca50:	b004      	add	sp, #16
 800ca52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca56:	4835      	ldr	r0, [pc, #212]	; (800cb2c <_printf_i+0x244>)
 800ca58:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ca5c:	6829      	ldr	r1, [r5, #0]
 800ca5e:	6823      	ldr	r3, [r4, #0]
 800ca60:	f851 6b04 	ldr.w	r6, [r1], #4
 800ca64:	6029      	str	r1, [r5, #0]
 800ca66:	061d      	lsls	r5, r3, #24
 800ca68:	d514      	bpl.n	800ca94 <_printf_i+0x1ac>
 800ca6a:	07df      	lsls	r7, r3, #31
 800ca6c:	bf44      	itt	mi
 800ca6e:	f043 0320 	orrmi.w	r3, r3, #32
 800ca72:	6023      	strmi	r3, [r4, #0]
 800ca74:	b91e      	cbnz	r6, 800ca7e <_printf_i+0x196>
 800ca76:	6823      	ldr	r3, [r4, #0]
 800ca78:	f023 0320 	bic.w	r3, r3, #32
 800ca7c:	6023      	str	r3, [r4, #0]
 800ca7e:	2310      	movs	r3, #16
 800ca80:	e7b0      	b.n	800c9e4 <_printf_i+0xfc>
 800ca82:	6823      	ldr	r3, [r4, #0]
 800ca84:	f043 0320 	orr.w	r3, r3, #32
 800ca88:	6023      	str	r3, [r4, #0]
 800ca8a:	2378      	movs	r3, #120	; 0x78
 800ca8c:	4828      	ldr	r0, [pc, #160]	; (800cb30 <_printf_i+0x248>)
 800ca8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ca92:	e7e3      	b.n	800ca5c <_printf_i+0x174>
 800ca94:	0659      	lsls	r1, r3, #25
 800ca96:	bf48      	it	mi
 800ca98:	b2b6      	uxthmi	r6, r6
 800ca9a:	e7e6      	b.n	800ca6a <_printf_i+0x182>
 800ca9c:	4615      	mov	r5, r2
 800ca9e:	e7bb      	b.n	800ca18 <_printf_i+0x130>
 800caa0:	682b      	ldr	r3, [r5, #0]
 800caa2:	6826      	ldr	r6, [r4, #0]
 800caa4:	6961      	ldr	r1, [r4, #20]
 800caa6:	1d18      	adds	r0, r3, #4
 800caa8:	6028      	str	r0, [r5, #0]
 800caaa:	0635      	lsls	r5, r6, #24
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	d501      	bpl.n	800cab4 <_printf_i+0x1cc>
 800cab0:	6019      	str	r1, [r3, #0]
 800cab2:	e002      	b.n	800caba <_printf_i+0x1d2>
 800cab4:	0670      	lsls	r0, r6, #25
 800cab6:	d5fb      	bpl.n	800cab0 <_printf_i+0x1c8>
 800cab8:	8019      	strh	r1, [r3, #0]
 800caba:	2300      	movs	r3, #0
 800cabc:	6123      	str	r3, [r4, #16]
 800cabe:	4615      	mov	r5, r2
 800cac0:	e7ba      	b.n	800ca38 <_printf_i+0x150>
 800cac2:	682b      	ldr	r3, [r5, #0]
 800cac4:	1d1a      	adds	r2, r3, #4
 800cac6:	602a      	str	r2, [r5, #0]
 800cac8:	681d      	ldr	r5, [r3, #0]
 800caca:	6862      	ldr	r2, [r4, #4]
 800cacc:	2100      	movs	r1, #0
 800cace:	4628      	mov	r0, r5
 800cad0:	f7f3 fb8e 	bl	80001f0 <memchr>
 800cad4:	b108      	cbz	r0, 800cada <_printf_i+0x1f2>
 800cad6:	1b40      	subs	r0, r0, r5
 800cad8:	6060      	str	r0, [r4, #4]
 800cada:	6863      	ldr	r3, [r4, #4]
 800cadc:	6123      	str	r3, [r4, #16]
 800cade:	2300      	movs	r3, #0
 800cae0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cae4:	e7a8      	b.n	800ca38 <_printf_i+0x150>
 800cae6:	6923      	ldr	r3, [r4, #16]
 800cae8:	462a      	mov	r2, r5
 800caea:	4649      	mov	r1, r9
 800caec:	4640      	mov	r0, r8
 800caee:	47d0      	blx	sl
 800caf0:	3001      	adds	r0, #1
 800caf2:	d0ab      	beq.n	800ca4c <_printf_i+0x164>
 800caf4:	6823      	ldr	r3, [r4, #0]
 800caf6:	079b      	lsls	r3, r3, #30
 800caf8:	d413      	bmi.n	800cb22 <_printf_i+0x23a>
 800cafa:	68e0      	ldr	r0, [r4, #12]
 800cafc:	9b03      	ldr	r3, [sp, #12]
 800cafe:	4298      	cmp	r0, r3
 800cb00:	bfb8      	it	lt
 800cb02:	4618      	movlt	r0, r3
 800cb04:	e7a4      	b.n	800ca50 <_printf_i+0x168>
 800cb06:	2301      	movs	r3, #1
 800cb08:	4632      	mov	r2, r6
 800cb0a:	4649      	mov	r1, r9
 800cb0c:	4640      	mov	r0, r8
 800cb0e:	47d0      	blx	sl
 800cb10:	3001      	adds	r0, #1
 800cb12:	d09b      	beq.n	800ca4c <_printf_i+0x164>
 800cb14:	3501      	adds	r5, #1
 800cb16:	68e3      	ldr	r3, [r4, #12]
 800cb18:	9903      	ldr	r1, [sp, #12]
 800cb1a:	1a5b      	subs	r3, r3, r1
 800cb1c:	42ab      	cmp	r3, r5
 800cb1e:	dcf2      	bgt.n	800cb06 <_printf_i+0x21e>
 800cb20:	e7eb      	b.n	800cafa <_printf_i+0x212>
 800cb22:	2500      	movs	r5, #0
 800cb24:	f104 0619 	add.w	r6, r4, #25
 800cb28:	e7f5      	b.n	800cb16 <_printf_i+0x22e>
 800cb2a:	bf00      	nop
 800cb2c:	0800d731 	.word	0x0800d731
 800cb30:	0800d742 	.word	0x0800d742

0800cb34 <__retarget_lock_acquire_recursive>:
 800cb34:	4770      	bx	lr

0800cb36 <__retarget_lock_release_recursive>:
 800cb36:	4770      	bx	lr

0800cb38 <memcpy>:
 800cb38:	440a      	add	r2, r1
 800cb3a:	4291      	cmp	r1, r2
 800cb3c:	f100 33ff 	add.w	r3, r0, #4294967295
 800cb40:	d100      	bne.n	800cb44 <memcpy+0xc>
 800cb42:	4770      	bx	lr
 800cb44:	b510      	push	{r4, lr}
 800cb46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb4e:	4291      	cmp	r1, r2
 800cb50:	d1f9      	bne.n	800cb46 <memcpy+0xe>
 800cb52:	bd10      	pop	{r4, pc}

0800cb54 <memmove>:
 800cb54:	4288      	cmp	r0, r1
 800cb56:	b510      	push	{r4, lr}
 800cb58:	eb01 0402 	add.w	r4, r1, r2
 800cb5c:	d902      	bls.n	800cb64 <memmove+0x10>
 800cb5e:	4284      	cmp	r4, r0
 800cb60:	4623      	mov	r3, r4
 800cb62:	d807      	bhi.n	800cb74 <memmove+0x20>
 800cb64:	1e43      	subs	r3, r0, #1
 800cb66:	42a1      	cmp	r1, r4
 800cb68:	d008      	beq.n	800cb7c <memmove+0x28>
 800cb6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cb72:	e7f8      	b.n	800cb66 <memmove+0x12>
 800cb74:	4402      	add	r2, r0
 800cb76:	4601      	mov	r1, r0
 800cb78:	428a      	cmp	r2, r1
 800cb7a:	d100      	bne.n	800cb7e <memmove+0x2a>
 800cb7c:	bd10      	pop	{r4, pc}
 800cb7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cb82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cb86:	e7f7      	b.n	800cb78 <memmove+0x24>

0800cb88 <_realloc_r>:
 800cb88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb8c:	4680      	mov	r8, r0
 800cb8e:	4614      	mov	r4, r2
 800cb90:	460e      	mov	r6, r1
 800cb92:	b921      	cbnz	r1, 800cb9e <_realloc_r+0x16>
 800cb94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb98:	4611      	mov	r1, r2
 800cb9a:	f7ff bc17 	b.w	800c3cc <_malloc_r>
 800cb9e:	b92a      	cbnz	r2, 800cbac <_realloc_r+0x24>
 800cba0:	f7ff fba8 	bl	800c2f4 <_free_r>
 800cba4:	4625      	mov	r5, r4
 800cba6:	4628      	mov	r0, r5
 800cba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbac:	f000 f81b 	bl	800cbe6 <_malloc_usable_size_r>
 800cbb0:	4284      	cmp	r4, r0
 800cbb2:	4607      	mov	r7, r0
 800cbb4:	d802      	bhi.n	800cbbc <_realloc_r+0x34>
 800cbb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cbba:	d812      	bhi.n	800cbe2 <_realloc_r+0x5a>
 800cbbc:	4621      	mov	r1, r4
 800cbbe:	4640      	mov	r0, r8
 800cbc0:	f7ff fc04 	bl	800c3cc <_malloc_r>
 800cbc4:	4605      	mov	r5, r0
 800cbc6:	2800      	cmp	r0, #0
 800cbc8:	d0ed      	beq.n	800cba6 <_realloc_r+0x1e>
 800cbca:	42bc      	cmp	r4, r7
 800cbcc:	4622      	mov	r2, r4
 800cbce:	4631      	mov	r1, r6
 800cbd0:	bf28      	it	cs
 800cbd2:	463a      	movcs	r2, r7
 800cbd4:	f7ff ffb0 	bl	800cb38 <memcpy>
 800cbd8:	4631      	mov	r1, r6
 800cbda:	4640      	mov	r0, r8
 800cbdc:	f7ff fb8a 	bl	800c2f4 <_free_r>
 800cbe0:	e7e1      	b.n	800cba6 <_realloc_r+0x1e>
 800cbe2:	4635      	mov	r5, r6
 800cbe4:	e7df      	b.n	800cba6 <_realloc_r+0x1e>

0800cbe6 <_malloc_usable_size_r>:
 800cbe6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbea:	1f18      	subs	r0, r3, #4
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	bfbc      	itt	lt
 800cbf0:	580b      	ldrlt	r3, [r1, r0]
 800cbf2:	18c0      	addlt	r0, r0, r3
 800cbf4:	4770      	bx	lr
	...

0800cbf8 <_init>:
 800cbf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbfa:	bf00      	nop
 800cbfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbfe:	bc08      	pop	{r3}
 800cc00:	469e      	mov	lr, r3
 800cc02:	4770      	bx	lr

0800cc04 <_fini>:
 800cc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc06:	bf00      	nop
 800cc08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc0a:	bc08      	pop	{r3}
 800cc0c:	469e      	mov	lr, r3
 800cc0e:	4770      	bx	lr
